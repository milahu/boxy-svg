import a2 from "../../libs/xel/xel.js";
import a3 from "../../libs/color/color.js";
import a4 from "../../libs/css-parser/css-parser.js";
import "../../libs/paper/paper.js";
import a5 from "../../libs/seed-random/seed-random.js";
import a6 from "../../libs/dom-purify/dom-purify.js";
import a7 from "../../libs/dexie/dexie.js";
import a8 from "../../libs/typesense/typesense.js";
import a9 from "../../libs/pako/pako.js";
import ab from "../../libs/firebase/firebase.js";
import ac from "../../libs/prose-mirror/prose-mirror.js";
import ad from "../../libs/code-mirror/code-mirror-tiny.js";
const d = "./";
const u = "http://www.w3.org/2000/svg";
const p = ["circle", "ellipse", "line", "path", "polygon", "polyline", "rect"];
const m = ["text", "textPath", "tspan"];
const x = [...p, ...m, "foreignObject", "image"];
const g = [...p, ...m];
const b = ["solidcolor", "linearGradient", "radialGradient", "pattern"];
const f = ["bx-title", "desc", "metadata"];
const w = ["svg", "g", "defs", "symbol", "use"];
const v = [...p, "text", "use"];
const y = [...x, "clipPath", "a", "g", "use"];
const k = [
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDropShadow",
  "feFlood",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMorphology",
  "feOffset",
  "feSpecularLighting",
  "feTile",
  "feTurbulence",
];
const C = ["feFuncA", "feFuncB", "feFuncG", "feFuncR"];
const S = ["feDistantLight", "fePointLight", "feSpotLight"];
const T = ["animate", "animateMotion", "animateTransform", "set"];
const $ = [
  ...x,
  ...b,
  ...f,
  ...w,
  ...k,
  ...C,
  ...S,
  ...T,
  "a",
  "marker",
  "mask",
  "feMergeNode",
  "filter",
  "clipPath",
  "stop",
  "script",
  "style",
  "view",
];
const P = [
  "normal",
  "multiply",
  "screen",
  "overlay",
  "darken",
  "lighten",
  "color-dodge",
  "color-burn",
  "hard-light",
  "soft-light",
  "difference",
  "exclusion",
  "hue",
  "saturation",
  "color",
  "luminosity",
];
const E = [
  "direction",
  "dominant-baseline",
  "font-family",
  "font-size",
  "font-stretch",
  "font-style",
  "font-variant",
  "font-weight",
  "letter-spacing",
  "text-anchor",
  "text-decoration",
  "text-rendering",
  "text-wrap",
  "unicode-bidi",
  "white-space",
  "white-space-collapse",
  "word-spacing",
  "writing-mode",
];
const L = {
  a: [
    ...T,
    ...f,
    ...b,
    ...p,
    ...w,
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
    "#text",
  ],
  animate: [...f, "script"],
  animateMotion: [...f, "script", "mpath"],
  animateTransform: [...f, "script"],
  "bx-title": ["#text"],
  circle: [...T, ...f, ...b, "clipPath", "marker", "mask", "script", "style"],
  clipPath: [...T, ...f, ...p, "text", "use", "script", "style"],
  defs: [
    ...T,
    ...f,
    ...b,
    ...p,
    ...w,
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
    "bx-grid",
    "bx-guide",
  ],
  desc: ["#text"],
  ellipse: [...T, ...f, ...b, "clipPath", "marker", "mask", "script", "style"],
  feBlend: [...f, "animate", "set", "script", "style"],
  feColorMatrix: [...f, "animate", "set", "script", "style"],
  feComponentTransfer: [...f, ...C, "script", "style"],
  feComposite: [...f, "animate", "set", "script", "style"],
  feConvolveMatrix: [...f, "animate", "set", "script", "style"],
  feDiffuseLighting: [...f, ...S, "script", "style"],
  feDisplacementMap: [...f, "animate", "set", "script", "style"],
  feDistantLight: [...f, "animate", "set", "script", "style"],
  feDropShadow: [...f, "animate", "set", "script", "style"],
  feFlood: [...f, "animate", "set", "script", "style"],
  feFuncR: [...f, "animate", "set", "script", "style"],
  feFuncG: [...f, "animate", "set", "script", "style"],
  feFuncB: [...f, "animate", "set", "script", "style"],
  feFuncA: [...f, "animate", "set", "script", "style"],
  feGaussianBlur: [...f, "animate", "set", "script", "style"],
  feImage: [...f, "animate", "set", "script", "style"],
  feMerge: [...f, "feMergeNode", "script", "style"],
  feMergeNode: [...f, "animate", "set", "script", "style"],
  feMorphology: [...f, "animate", "set", "script", "style"],
  feOffset: [...f, "animate", "set", "script", "style"],
  fePointLight: [...f, "animate", "set", "script", "style"],
  feSpecularLighting: [...f, ...S, "script", "style"],
  feSpotLight: [...f, "animate", "set", "script", "style"],
  feTile: [...f, "animate", "set", "script", "style"],
  feTurbulence: [...f, "animate", "set", "script", "style"],
  filter: [...f, ...k, "animate", "set", "script", "style"],
  g: [
    ...T,
    ...f,
    ...b,
    ...p,
    ...w,
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
  ],
  image: [...T, ...f, "clipPath", "mask", "script", "style"],
  line: [...T, ...f, ...b, "clipPath", "marker", "mask", "script", "style"],
  linearGradient: [
    ...f,
    "animate",
    "animateTransform",
    "set",
    "script",
    "stop",
    "style",
  ],
  marker: [
    ...f,
    ...b,
    ...p,
    ...w,
    "animate",
    "animateMotion",
    "animateTransform",
    "set",
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
  ],
  mask: [
    ...T,
    ...f,
    ...p,
    ...w,
    ...b,
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
    "text",
  ],
  mpath: [...f, "script"],
  path: [...T, ...f, ...b, "clipPath", "marker", "mask", "script", "style"],
  pattern: [
    ...f,
    ...b,
    ...p,
    ...w,
    "animate",
    "animateMotion",
    "animateTransform",
    "set",
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
  ],
  polygon: [...T, ...f, ...b, "clipPath", "marker", "mask", "script", "style"],
  polyline: [...T, ...f, ...b, "clipPath", "marker", "mask", "script", "style"],
  radialGradient: [
    ...f,
    "animate",
    "animateTransform",
    "set",
    "script",
    "stop",
    "style",
  ],
  rect: [...T, ...f, ...b, "clipPath", "marker", "mask", "script", "style"],
  script: ["#text"],
  set: [...f, "script"],
  solidcolor: [...f, "script", "style"],
  stop: [...f, "animate", "set", "script", "style"],
  style: ["#text"],
  svg: [
    ...T,
    ...f,
    ...b,
    ...p,
    ...w,
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
  ],
  symbol: [
    ...f,
    ...b,
    ...p,
    ...w,
    "animate",
    "animateMotion",
    "animateTransform",
    "set",
    "a",
    "clipPath",
    "filter",
    "image",
    "marker",
    "mask",
    "script",
    "style",
    "text",
    "view",
  ],
  text: [
    ...T,
    ...f,
    ...b,
    "a",
    "clipPath",
    "marker",
    "mask",
    "script",
    "style",
    "tspan",
    "textPath",
    "#text",
  ],
  textPath: [
    ...f,
    ...b,
    "animate",
    "set",
    "a",
    "clipPath",
    "marker",
    "mask",
    "script",
    "style",
    "tspan",
    "#text",
  ],
  tspan: [
    ...f,
    ...b,
    "animate",
    "set",
    "a",
    "script",
    "style",
    "tspan",
    "#text",
  ],
  use: [...T, ...f, ...b, "clipPath", "mask", "script", "style"],
  view: [
    ...f,
    "animate",
    "animateMotion",
    "animateTransform",
    "set",
    "script",
    "style",
  ],
};
const U = [
  {
    name: "alignment-baseline",
    displayName: "#alignment-baseline",
    presentationAttributeName: "alignment-baseline",
    initialValue: "baseline",
    values: [
      {
        type: "token",
        tokens: [
          "baseline",
          "text-bottom",
          "alphabetic",
          "ideographic",
          "middle",
          "central",
          "mathematical",
          "text-top",
          "bottom",
          "center",
          "top",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "tspan", "textPath", "text a"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "baseline-shift",
    displayName: "#baseline-shift",
    presentationAttributeName: "baseline-shift",
    initialValue: "0",
    values: [
      {
        type: "number",
      },
      {
        type: "percentage",
      },
      {
        type: "length",
      },
      {
        type: "token",
        tokens: ["sub", "super", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "tspan", "textPath", "text a"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "clip-path",
    displayName: "#clip-path",
    presentationAttributeName: "clip-path",
    initialValue: "none",
    values: [
      {
        type: "url",
      },
      {
        type: "token",
        tokens: [
          "fill-box",
          "stroke-box",
          "view-box",
          "none",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: [...x, "svg", "g", "a", "use"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "clip-rule",
    displayName: "#clip-rule",
    presentationAttributeName: "clip-rule",
    initialValue: "nonzero",
    values: [
      {
        type: "token",
        tokens: ["nonzero", "evenodd", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...x, "use"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "color",
    displayName: "#color",
    presentationAttributeName: "color",
    initialValue: "#000",
    values: [
      {
        type: "color",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...x, "svg", "g", "a", "use"],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "color-interpolation",
    displayName: "#color-interpolation",
    presentationAttributeName: "color-interpolation",
    initialValue: "sRGB",
    values: [
      {
        type: "token",
        tokens: ["auto", "sRGB", "linearRGB", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [
      ...x,
      "svg",
      "g",
      "a",
      "use",
      "linearGradient",
      "radialGradient",
    ],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "color-interpolation-filters",
    displayName: "#color-interpolation",
    presentationAttributeName: "color-interpolation-filters",
    initialValue: "linearRGB",
    values: [
      {
        type: "token",
        tokens: ["auto", "sRGB", "linearRGB", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [
      "feBlend",
      "feColorMatrix",
      "feComponentTransfer",
      "feComposite",
      "feConvolveMatrix",
      "feDiffuseLighting",
      "feDisplacementMap",
      "feDropShadow",
      "feGaussianBlur",
      "feMerge",
      "feMorphology",
      "feSpecularLighting",
      "feTurbulence",
    ],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "cursor",
    displayName: "#cursor",
    presentationAttributeName: "cursor",
    initialValue: "auto",
    values: [
      {
        type: "url",
      },
      {
        type: "token",
        tokens: [
          "context-menu",
          "help",
          "pointer",
          "progress",
          "wait ",
          "cell",
          "crosshair",
          "text",
          "vertical-text",
          "alias",
          "copy",
          "move",
          "no-drop",
          "not-allowed",
          "grab",
          "grabbing",
          "e-resize",
          "n-resize",
          "ne-resize",
          "nw-resize",
          "s-resize",
          "se-resize",
          "sw-resize",
          "w-resize",
          "ew-resize",
          "ns-resize",
          "nesw-resize",
          "nwse-resize",
          "col-resize",
          "row-resize",
          "all-scroll",
          "zoom-in",
          "zoom-out",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: [...x, "svg", "g", "a", "use"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "direction",
    displayName: "#direction",
    presentationAttributeName: "direction",
    initialValue: "ltr",
    values: [
      {
        type: "token",
        tokens: ["ltr", "rtl", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "display",
    displayName: "#display",
    presentationAttributeName: "display",
    initialValue: "inline",
    values: [
      {
        type: "token",
        tokens: ["none", "inline", "block", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...x, "textPath", "tspan", "svg", "g", "a", "use"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "dominant-baseline",
    displayName: "#dominant-baseline",
    presentationAttributeName: "dominant-baseline",
    initialValue: "auto",
    values: [
      {
        type: "token",
        tokens: [
          "auto",
          "use-script",
          "no-change",
          "reset-size",
          "ideographic",
          "alphabetic",
          "hanging",
          "mathematical",
          "central",
          "middle",
          "text-after-edge",
          "text-before-edge",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "fill",
    displayName: "#fill",
    presentationAttributeName: "fill",
    initialValue: "#000",
    values: [
      {
        type: "color",
      },
      {
        type: "url",
      },
      {
        type: "token",
        tokens: ["none", "currentColor", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "fill-opacity",
    displayName: "#fill-opacity",
    presentationAttributeName: "fill-opacity",
    initialValue: "1",
    values: [
      {
        type: "number",
      },
      {
        type: "percentage",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "fill-rule",
    displayName: "#fill-rule",
    presentationAttributeName: "fill-rule",
    initialValue: "nonzero",
    values: [
      {
        type: "token",
        tokens: ["nonzero", "evenodd", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "filter",
    displayName: "#filter",
    presentationAttributeName: "filter",
    initialValue: "none",
    values: [
      {
        type: "filter-function-list",
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...x, "textPath", "tspan", "g", "a", "svg", "use"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "flood-color",
    displayName: "#flood-color",
    presentationAttributeName: "flood-color",
    initialValue: "#000",
    values: [
      {
        type: "color",
      },
      {
        type: "token",
        tokens: ["currentColor", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["feFlood"],
    inheritable: false,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "flood-opacity",
    displayName: "#flood-opacity",
    presentationAttributeName: "flood-opacity",
    initialValue: "1",
    values: [
      {
        type: "number",
        min: 0,
      },
      {
        type: "percentage",
        min: 0,
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["feFlood"],
    inheritable: false,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "font",
    displayName: "#font",
    presentationAttributeName: "font",
    initialValue: null,
    values: [
      {
        type: "font",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "font-family",
    displayName: "#font-family",
    presentationAttributeName: "font-family",
    initialValue: null,
    values: [
      {
        type: "font-family",
      },
      {
        type: "token",
        tokens: [
          "cursive",
          "fantasy",
          "monospace",
          "sans-serif",
          "serif",
          "system-ui",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "font-size",
    displayName: "#font-size",
    presentationAttributeName: "font-size",
    initialValue: "medium",
    values: [
      {
        type: "token",
        tokens: [
          "xx-small",
          "x-small",
          "small",
          "medium",
          "large",
          "x-large",
          "xx-large",
          "larger",
          "smaller",
          "inherit",
          "initial",
          "unset",
        ],
      },
      {
        type: "number",
        min: 0,
      },
      {
        type: "percentage",
        min: 0,
      },
      {
        type: "length",
        min: 0,
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "font-stretch",
    displayName: "#font-stretch",
    presentationAttributeName: "font-stretch",
    initialValue: "normal",
    values: [
      {
        type: "token",
        tokens: [
          "normal",
          "wider",
          "narrower",
          "ultra-condensed",
          "extra-condensed",
          "condensed",
          "semi-condensed",
          "semi-expanded",
          "expanded",
          "extra-expanded",
          "ultra-expanded",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "font-style",
    displayName: "#font-style",
    presentationAttributeName: "font-style",
    initialValue: "normal",
    values: [
      {
        type: "token",
        tokens: ["normal", "italic", "oblique", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "font-variant",
    displayName: "#font-variant",
    presentationAttributeName: "font-variant",
    initialValue: "normal",
    values: [
      {
        type: "token",
        tokens: ["normal", "small-caps", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "font-weight",
    displayName: "#font-weight",
    presentationAttributeName: "font-weight",
    initialValue: "normal",
    values: [
      {
        type: "number",
      },
      {
        type: "token",
        tokens: [
          "normal",
          "bold",
          "bolder",
          "lighter",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "image-rendering",
    displayName: "#image-rendering",
    presentationAttributeName: "image-rendering",
    initialValue: "auto",
    values: [
      {
        type: "token",
        tokens: [
          "auto",
          "pixelated",
          "crisp-edges",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["image"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "isolation",
    displayName: "#isolation",
    presentationAttributeName: null,
    initialValue: "auto",
    values: [
      {
        type: "token",
        tokens: ["isolate", "auto", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [
      ...x,
      "svg",
      "g",
      "a",
      "use",
      "symbol",
      "marker",
      "textPath",
      "tspan",
    ],
    inheritable: false,
    animatable: false,
  },
  {
    name: "letter-spacing",
    displayName: "#letter-spacing",
    presentationAttributeName: "letter-spacing",
    initialValue: "normal",
    values: [
      {
        type: "number",
      },
      {
        type: "length",
      },
      {
        type: "token",
        tokens: ["normal", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "lighting-color",
    displayName: "#lighting-color",
    presentationAttributeName: "lighting-color",
    initialValue: "#fff",
    values: [
      {
        type: "color",
      },
      {
        type: "token",
        tokens: ["currentColor", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["feDiffuseLighting", "feSpecularLighting"],
    inheritable: false,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "line-height",
    displayName: "#line-height",
    presentationAttributeName: "line-height",
    initialValue: "normal",
    values: [
      {
        type: "number",
        min: 0,
      },
      {
        type: "percentage",
        min: 0,
      },
      {
        type: "length",
        min: 0,
      },
      {
        type: "token",
        tokens: ["normal", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "tspan", "textPath", "text a"],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "marker",
    displayName: "#marker",
    presentationAttributeName: "marker",
    initialValue: "none",
    values: [
      {
        type: "url",
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...p],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "marker-start",
    displayName: "#start-marker",
    presentationAttributeName: "marker-start",
    initialValue: "none",
    values: [
      {
        type: "url",
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...p],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "marker-mid",
    displayName: "#mid-marker",
    presentationAttributeName: "marker-mid",
    initialValue: "none",
    values: [
      {
        type: "url",
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...p],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "marker-end",
    displayName: "#end-marker",
    presentationAttributeName: "marker-end",
    initialValue: "none",
    values: [
      {
        type: "url",
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...p],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "mask",
    displayName: "#mask",
    presentationAttributeName: "mask",
    initialValue: "none",
    values: [
      {
        type: "url",
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...x, "g", "a", "svg", "use"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "mix-blend-mode",
    displayName: "#blend-mode",
    presentationAttributeName: null,
    initialValue: "normal",
    values: [
      {
        type: "token",
        tokens: [...P, "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [
      ...x,
      "svg",
      "g",
      "a",
      "use",
      "symbol",
      "marker",
      "textPath",
      "tspan",
    ],
    inheritable: false,
    animatable: false,
  },
  {
    name: "opacity",
    displayName: "#opacity",
    presentationAttributeName: "opacity",
    initialValue: "1",
    values: [
      {
        type: "number",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: [
      ...x,
      "svg",
      "g",
      "a",
      "use",
      "symbol",
      "marker",
      "textPath",
      "tspan",
    ],
    inheritable: false,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "overflow",
    displayName: "#overflow",
    presentationAttributeName: "overflow",
    initialValue: "visible",
    values: [
      {
        type: "token",
        tokens: [
          "visible",
          "hidden",
          "scroll",
          "auto",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["svg", "symbol", "pattern", "marker", "image"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "paint-order",
    displayName: "#paint-order",
    presentationAttributeName: null,
    initialValue: "normal",
    values: [
      {
        type: "token",
        tokens: ["normal"],
      },
      {
        type: "token-list",
        tokens: ["fill", "stroke", "markers"],
      },
    ],
    inheritable: true,
    appliesTo: [...g],
    animatable: false,
  },
  {
    name: "pointer-events",
    displayName: "#pointer-events",
    presentationAttributeName: "pointer-events",
    initialValue: "auto",
    values: [
      {
        type: "token",
        tokens: [
          "bounding-box",
          "visiblePainted",
          "visibleFill",
          "visibleStroke",
          "visible",
          "painted",
          "fill",
          "stroke",
          "all",
          "none",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    inheritable: true,
    appliesTo: [...x, "svg", "g", "a", "use"],
    animatable: true,
    interpolation: [],
  },
  {
    name: "shape-rendering",
    displayName: "#shape-rendering",
    presentationAttributeName: "shape-rendering",
    initialValue: "auto",
    values: [
      {
        type: "token",
        tokens: [
          "auto",
          "optimizeSpeed",
          "crispEdges",
          "geometricPrecision",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: [...p],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "stop-color",
    displayName: "#stop-color",
    presentationAttributeName: "stop-color",
    initialValue: "#000",
    values: [
      {
        type: "color",
      },
      {
        type: "token",
        tokens: ["currentColor", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["stop"],
    inheritable: false,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "stop-opacity",
    displayName: "#stop-opacity",
    presentationAttributeName: "stop-opacity",
    initialValue: "1",
    values: [
      {
        type: "number",
      },
      {
        type: "percentage",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["stop"],
    inheritable: false,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "stroke",
    displayName: "#stroke",
    presentationAttributeName: "stroke",
    initialValue: "none",
    values: [
      {
        type: "color",
      },
      {
        type: "url",
      },
      {
        type: "token",
        tokens: ["none", "currentColor", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "stroke-dasharray",
    displayName: "#stroke-dash-array",
    presentationAttributeName: "stroke-dasharray",
    initialValue: "none",
    values: [
      {
        type: "dasharray",
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline"],
  },
  {
    name: "stroke-dashoffset",
    displayName: "#stroke-dash-offset",
    presentationAttributeName: "stroke-dashoffset",
    initialValue: "0",
    values: [
      {
        type: "number",
      },
      {
        type: "percentage",
      },
      {
        type: "length",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "stroke-linecap",
    displayName: "#stroke-line-cap",
    presentationAttributeName: "stroke-linecap",
    initialValue: "butt",
    values: [
      {
        type: "token",
        tokens: ["butt", "round", "square", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "stroke-linejoin",
    displayName: "#stroke-line-join",
    presentationAttributeName: "stroke-linejoin",
    initialValue: "miter",
    values: [
      {
        type: "token",
        tokens: ["miter", "round", "bevel", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "stroke-miterlimit",
    displayName: "#stroke-miter-limit",
    presentationAttributeName: "stroke-miterlimit",
    initialValue: "4",
    values: [
      {
        type: "number",
        min: 1,
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "stroke-opacity",
    displayName: "#stroke-opacity",
    presentationAttributeName: "stroke-opacity",
    initialValue: "1",
    values: [
      {
        type: "number",
      },
      {
        type: "percentage",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "stroke-width",
    displayName: "#stroke-width",
    presentationAttributeName: "stroke-width",
    initialValue: "1",
    values: [
      {
        type: "number",
      },
      {
        type: "percentage",
      },
      {
        type: "length",
      },
      {
        type: "token",
        tokens: ["inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...g],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "text-anchor",
    displayName: "#text-anchor",
    presentationAttributeName: "text-anchor",
    initialValue: "start",
    values: [
      {
        type: "token",
        tokens: ["start", "middle", "end", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "text-decoration",
    displayName: "#text-decoration",
    presentationAttributeName: "text-decoration",
    initialValue: "none",
    values: [
      {
        type: "token-list",
        tokens: ["underline", "overline", "line-through"],
      },
      {
        type: "token",
        tokens: ["none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "text-rendering",
    displayName: "#text-rendering",
    presentationAttributeName: "text-rendering",
    initialValue: "auto",
    values: [
      {
        type: "token",
        tokens: [
          "auto",
          "optimizeSpeed",
          "optimizeLegibility",
          "geometricPrecision",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "text-transform",
    displayName: "#text-transform",
    presentationAttributeName: null,
    initialValue: "none",
    values: [
      {
        type: "token",
        tokens: [
          "capitalize",
          "uppercase",
          "lowercase",
          "none",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: false,
  },
  {
    name: "transform",
    displayName: "#transform",
    presentationAttributeName: "transform",
    initialValue: "none",
    values: [
      {
        type: "transform-list",
      },
      {
        type: "token",
        tokens: ["none"],
      },
    ],
    appliesTo: [
      "circle",
      "ellipse",
      "line",
      "path",
      "polygon",
      "polyline",
      "rect",
      "image",
      "text",
      "tspan",
      "use",
      "a",
      "g",
      "svg",
    ],
    inheritable: false,
    animatable: true,
    interpolation: ["linear", "spline"],
  },
  {
    name: "transform-box",
    displayName: "#transform-box",
    presentationAttributeName: null,
    initialValue: "view-box",
    values: [
      {
        type: "token",
        tokens: [
          "content-box",
          "border-box",
          "fill-box",
          "stroke-box",
          "view-box",
        ],
      },
    ],
    appliesTo: [
      "circle",
      "ellipse",
      "line",
      "path",
      "polygon",
      "polyline",
      "rect",
      "image",
      "text",
      "tspan",
      "use",
      "a",
      "g",
      "svg",
    ],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "transform-origin",
    displayName: "#transform-origin",
    presentationAttributeName: "transform-origin",
    initialValue: "0 0",
    values: [
      {
        type: "token",
        tokens: ["left", "center", "right", "top", "bottom"],
      },
      {
        type: "length",
      },
    ],
    appliesTo: [
      "circle",
      "ellipse",
      "line",
      "path",
      "polygon",
      "polyline",
      "rect",
      "image",
      "text",
      "tspan",
      "use",
      "a",
      "g",
      "svg",
    ],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "unicode-bidi",
    displayName: "#unicode-bidi",
    presentationAttributeName: "unicode-bidi",
    initialValue: "normal",
    values: [
      {
        type: "token",
        tokens: [
          "normal",
          "embed",
          "bidi-override",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "vector-effect",
    displayName: "#vector-effect",
    presentationAttributeName: "vector-effect",
    initialValue: "none",
    values: [
      {
        type: "token",
        tokens: ["non-scaling-stroke", "none", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...x, "use"],
    inheritable: false,
    animatable: true,
    interpolation: [],
  },
  {
    name: "visibility",
    displayName: "#visibility",
    presentationAttributeName: "visibility",
    initialValue: "visible",
    values: [
      {
        type: "token",
        tokens: ["visible", "hidden", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: [...x, "text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "word-spacing",
    displayName: "#word-spacing",
    presentationAttributeName: "word-spacing",
    initialValue: "normal",
    values: [
      {
        type: "number",
      },
      {
        type: "length",
      },
      {
        type: "token",
        tokens: ["normal", "inherit", "initial", "unset"],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: ["linear", "spline", "paced"],
  },
  {
    name: "white-space",
    displayName: "#white-space",
    presentationAttributeName: "white-space",
    initialValue: "normal",
    values: [
      {
        type: "token",
        tokens: [
          "normal",
          "pre",
          "nowrap",
          "pre-wrap",
          "pre-line",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "textPath", "tspan"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
  {
    name: "will-change",
    displayName: "#will-change",
    initialValue: "auto",
    values: [
      {
        type: "token",
        tokens: [
          "auto",
          "content",
          "mix-blend-mode",
          "filter",
          "opacity",
          "transform",
        ],
      },
    ],
    appliesTo: [
      "rect",
      "circle",
      "ellipse",
      "line",
      "path",
      "polygon",
      "polyline",
      "image",
      "text",
      "tspan",
      "use",
      "svg",
      "a",
      "g",
      "foreignObject",
    ],
    inheritable: true,
    animatable: false,
  },
  {
    name: "writing-mode",
    displayName: "#writing-mode",
    presentationAttributeName: "writing-mode",
    initialValue: "horizontal-tb",
    values: [
      {
        type: "token",
        tokens: [
          "horizontal-tb",
          "vertical-lr",
          "vertical-rl",
          "inherit",
          "initial",
          "unset",
        ],
      },
    ],
    appliesTo: ["text", "tspan", "textPath"],
    inheritable: true,
    animatable: true,
    interpolation: [],
  },
];
const D = U.map((af) => af.presentationAttributeName).filter((af) => af);
let z = (af, ag = 0) => {
  let ah = Math.pow(10, ag);
  return Math.round((af + Number.EPSILON) * ah) / ah;
};
let M = (af, ag, ah = Infinity, aj = null) => {
  if (aj !== null) {
    af = z(af, aj);
  }
  if (af < ag) {
    af = ag;
  } else if (af > ah) {
    af = ah;
  }
  return af;
};
class A extends a3 {
  get type() {
    return "<color>";
  }
  static fromString(af, ag = false) {
    if (ag) {
      return new A(af);
    }
    {
      let ah = null;
      try {
        ah = new A(af);
      } catch (aj) {}
      return ah;
    }
  }
}
class B {
  currentToken = null;
  position = 0;
  #e;
  constructor(af) {
    this.#e = af;
  }
  read() {
    let af = this.#e[this.position];
    this.currentToken = af;
    if (af.tokenType !== "EOF") {
      this.position += 1;
    }
    return af;
  }
  reset(af) {
    this.position = af;
  }
}
class R {
  get value() {
    return this.#t;
  }
  set value(af) {
    this.#t = af;
  }
  get origin() {
    return new URL(this.#t).origin;
  }
  get type() {
    return "<url>";
  }
  #t;
  constructor(af = "") {
    this.#t = af;
  }
  static fromString(af, ag = false) {
    let ah = [...a4.tokenize(af), new a4.EOFToken()];
    let aj = new B(ah);
    aj.read();
    if (aj.currentToken.tokenType === "WHITESPACE") {
      aj.read();
    }
    if (aj.currentToken.tokenType === "URL") {
      let ak = aj.currentToken.value;
      aj.read();
      if (aj.currentToken.tokenType === "WHITESPACE") {
        aj.read();
      }
      if (aj.currentToken.tokenType === "EOF") {
        return new R(ak);
      }
      if (ag) {
        throw new DOMException("Expected EOF token.", "SyntaxError");
      }
      return null;
    }
    if (
      aj.currentToken.tokenType === "FUNCTION" &&
      aj.currentToken.value === "url"
    ) {
      aj.read();
      if (aj.currentToken.tokenType === "WHITESPACE") {
        aj.read();
      }
      if (aj.currentToken.tokenType === "STRING") {
        let al = aj.currentToken.value;
        aj.read();
        if (aj.currentToken.tokenType === "WHITESPACE") {
          aj.read();
        }
        if (aj.currentToken.tokenType === ")") {
          aj.read();
          if (aj.currentToken.tokenType === "WHITESPACE") {
            aj.read();
          }
          if (aj.currentToken.tokenType === "EOF") {
            return new R(al.trim());
          }
          if (ag) {
            throw new DOMException("Expected EOF token.", "SyntaxError");
          }
          return null;
        }
        if (ag) {
          throw new DOMException('Expected ")" token.', "SyntaxError");
        }
        return null;
      }
      if (ag) {
        throw new DOMException("Expected STRING token.", "SyntaxError");
      }
      return null;
    }
    if (ag) {
      throw new DOMException("Expected URL or FUNCTION token.", "SyntaxError");
    }
    return null;
  }
  toString() {
    return "url(" + this.value + ")";
  }
}
class I {
  #i;
  get seconds() {
    return this.#i;
  }
  set seconds(af) {
    this.#i = af;
  }
  get type() {
    return "<clock-value>";
  }
  constructor(af = 0) {
    this.#i = af;
  }
  static fromString(af, ag = false) {
    let ah = [...a4.tokenize(af.trim()), new a4.EOFToken()];
    let aj = new B(ah);
    let ak = 0;
    aj.read();
    if (aj.currentToken.tokenType === "DIMENSION") {
      if (aj.currentToken.unit === "ms") {
        ak = aj.currentToken.value * 0.001;
      } else if (aj.currentToken.unit === "s") {
        ak = aj.currentToken.value;
      } else if (aj.currentToken.unit === "min") {
        ak = aj.currentToken.value * 60;
      } else {
        if (aj.currentToken.unit !== "h") {
          if (ag) {
            throw new DOMException(
              "Unexpected " + aj.currentToken.unit + " unit.",
              "SyntaxError"
            );
          }
          return null;
        }
        ak = aj.currentToken.value * 60 * 60;
      }
    } else {
      if (aj.currentToken.tokenType !== "NUMBER") {
        if (ag) {
          throw new DOMException(
            "Unexpected " + aj.currentToken.tokenType + " token.",
            "SyntaxError"
          );
        }
        return null;
      }
      {
        let al = aj.currentToken;
        aj.read();
        if (aj.currentToken.tokenType === "EOF") {
          return new I(al.value);
        }
        {
          let am = [aj.currentToken];
          for (
            aj.currentToken.tokenType === ":" &&
            (aj.read(),
            aj.currentToken.tokenType === "NUMBER" &&
              (am.push(aj.currentToken),
              aj.read(),
              aj.currentToken.tokenType === ":" &&
                (aj.read(),
                aj.currentToken.tokenType === "NUMBER" &&
                  am.push(aj.currentToken))));
            am.length < 3;

          ) {
            let ar = new a4.NumberToken();
            ar.value = 0;
            ar.repr = "00";
            ar.type = "integer";
            am.unshift(ar);
          }
          let [an, ap, aq] = am;
          if (an.type !== "integer" || an.value < 0) {
            throw new DOMException("Invalid hours format.", "SyntaxError");
          }
          ak = an.value * 60 * 60;
          if (
            ap.type !== "integer" ||
            ap.repr.length !== 2 ||
            ap.value < 0 ||
            ap.value > 59
          ) {
            throw new DOMException("Invalid minutes format.", "SyntaxError");
          }
          ak += ap.value * 60;
          if (
            aq.repr.split(".")[0].length !== 2 ||
            aq.value < 0 ||
            aq.value >= 60
          ) {
            throw new DOMException("Invalid seconds format.", "SyntaxError");
          }
          ak += aq.value;
        }
      }
    }
    aj.read();
    if (aj.currentToken.tokenType === "EOF") {
      return new I(ak);
    }
    if (ag) {
      throw new DOMException("Expected EOF token.", "SyntaxError");
    }
    return null;
  }
  toString() {
    return this.#i + "s";
  }
  clone() {
    return new I(this.#i);
  }
  compare(af) {
    return af.type === this.type && af.seconds === this.seconds;
  }
}
class F {
  #s;
  #a;
  #i;
  get id() {
    return this.#s;
  }
  set id(af) {
    this.#s = af;
  }
  get event() {
    return this.#a;
  }
  set event(af) {
    this.#a = af;
  }
  get seconds() {
    return this.#i;
  }
  set seconds(af) {
    this.#i = af;
  }
  get type() {
    return "<event-value>";
  }
  constructor(af = null, ag = "click", ah = 0) {
    this.#s = af;
    this.#a = ag;
    this.#i = ah;
  }
  static fromString(af, ag = false, ah = false) {
    af = af.trim();
    if (ah && af.startsWith("#")) {
      af = af.substring(1);
    }
    let aj = [...a4.tokenize(af), new a4.EOFToken()];
    let ak = new B(aj);
    let al = null;
    let am = null;
    ak.read();
    if (ak.currentToken.tokenType !== "IDENT") {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    am = ak.currentToken.value;
    ak.read();
    if (ak.currentToken.tokenType === "DELIM" && ak.currentToken.value == ".") {
      al = am;
      am = null;
      ak.read();
      if (ak.currentToken.tokenType !== "IDENT") {
        if (ag) {
          throw new DOMException(
            "Unexpected " + ak.currentToken.tokenType + " token.",
            "SyntaxError"
          );
        }
        return null;
      }
      am = ak.currentToken.value;
      ak.read();
    }
    if (ak.currentToken.tokenType === "WHITESPACE") {
      ak.read();
    }
    if (ak.currentToken.tokenType === "EOF") {
      return new F(al, am, 0);
    }
    if (
      ak.currentToken.tokenType !== "DELIM" ||
      !["+", "-"].includes(ak.currentToken.value)
    ) {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    {
      let an = ak.currentToken.value === "-";
      let ap = I.fromString(af.split(ak.currentToken.value)[1], ag);
      if (ap !== null) {
        return new F(al, am, an ? -ap.seconds : ap.seconds);
      }
    }
  }
  toString(af = false) {
    let ag = "";
    if (this.id) {
      if (af) {
        ag += "#";
      }
      ag += this.id + ".";
    }
    ag += this.event;
    if (this.#i !== 0) {
      let ah = Math.abs(this.#i);
      if (this.#i < 0) {
        ag += " - " + ah + "s";
      } else {
        ag += " + " + ah + "s";
      }
    }
    return ag;
  }
  clone() {
    return new F(this.#s, this.#a, this.#i);
  }
  compare(af) {
    return (
      af.type === this.type &&
      af.id === this.id &&
      af.event === this.event &&
      af.seconds === this.seconds
    );
  }
}
class N {
  #i;
  get seconds() {
    return this.#i;
  }
  set seconds(af) {
    this.#i = af;
  }
  get type() {
    return "<offset-value>";
  }
  constructor(af = 0) {
    this.#i = af;
  }
  static fromString(af, ag = false) {
    let ah = false;
    if ((af = af.trim())[0] === "-") {
      ah = true;
      af = af.substring(1);
    } else if (af[0] === "+") {
      af = af.substring(1);
    }
    let aj = I.fromString(af, ag);
    if (aj === null) {
      return null;
    } else {
      return new N(ah ? -aj.seconds : aj.seconds);
    }
  }
  toString() {
    return this.#i + "s";
  }
  clone() {
    return new N(this.#i);
  }
  compare(af) {
    return af.type === this.type && af.seconds === this.seconds;
  }
}
class O {
  #s;
  #o;
  #i;
  get id() {
    return this.#s;
  }
  set id(af) {
    this.#s = af;
  }
  get repeat() {
    return this.#o;
  }
  set repeat(af) {
    this.#o = af;
  }
  get seconds() {
    return this.#i;
  }
  set seconds(af) {
    this.#i = af;
  }
  get type() {
    return "<repeat-value>";
  }
  constructor(af = null, ag = 1, ah = 0) {
    this.#s = af;
    this.#o = ag;
    this.#i = ah;
  }
  static fromString(af, ag = false, ah = false) {
    af = af.trim();
    if (ah && af.startsWith("#")) {
      af = af.substring(1);
    }
    let aj = [...a4.tokenize(af), new a4.EOFToken()];
    let ak = new B(aj);
    let al = null;
    let am = null;
    ak.read();
    if (ak.currentToken.tokenType === "IDENT") {
      al = ak.currentToken.value;
      ak.read();
      if (
        ak.currentToken.tokenType !== "DELIM" ||
        ak.currentToken.value != "."
      ) {
        if (ag) {
          throw new DOMException(
            "Unexpected " + ak.currentToken.tokenType + " token.",
            "SyntaxError"
          );
        }
        return null;
      }
      ak.read();
    }
    if (
      ak.currentToken.tokenType !== "FUNCTION" ||
      ak.currentToken.value !== "repeat"
    ) {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    ak.read();
    if (
      ak.currentToken.tokenType !== "NUMBER" ||
      ak.currentToken.type !== "integer"
    ) {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    am = ak.currentToken.value;
    ak.read();
    if (ak.currentToken.tokenType === ")") {
      ak.read();
    }
    if (ak.currentToken.tokenType === "WHITESPACE") {
      ak.read();
    }
    if (ak.currentToken.tokenType === "EOF") {
      return new O(al, am, 0);
    }
    if (
      ak.currentToken.tokenType !== "DELIM" ||
      !["+", "-"].includes(ak.currentToken.value)
    ) {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    {
      let an = ak.currentToken.value === "-";
      let ap = I.fromString(af.split(ak.currentToken.value)[1], ag);
      if (ap !== null) {
        return new O(al, am, an ? -ap.seconds : ap.seconds);
      }
    }
  }
  toString(af = false) {
    let ag = "";
    if (this.id) {
      if (af) {
        ag += "#";
      }
      ag += this.id + ".";
    }
    ag += "repeat(" + this.repeat + ")";
    if (this.#i !== 0) {
      let ah = Math.abs(this.#i);
      if (this.#i < 0) {
        ag += " - " + ah + "s";
      } else {
        ag += " + " + ah + "s";
      }
    }
    return ag;
  }
  clone() {
    return new O(this.#s, this.#o, this.#i);
  }
  compare(af) {
    return (
      af.type === this.type &&
      af.id === this.id &&
      af.repeat === this.repeat &&
      af.seconds === this.seconds
    );
  }
}
class _ {
  #s;
  #n;
  #i;
  get id() {
    return this.#s;
  }
  set id(af) {
    this.#s = af;
  }
  get position() {
    return this.#n;
  }
  set position(af) {
    this.#n = af;
  }
  get seconds() {
    return this.#i;
  }
  set seconds(af) {
    this.#i = af;
  }
  get type() {
    return "<syncbase-value>";
  }
  constructor(af, ag = "end", ah = 0) {
    this.#s = af;
    this.#n = ag;
    this.#i = ah;
  }
  static fromString(af, ag = false, ah = false) {
    af = af.trim().replaceAll("-", " - ").replaceAll("+", " + ");
    if (ah && af.startsWith("#")) {
      af = af.substring(1);
    }
    let aj = [...a4.tokenize(af), new a4.EOFToken()];
    let ak = new B(aj);
    let al = null;
    let am = null;
    ak.read();
    if (ak.currentToken.tokenType !== "IDENT") {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    al = ak.currentToken.value;
    ak.read();
    if (
      ak.currentToken.tokenType !== "DELIM" ||
      ak.currentToken.value !== "."
    ) {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    ak.read();
    if (
      ak.currentToken.tokenType !== "IDENT" ||
      !["begin", "end"].includes(ak.currentToken.value)
    ) {
      if (ag) {
        throw new DOMException(
          "Unexpected " + ak.currentToken.tokenType + " token.",
          "SyntaxError"
        );
      }
      return null;
    }
    am = ak.currentToken.value;
    ak.read();
    if (ak.currentToken.tokenType === "WHITESPACE") {
      ak.read();
    }
    if (ak.currentToken.tokenType === "EOF") {
      return new _(al, am, 0);
    }
    if (ak.currentToken.tokenType === "DIMENSION") {
      ak.currentToken.value;
    } else {
      if (
        ak.currentToken.tokenType !== "DELIM" ||
        !["+", "-"].includes(ak.currentToken.value)
      ) {
        if (ag) {
          throw new DOMException(
            "Unexpected " + ak.currentToken.tokenType + " token.",
            "SyntaxError"
          );
        }
        return null;
      }
      {
        let an = ak.currentToken.value === "-";
        let ap = I.fromString(af.split(ak.currentToken.value)[1], ag);
        if (ap !== null) {
          return new _(al, am, an ? -ap.seconds : ap.seconds);
        }
      }
    }
  }
  toString(af = false) {
    let ag = "";
    if (af) {
      ag += "#";
    }
    ag += this.id + "." + this.position;
    if (this.#i !== 0) {
      let ah = Math.abs(this.#i);
      if (this.#i < 0) {
        ag += " - " + ah + "s";
      } else {
        ag += " + " + ah + "s";
      }
    }
    return ag;
  }
  clone() {
    return new _(this.#s, this.#n, this.#i);
  }
  compare(af) {
    return (
      af.type === this.type &&
      af.id === this.id &&
      af.position === this.position &&
      af.seconds === this.seconds
    );
  }
}
let q = (af, ag, ah = false) => {
  if (af.length !== ag.length) {
    return false;
  }
  if (ah) {
    for (let aj in af) {
      if (af[aj] !== ag[aj]) {
        return false;
      }
    }
  } else {
    for (let ak = 0; ak < af.length; ak += 1) {
      if (!ag.includes(af[ak])) {
        return false;
      }
    }
    for (let al = 0; al < ag.length; al += 1) {
      if (!af.includes(ag[al])) {
        return false;
      }
    }
  }
  return true;
};
let j = (af, ag, ...ah) => [...af.slice(0, ag), ...ah, ...af.slice(ag)];
let V = (af) => [...new Set(af)];
let G = (af, ag) => {
  if (af.length === 0) {
    return false;
  }
  for (let ah = 0; ah < af.length; ah += 1) {
    if (af[ah] !== ag) {
      return false;
    }
  }
  return true;
};
let { isFinite, isNaN, parseFloat } = Number;
let Z = (af) => !Array.isArray(af) && af - parseFloat(af) + 1 >= 0;
let Y = "AIzaSyBZd8UahlnRn53EWC7snRmOAuuktqBaP6k";
let X = "92f3tewguhsn8o0qp.a1.typesense.net";
const J = [
  "serif",
  "sans-serif",
  "cursive",
  "fantasy",
  "monospace",
  "system-ui",
  "emoji",
  "math",
  "fangsong",
];
const Q = {
  arabic:
    "U+600-6FF, U+200C-200E, U+2010-2011, U+204F, U+2E41, U+FB50-FDFF, U+FE80-FEFC",
  bengali: "U+964-965, U+981-9FB, U+200C-200D, U+20B9, U+25CC",
  cyrillic: "U+400-45F, U+490-491, U+4B0-4B1, U+2116",
  "cyrillic-ext":
    "U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
  devanagari:
    "U+900-97F, U+1CD0-1CF6, U+1CF8-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FB",
  greek: "U+370-3FF",
  "greek-ext": "U+1F00-1FFF",
  gujarati: "U+964-965, U+A80-AFF, U+200C-200D, U+20B9, U+25CC, U+A830-A839",
  gurmukhi:
    "U+964-965, U+A01-A75, U+200C-200D, U+20B9, U+25CC, U+262C, U+A830-A839",
  hebrew: "U+590-5FF, U+20AA, U+25CC, U+FB1D-FB4F",
  kannada: "U+964-965, U+C82-CF2, U+200C-200D, U+20B9, U+25CC",
  khmer: "U+1780-17FF, U+200C, U+25CC",
  latin:
    "U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
  "latin-ext":
    "U+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
  malayalam: "U+307, U+323, U+964-965, U+D02-D7F, U+200C-200D, U+20B9, U+25CC",
  myanmar: "U+1000-109F, U+200C-200D, U+25CC",
  oriya: "U+964-965, U+B01-B77, U+200C-200D, U+20B9, U+25CC",
  sinhala: "U+964-965, U+D82-DF4, U+200C-200D, U+25CC",
  tamil: "U+964-965, U+B82-BFA, U+200C-200D, U+20B9, U+25CC",
  thai: "U+E01-E5B, U+200C-200D, U+25CC",
  telugu: "U+951-952, U+964-965, U+C00-C7F, U+1CDA, U+200C-200D, U+25CC",
  tibetan: "U+F00-FFF, U+200C-200D, U+25CC",
  vietnamese:
    "U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB",
};
const ee = {
  macos: [
    "Arial",
    "Helvetica",
    "PingFang SC",
    "Menlo",
    "Monaco",
    "Apple Symbols",
    "Lucida Grande",
    "Courier New",
    "Geeza Pro",
    "Noto Nastaliq Urdu",
    "Ayuthaya",
    "Kailasa",
    "PingFang TC",
    "Hiragino Sans",
    "Hiragino Sans GB",
    "PingFang HK",
    "Apple SD Gothic Neo",
    "Kohinoor Bangla",
    "Kohinoor Devanagari",
    "Kohinoor Gujarati",
    "Mukta Mahee",
    "Noto Sans Kannada",
    "Khmer Sangam MN",
    "Lao Sangam MN",
    "Malayalam Sangam MN",
    "Noto Sans Myanmar",
    "Noto Sans Zawgyi",
    "Noto Sans Oriya",
    "Sinhala Sangam MN",
    "Tamil Sangam MN",
    "Kohinoor Telugu",
    "Noto Sans Armenian",
    "Euphemia UCAS",
    "STIX General",
    "Galvji",
    "Kefa",
    "Apple Color Emoji",
  ],
  windows: [
    "Arial",
    "Tahoma",
    "Segoe UI",
    "Segoe UI Historic",
    "Segoe UI Symbol",
    "Segoe UI Emoji",
    "Cambria Math",
    "Abyssinica SIL",
    "DaunPehn",
    "David",
    "DokChampa",
    "Ebrima",
    "Estrangelo Edessa",
    "Ethiopia Jiret",
    "Gadugi",
    "GF Zemen Unicode",
    "Gulim",
    "Han Nom A",
    "Javanese Text",
    "Lao UI",
    "Leelawadee UI",
    "Kartika",
    "Khmer UI",
    "Malgun Gothic",
    "Mangal",
    "Meiryo",
    "Microsoft New Tai Lue",
    "Microsoft YaHei",
    "Mongolian Baiti",
    "MoolBoran",
    "MS PGothic",
    "Myanmar Text",
    "Nirmala UI",
    "Nuosu SIL",
    "Nyala",
    "Phetsarath OT",
    "Plantagenet",
    "PMingLiU",
    "Raavi",
    "Saysettha OT",
    "Shruti",
    "Simsun",
    "Sylfaen",
    "Tunga",
    "Visual Geez Unicode",
    "Vrinda",
    "WenQuanYi Zen Hei",
    "Yu Gothic",
    "Arial Unicode MS",
    "Code2000",
  ],
  linux: [
    "Noto Sans",
    "Noto Sans Arabic",
    "Noto Sans Armenian",
    "Noto Sans Ethiopic",
    "Noto Sans Georgian",
    "Noto Sans Gurmukhi",
    "Noto Sans Hebrew",
    "Noto Sans Lao",
    "Noto Sans Math",
    "Droid Sans",
    "Droid Arabic Kufi",
    "Droid Sans Armenian",
    "Droid Sans Devanagari",
    "Droid Sans Ethiopic",
    "Droid Sans Georgian",
    "Droid Sans Hebrew",
    "Droid Sans Japanese",
    "Droid Sans Tamil",
    "Droid Sans Thai",
    "Droid Sans Fallback",
    "Lohit Assamese",
    "Lohit Bengali",
    "Lohit Devanagari",
    "Lohit Gujarati",
    "Lohit Kannada",
    "Lohit Marathi",
    "Lohit Odia",
    "Lohit Tamil",
    "Lohit Telugu",
    "STIX",
    "STIX Two Math",
    "Symbola",
  ],
};
let te = document.createElement("template");
let ie = (af, ...ag) => {
  let ah = [];
  for (let al = 0; al < af.length; al += 1) {
    ah.push(af[al]);
    if (ag[al] !== undefined) {
      ah.push(ag[al]);
    }
  }
  let aj = ah.join("");
  te.innerHTML = aj;
  let ak = document.importNode(te.content, true);
  if (ak.children.length === 1) {
    return ak.firstElementChild;
  } else {
    return ak;
  }
};
let se = (af, ...ag) => {
  let ah = [];
  for (let al = 0; al < af.length; al += 1) {
    ah.push(af[al]);
    if (ag[al] !== undefined) {
      ah.push(ag[al]);
    }
  }
  let aj = ah.join("");
  let ak = new CSSStyleSheet();
  ak.replaceSync(aj);
  return ak;
};
var ae = new (class {
  #l;
  #r = null;
  #h = {};
  constructor() {
    this.#l = new a7("GoogleFontsManager");
    this.#l.version(1).stores({
      cache: "family",
    });
  }
  search(af = "", ag = "alphabetical", ah = "all", aj = "all", ak = "all") {
    return new Promise(async (al) => {
      await this.#c();
      let am = [];
      let an = this.#l.cache;
      if (af.trim() !== "") {
        an = an.filter((ap) =>
          ap.family.toLowerCase().includes(af.trim().toLowerCase())
        );
      }
      if (ah !== "all") {
        an = an.filter((ap) => ap.category === ah);
      }
      if (aj !== "all") {
        an = an.filter((ap) => ap.subsets.includes(aj));
      }
      am = await an.toArray();
      if (ag === "date") {
        am = am.sort((ap, aq) => (ap.dateRank > aq.dateRank ? -1 : 1));
      } else if (ag === "popularity") {
        am = am.sort((ap, aq) =>
          ap.popularityRank > aq.popularityRank ? -1 : 1
        );
      } else if (ag === "trending") {
        am = am.sort((ap, aq) => (ap.trendingRank > aq.trendingRank ? -1 : 1));
      }
      if (ak !== "all") {
        am = am.slice(ak * 40, (ak + 1) * 40);
      }
      al(am);
    });
  }
  refresh() {
    return new Promise(async (af, ag) => {
      let ah;
      if (this.#r === null) {
        this.#r = new a8.Client({
          apiKey: "ML0qIC62dFtk9Oro0x9Ps3IbO6Tgv5jL",
          connectionTimeoutSeconds: 5,
          nodes: [
            {
              host: X,
              port: "443",
              protocol: "https",
            },
          ],
        });
      }
      try {
        ah = await this.#r.collections("googleFonts").documents().export();
      } catch (ak) {
        return ag(ak);
      }
      let aj = ah
        .split("\n")
        .map((al) => JSON.parse(al))
        .map((al) => ({
          family: al.family,
          faces: al.faces,
          category: al.category,
          subsets: al.subsets,
          license: al.license,
          thumbnail: al.thumbnail,
          urls: al.urls,
          dateRank: al.dateRank,
          popularityRank: al.popularityRank,
          trendingRank: al.trendingRank,
          pageURL: "https://fonts.google.com/specimen/" + al.id,
          cachedTime: Date.now(),
        }));
      await this.#l.cache.clear();
      await this.#l.cache.bulkPut(aj);
      af();
    });
  }
  getFontFaceRulesFromUrl(af, ag = false) {
    return new Promise(async (ah) => {
      let aj = [];
      await this.#c();
      if (ag) {
        let ak = await this.#d(af);
        for (let al of ak.cssRules) {
          if (al.type === CSSRule.FONT_FACE_RULE) {
            aj.push(al);
          }
        }
      } else {
        let am = [];
        let an = new URL(af);
        let ap = an.searchParams.get("display") || "auto";
        if (af.startsWith("https://fonts.googleapis.com/css?")) {
          let aq = an.searchParams.get("family");
          aq.split("|");
          an.searchParams.get("subset");
          let ar = {
            regular: "400",
            bold: "700",
            italic: "400italic",
            bolditalic: "700italic",
            r: "400",
            b: "700",
            i: "400italic",
          };
          for (let au of aq.split("|")) {
            let av = [];
            let [aw, ax] = au.split(":");
            for (let ay of ax.split(",")) {
              ay = ar[ay] || ay;
              av.push(ay);
            }
            am.push({
              family: aw,
              faceNames: av,
            });
          }
        } else if (af.startsWith("https://fonts.googleapis.com/css2?")) {
          let az = an.searchParams.getAll("family");
          for (let aA of az) {
            let [aB, aC] = aA.split(":");
            if (aC === undefined) {
              am.push({
                family: aB,
                faceNames: ["400"],
              });
            } else {
              let aD = [];
              let [aE, aF] = aC.split("@");
              let aG = aE.split(",");
              let aH = aF.split(";");
              for (let aI of aH) {
                let aJ = {
                  wght: "400",
                  ital: "0",
                };
                for (let aK = 0; aK < aG.length; aK += 1) {
                  aJ[aG[aK]] = aI.split(",")[aK];
                }
                aD.push(aJ.wght + (aJ.ital === "1" ? "italic" : ""));
              }
              am.push({
                family: aB,
                faceNames: aD,
              });
            }
          }
        }
        {
          let aL = this.#l.cache;
          for (let { family, faceNames } of am) {
            let aO = await aL.get({
              family: family,
            });
            if (aO) {
              for (let aP of faceNames) {
                let aQ = aO.urls[aP];
                if (aQ) {
                  let aR = aP.substring(0, 3);
                  let aS = aP.includes("italic") ? "italic" : "normal";
                  let aT = [];
                  for (let aW of aO.subsets) {
                    if (Q[aW]) {
                      aT.push(Q[aW]);
                    }
                  }
                  if (aT.length === 0) {
                    aT = "U+0-10FFFF";
                  }
                  let aU = aT.join(",");
                  let aV = se`
                    @font-face {
                      font-family: "${family}";
                      font-style: ${aS};
                      font-weight: ${aR};
                      font-display: ${ap};
                      font-unicode-range: ${aU};
                      src: url(${aQ});
                    }
                  `;
                  aj.push(aV.cssRules[0]);
                }
              }
            }
          }
        }
      }
      ah(aj);
    });
  }
  getFamilyDescriptor(af) {
    return new Promise(async (ag) => {
      await this.#c();
      ag((await this.#l.cache.where("family").equals(af).toArray())[0] || null);
    });
  }
  #d(af) {
    return new Promise(async (ag) => {
      let ah = null;
      if (this.#h[af]) {
        ah = this.#h[af];
      } else {
        let aj = await fetch(af);
        let ak = await aj.text();
        ah = new CSSStyleSheet();
        ah.replaceSync(ak);
        this.#h[af] = ah;
      }
      ag(ah);
    });
  }
  #c() {
    return new Promise(async (af) => {
      let ag = await this.#l.cache.count();
      let ah = true;
      if (ag > 0) {
        let aj = await this.#l.cache.get("Roboto");
        if (aj) {
          let ak = 1296000000;
          ah = Date.now() - aj.cachedTime > ak;
        }
      }
      if (ag === 0 || ah === true) {
        await this.refresh();
      }
      af();
    });
  }
})();
class oe {
  get items() {
    return this.#u;
  }
  set items(af) {
    this.#u = [...af];
  }
  get type() {
    return "<font-face-src>";
  }
  #u;
  constructor(af = []) {
    this.#u = [...af];
  }
  static fromString(af, ag = false) {
    let ah = a4.parseACommaSeparatedListOfComponentValues(af);
    let aj = [];
    for (let ak of ah) {
      let al = [...ak, new a4.EOFToken()].filter(
        (ap) => ap.tokenType !== "WHITESPACE"
      );
      let am = new B(al);
      let an = {};
      am.read();
      if (am.currentToken.type === "FUNCTION") {
        if (am.currentToken.name === "local") {
          let ap = "";
          for (let aq of am.currentToken.value) {
            if (aq.tokenType === "STRING") {
              ap += aq.value;
            } else {
              ap += aq.toSource();
            }
          }
          an.type = "local";
          an.name = ap;
        } else if (am.currentToken.name === "url") {
          let ar = "";
          for (let au of am.currentToken.value) {
            if (au.tokenType === "STRING") {
              ar += au.value;
            } else {
              ar += au.toSource();
            }
          }
          ar.trim();
          if (ar.startsWith("data:")) {
            an.type = "embedded";
          } else {
            an.type = "external";
          }
          an.url = new R(ar);
          am.read();
          if (
            am.currentToken.type == "FUNCTION" &&
            am.currentToken.name === "format"
          ) {
            an.format = am.currentToken.value[0].value;
          }
        }
      } else if (am.currentToken.tokenType === "URL") {
        let av = am.currentToken.value;
        if (av.startsWith("data:")) {
          an.type = "embedded";
        } else {
          an.type = "external";
        }
        an.url = new R(av);
        am.read();
        if (
          am.currentToken.type == "FUNCTION" &&
          am.currentToken.name === "format"
        ) {
          an.format = am.currentToken.value[0].value;
        }
      }
      aj.push(an);
    }
    return new oe(aj);
  }
  toString() {
    let af = [];
    for (let ag of this.items) {
      if (ag.type === "local") {
        let ah = "local(" + ag.name + ")";
        af.push(ah);
      } else if (ag.type === "external" || ag.type === "embedded") {
        let aj = "url(" + ag.url + ")";
        if (ag.format) {
          aj += ' format("' + ag.format + '")';
        }
        af.push(aj);
      }
    }
    return af.join(", ");
  }
}
class ne {
  get items() {
    return this.#u;
  }
  set items(af) {
    this.#u = [...af];
  }
  get type() {
    return "<font-family>";
  }
  #u;
  constructor(af = []) {
    this.#u = [...af];
  }
  static fromString(af, ag = false) {
    let ah = [...a4.tokenize(af), new a4.EOFToken()];
    let aj = new B(ah);
    let ak = [];
    aj.read();
    if (aj.currentToken.tokenType === "WHITESPACE") {
      aj.read();
    }
    if (
      aj.currentToken.tokenType !== "STRING" &&
      aj.currentToken.tokenType !== "IDENT"
    ) {
      if (ag) {
        throw new DOMException(
          "Expected STRING or IDENT token.",
          "SyntaxError"
        );
      }
      return null;
    }
    for (ak.push(aj.currentToken.value); ; ) {
      let al = false;
      aj.read();
      if (aj.currentToken.tokenType === "WHITESPACE") {
        aj.read();
      }
      if (aj.currentToken.tokenType === ",") {
        al = true;
        aj.read();
      }
      if (aj.currentToken.tokenType === "WHITESPACE") {
        aj.read();
      }
      if (
        aj.currentToken.tokenType !== "STRING" &&
        aj.currentToken.tokenType !== "IDENT"
      ) {
        if (aj.currentToken.tokenType === "EOF") {
          if (al) {
            if (ag) {
              throw new DOMException(
                "Unexpected trailing comma.",
                "SyntaxError"
              );
            }
            return null;
          }
          return new ne(ak);
        }
        if (ag) {
          throw new DOMException(
            'Unexpected token "' + aj.currentToken.tokenType + '".',
            "SyntaxError"
          );
        }
        return null;
      }
      if (!al) {
        if (ag) {
          throw new DOMException(
            "Unexpected STRING or IDENT token.",
            "SyntaxError"
          );
        }
        return null;
      }
      ak.push(aj.currentToken.value);
    }
  }
  toString() {
    return this.items
      .map((af) => (J.includes(af) ? af : '"' + af + '"'))
      .join(", ");
  }
}
const le =
  ["iPhone", "iPad"].includes(navigator.platform) ||
  navigator.platform.startsWith("Mac");
const re =
  navigator.userAgent.indexOf("Safari/") > -1 &&
  navigator.userAgent.indexOf("Chrome") === -1;
const he = location.protocol === "file:";
const ce =
  window.frameElement !== null || document.body.dataset.app === "embedded-web";
let de = (af, ag = "string") => {
  try {
    let ah = null;
    let aj = a9.inflate(af);
    if (ag === "string") {
      ah = "";
      for (let ak = 0, al = aj.length; ak < al; ak += 1) {
        ah += String.fromCharCode(aj[ak]);
      }
    } else if (ag === "blob") {
      ah = new Blob([aj], {
        type: "image/svg+xml",
      });
    }
    return ah;
  } catch (am) {
    return null;
  }
};
let ue = (af, ag = "text") =>
  new Promise((ah) => {
    af.file(async (aj) => {
      let ak;
      ak = ag === "blob" ? aj : await pe(aj, ag);
      ah(ak);
    });
  });
let pe = (af, ag) =>
  new Promise((ah) => {
    let aj;
    let ak;
    let al = new FileReader();
    al.addEventListener(
      "error",
      (ak = (am) => {
        al.removeEventListener("load", aj);
        al.removeEventListener("error", ak);
        ah(null);
      })
    );
    if (ag === "text") {
      let am = ge(af);
      if (am === "svgz") {
        al.readAsArrayBuffer(af);
      } else {
        al.readAsText(af);
      }
      al.addEventListener(
        "load",
        (aj = (an) => {
          al.removeEventListener("load", aj);
          al.removeEventListener("error", ak);
          if (am === "svgz") {
            let ap = new Uint8Array(an.target.result);
            let aq = a9.inflate(ap);
            let ar = "";
            for (let au = 0, av = aq.length; au < av; au += 1) {
              ar += String.fromCharCode(aq[au]);
            }
            ah(ar);
          } else {
            ah(an.target.result);
          }
        })
      );
    } else if (ag === "arrayBuffer") {
      al.readAsArrayBuffer(af);
      al.addEventListener(
        "load",
        (aj = (an) => {
          al.removeEventListener("load", aj);
          al.removeEventListener("error", ak);
          ah(new Uint8Array(an.target.result));
        })
      );
    } else if (ag === "dataURL") {
      let an = ge(af);
      if (an === "svgz") {
        al.readAsArrayBuffer(af);
      } else {
        al.readAsDataURL(af);
      }
      al.addEventListener(
        "load",
        (aj = (ap) => {
          al.removeEventListener("load", aj);
          al.removeEventListener("error", ak);
          if (an === "svgz") {
            let aq = new Uint8Array(ap.target.result);
            let ar = a9.inflate(aq);
            let au = new Blob([ar], {
              type: "image/svg+xml",
            });
            let av = me(au);
            ah(av);
          } else {
            ah(ap.target.result);
          }
        })
      );
    }
  });
let me = (af) =>
  new Promise((ag) => {
    let ah = new FileReader();
    ah.readAsDataURL(af);
    ah.onloadend = () => {
      let aj = ah.result;
      ag(aj);
    };
  });
let xe = (af) =>
  af.name && af.name.includes(".")
    ? af.name.substring(af.name.lastIndexOf(".") + 1).toLowerCase()
    : "";
let ge = (af) =>
  af.name && af.name.includes(".")
    ? af.name.substring(af.name.lastIndexOf(".") + 1).toLowerCase()
    : "";
let be = (af) => af.name.substring(0, af.name.lastIndexOf("."));
let fe = (af) => {
  let ag = "";
  let ah = le ? 1000 : 1024;
  if (af < ah) {
    ag =
      af +
      (' <x-message href="#file-size-bytes-suffix" args="count: ' +
        af +
        '"></x-message>');
  } else if (af < ah * ah) {
    let aj = le ? " KB" : " KiB";
    ag = z(af / ah, 0) + aj;
  } else if (af < ah * ah * ah) {
    let ak = le ? " MB" : " MiB";
    ag = z(af / (ah * ah), 2) + ak;
  } else {
    let al = le ? " GB" : " GiB";
    ag = z(af / (ah * ah * ah), 2) + al;
  }
  return ag;
};
let we = (af) => {
  let ag = null;
  if (af === "image/jpeg") {
    ag = "jpeg";
  } else if (af === "image/png") {
    ag = "png";
  } else if (af === "image/gif") {
    ag = "gif";
  } else if (af === "image/webp") {
    ag = "webp";
  } else if (af === "image/avif") {
    ag = "avif";
  } else if (af === "image/svg+xml") {
    ag = "svg";
  }
  return ag;
};
let ve = (af) =>
  new Promise((ag) => {
    let ah = {};
    ah.baseName = af.name.substring(0, af.name.lastIndexOf("."));
    ah.extension = af.name
      .substring(af.name.lastIndexOf(".") + 1)
      .toLowerCase();
    ah.path = af.path;
    ah.data = "";
    if (ah.extension === "svg") {
      let aj = new FileReader();
      aj.readAsText(af, "UTF-8");
      aj.addEventListener("load", (ak) => {
        ah.data = ak.target.result;
        if (ah.data) {
          ag(ah);
        } else {
          ag(null);
        }
      });
    } else if (ah.extension === "svgz") {
      let ak = new FileReader();
      ak.readAsArrayBuffer(af);
      ak.addEventListener("load", (al) => {
        let am = new Uint8Array(al.target.result);
        let an = de(am);
        ah.data = an;
        if (ah.data) {
          ag(ah);
        } else {
          ag(null);
        }
      });
    } else if (ah.extension === "pdf" || ah.extension === "ai") {
      let al = new FileReader();
      al.readAsArrayBuffer(af);
      al.addEventListener("load", (am) => {
        ah.data = new Uint8Array(am.target.result);
        if (ah.data) {
          ag(ah);
        } else {
          ag(null);
        }
      });
    } else if (
      ["png", "jpg", "jpeg", "gif", "webp", "avif"].includes(ah.extension)
    ) {
      let am = new FileReader();
      am.readAsDataURL(af);
      am.addEventListener("load", (an) => {
        ah.data = an.target.result;
        if (ah.data) {
          ag(ah);
        } else {
          ag(null);
        }
      });
    } else {
      ag(null);
    }
  });
let ye = (af, ag, ah) => af.split(ag).join(ah);
let ke = (af) =>
  af.replace(/(^|[\s-])(\w)/g, (ag, ah, aj) => ah + aj.toUpperCase());
let Ce = (af) => {
  let ag = document.createElement("div");
  ag.appendChild(document.createTextNode(af));
  return ag.innerHTML;
};
let Se = (af) => {
  let ag = document.createElement("div");
  ag.innerHTML = af;
  if (ag.childNodes.length === 0) {
    return "";
  } else {
    return ag.childNodes[0].nodeValue;
  }
};
let Te = (af, ag = false) => {
  let ah = {
    RETURN_DOM: ag,
    ALLOWED_TAGS: [
      "p",
      "h3",
      "h4",
      "ul",
      "ol",
      "li",
      "blockquote",
      "pre",
      "code",
      "img",
      "hr",
      "br",
      "a",
      "strong",
      "em",
      "del",
      "u",
      "code",
      "mark",
      "#text",
    ],
    ALLOWED_ATTR: [
      "alt",
      "data-language",
      "height",
      "hidden",
      "href",
      "loading",
      "rel",
      "spellcheck",
      "start",
      "src",
      "style",
      "title",
      "translate",
      "width",
    ],
    ALLOW_DATA_ATTR: false,
  };
  if (ag) {
    let aj = document.createDocumentFragment();
    let ak = a6.sanitize(af, ah);
    for (let al of [...ak.childNodes]) {
      aj.append(al);
    }
    return aj;
  }
  return a6.sanitize(af, ah);
};
let $e = (af) => {
  let ag =
    "àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;";
  let ah = new RegExp(ag.split("").join("|"), "g");
  return af
    .toString()
    .toLowerCase()
    .replace(/\s+/g, "-")
    .replace(ah, (aj) =>
      "aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------".charAt(
        ag.indexOf(aj)
      )
    )
    .replace(/&/g, "-and-")
    .replace(/[^\w\-]+/g, "")
    .replace(/\-\-+/g, "-")
    .replace(/^-+/, "")
    .replace(/-+$/, "");
};
let Pe = (af) =>
  ke(
    new Intl.DisplayNames([af], {
      type: "language",
    }).of(af)
  );
let Ee = (af) => {
  let ag = [];
  let ah = false;
  for (let aj of af.querySelectorAll("style")) {
    if (aj.closest("foreignObject") === null) {
      let ak = {};
      let al = [];
      for (let am of aj.sheet.cssRules) {
        if (am.type === CSSRule.FONT_FACE_RULE) {
          let an = ne.fromString(am.style.fontFamily).items[0];
          if (ak[an] === undefined) {
            ak[an] = [];
          }
          ak[an].push(am);
        } else if (am.type === CSSRule.IMPORT_RULE) {
          if (am.href.startsWith("https://fonts.googleapis.com/css2")) {
            let ap = new URL(am.href);
            let aq = new URLSearchParams(ap.search);
            for (let ar of aq.getAll("family")) {
              let [au] = ar.split(":");
              let av = new URLSearchParams(ap.search);
              av.set("family", ar);
              let aw =
                "https://fonts.googleapis.com/css2?" +
                decodeURIComponent(av.toString());
              if (ak[au] === undefined) {
                ak[au] = [];
              }
              ak[au].push({
                cssText: '@import url("' + encodeURI(aw) + '");',
                href: aw,
                type: am.type,
              });
            }
          } else if (am.href.startsWith("https://fonts.googleapis.com/css")) {
            let ax = new URL(am.href);
            let ay = new URLSearchParams(ax.search);
            for (let az of ay.get("family").split("|")) {
              let [aA] = az.split(":");
              let aB = new URLSearchParams(ax.search);
              aB.set("family", az);
              let aC =
                "https://fonts.googleapis.com/css?" +
                decodeURIComponent(aB.toString());
              if (ak[aA] === undefined) {
                ak[aA] = [];
              }
              ak[aA].push({
                cssText: '@import url("' + encodeURI(aC) + '");',
                href: aC,
                type: am.type,
              });
            }
          } else {
            al.push(am);
          }
        } else {
          al.push(am);
        }
      }
      if (Object.keys(ak).length > 0 || aj.hasAttribute("data-bx-fonts")) {
        ag.push({
          styleElement: aj,
          fontRulesByFamily: ak,
          otherRules: al,
        });
      }
    }
  }
  {
    let aD = [];
    for (let aE of ag) {
      let { styleElement, fontRulesByFamily, otherRules } = aE;
      let aI = Object.keys(fontRulesByFamily);
      if (aI.length === 0) {
        if (styleElement.hasAttribute("data-bx-fonts")) {
          ah = true;
          break;
        }
      } else if (aI.length === 1) {
        let aJ = aI[0];
        if (aD.includes(aJ)) {
          ah = true;
          break;
        }
        if (styleElement.getAttribute("data-bx-fonts") !== aJ) {
          ah = true;
          break;
        }
        if (otherRules.length > 0) {
          ah = true;
          break;
        }
      } else if (aI.length > 1) {
        ah = true;
        break;
      }
      aD.push(...aI);
    }
  }
  if (ah === true) {
    for (let aK of ag) {
      for (let [aL, aM] of Object.entries(aK.fontRulesByFamily)) {
        let aN = ag.find((aO) => aO.fontRulesByFamily[aL] !== undefined);
        if (aN !== aK) {
          aN.fontRulesByFamily[aL].push(...aM);
          delete aK.fontRulesByFamily[aL];
        }
      }
    }
    for (let { styleElement, fontRulesByFamily, otherRules } of ag) {
      for (let [aR, aS] of Object.entries(fontRulesByFamily)) {
        let aT = ei("svg:style");
        let aU = "";
        aS.sort((aV) => (aV.type === CSSRule.IMPORT_RULE ? -1 : 1));
        for (let aV of aS) {
          aU += aV.cssText;
        }
        aT.textContent = aU;
        aT.setAttribute("data-bx-fonts", aR);
        if (styleElement.hasAttribute("data-bx-pinned")) {
          aT.setAttribute("data-bx-pinned", "");
        }
        styleElement.before(aT);
      }
      if (otherRules.length === 0) {
        styleElement.remove();
      } else {
        let aW = "";
        for (let aX of otherRules) {
          aW += aX.cssText;
        }
        styleElement.removeAttribute("data-bx-fonts");
        styleElement.removeAttribute("data-bx-pinned");
        styleElement.textContent = aW;
      }
    }
  }
};
let Le = (af) => (af === "normal" ? "400" : af === "bold" ? "700" : af);
let Ue = (af) => {
  af = af.toLowerCase();
  af = ye(af, " ", "");
  af = ye(af, "-", "");
  let ag = "400";
  if ((af = ye(af, "_", "")).includes("thin") || af.includes("hairline")) {
    ag = "100";
  } else if (af.includes("extralight") || af.includes("ultralight")) {
    ag = "200";
  } else if (af.includes("light")) {
    ag = "300";
  } else if (af.includes("medium")) {
    ag = "500";
  } else if (af.includes("semibold") || af.includes("demibold")) {
    ag = "600";
  } else if (af.includes("extrabold") || af.includes("ultrabold")) {
    ag = "800";
  } else if (af.includes("bold")) {
    ag = "700";
  } else if (af.includes("black") || af.includes("heavy")) {
    ag = "900";
  }
  return ag;
};
let De = (af) => {
  af = af.toLowerCase();
  af = ye(af, " ", "");
  af = ye(af, "-", "");
  let ag = "normal";
  if ((af = ye(af, "_", "")).includes("italic")) {
    ag = "italic";
  } else if (af.includes("oblique")) {
    ag = "oblique";
  }
  return ag;
};
let ze = (af, ag, ah = "400", aj = "normal") => {
  let ak = ((an, ap) => {
    let aq = an.filter((ar) => ar.family === ap);
    return aq;
  })(af, ag);
  let al = ((an, ap) => {
    let aq = an.filter((ar) => {
      if (ar instanceof FontFace) {
        if (ap === "normal") {
          return ar.style === "normal";
        }
        if (ap === "italic" || ap === "oblique") {
          return ar.style === "italic" || ar.style === "oblique";
        }
      } else {
        let au = De(ar.style);
        if (ap === "normal") {
          return au === "normal";
        }
        if (ap === "italic" || ap === "oblique") {
          return au.style === "italic" || au.style === "oblique";
        }
      }
    });
    if (aq.length === 0) {
      aq = [...an];
    }
    return aq;
  })(ak, aj);
  let am = ((an, ap) => {
    let aq = [];
    for (let au of an) {
      if (au instanceof FontFace) {
        aq.push(au.weight);
      } else {
        aq.push(Ue(au.style));
      }
    }
    let ar = ((av, aw) => {
      av = parseInt(av);
      let ax;
      let ay = aw.map((aA) => parseInt(aA)).sort();
      let az = [...ay].reverse();
      if (av < 400) {
        ax = az.find((aA) => aA <= av) || ay.find((aA) => aA > av);
      } else if (av >= 400 && av <= 500) {
        ax =
          ay.find((aA) => aA >= av && aA <= 500) ||
          az.find((aA) => aA < av) ||
          ay.find((aA) => aA > av);
      } else if (av > 500) {
        ax = ay.find((aA) => aA >= av) || az.find((aA) => aA < av);
      }
      return "" + ax;
    })(ap, aq);
    if (ar) {
      return an[aq.indexOf(ar)] || null;
    }
    return null;
  })(al, ah);
  return am;
};
let Me = (af) =>
  new Promise(async (ag) => {
    if (Me.t === undefined) {
      Me.t = {};
    }
    let ah = Me.t;
    let aj = null;
    let ak = (await import("../../libs/font-kit/font-kit.js")).default;
    if (af instanceof FontFace) {
      let al = af.family + " " + af.weight + " " + af.style;
      if (ah[al]) {
        aj = ah[al];
      } else {
        let am = await fetch(oe.fromString(af.src).items[0].url.value);
        let an = await am.blob();
        let ap = await an.arrayBuffer();
        aj = ak.create(new Uint8Array(ap));
        ah[al] = aj;
      }
    } else if (af instanceof FontData) {
      if (ah[af.postscriptName]) {
        aj = ah[af.postscriptName];
      } else {
        let aq = await af.blob();
        let ar = await aq.arrayBuffer();
        aj = ak.create(new Uint8Array(ar));
        ah[af.postscriptName] = aj;
      }
    }
    ag(aj);
  });
let Ae = (af) => {
  let ag = [];
  for (let { command, args } of af.path.commands) {
    let ak;
    if (command === "moveTo") {
      ak = "M";
    } else if (command === "lineTo") {
      ak = "L";
    } else if (command === "quadraticCurveTo") {
      ak = "Q";
    } else if (command === "bezierCurveTo") {
      ak = "C";
    } else if (command === "closePath") {
      ak = "Z";
    }
    ag.push({
      type: ak,
      values: [...args],
    });
  }
  return ag;
};
let Be = (af) => {
  let ag = "";
  let ah = af.sheet.cssRules[0];
  for (let aj of af.sheet.cssRules) {
    if (aj !== ah) {
      ag += "\n";
    }
    ag += aj.cssText;
  }
  if (af.textContent !== ag) {
    af.textContent = ag;
  }
};
class Re {
  #p;
  constructor(af) {
    this.#p = af;
  }
  normalize() {
    Ee(this.#p);
  }
  search(af = "", ag = true) {
    return new Promise(async (ah) => {
      let aj = await this.getFontFaces(null, ag);
      let ak = {};
      for (let al of aj) {
        if (
          af === "" ||
          al.family.toLowerCase().includes(af.trim().toLowerCase())
        ) {
          if (ak[al.family] === undefined) {
            ak[al.family] = {
              family: al.family,
              embeddedFaces: [],
              linkedFaces: [],
            };
          }
          if (al.src.includes("data:")) {
            ak[al.family].embeddedFaces.push(al);
          } else {
            ak[al.family].linkedFaces.push(al);
          }
        }
      }
      ah(Object.values(ak));
    });
  }
  #m(af = null) {
    return new Promise(async (ag) => {
      let ah = [];
      for (let aj of this.#p.querySelectorAll("style")) {
        if (aj.closest("foreignObject") === null && aj.sheet !== null) {
          for (let ak of aj.sheet.cssRules) {
            if (ak.type === CSSRule.FONT_FACE_RULE) {
              ah.push(ak);
            } else if (
              ak.type === CSSRule.IMPORT_RULE &&
              ak.href.startsWith("https://fonts.googleapis.com/css")
            ) {
              let al = await ae.getFontFaceRulesFromUrl(ak.href);
              ah.push(...al);
            }
          }
        }
      }
      if (af !== null) {
        ah = ah.filter(
          (am) => af === ne.fromString(am.style.fontFamily).items[0]
        );
      }
      ag(ah);
    });
  }
  getFontFaces(af = null, ag = false) {
    return new Promise(async (ah) => {
      ah((await this.#m(af)).map((aj) => this.#x(aj, ag)));
    });
  }
  getMatchedFontFace(af, ag, ah) {
    return new Promise(async (aj) => {
      let ak = await this.getFontFaces(af);
      aj(ze(ak, af, ag, ah));
    });
  }
  getFontFaceBaseline(af) {
    return new Promise(async (ag) => {
      let ah = 1;
      if (af.src) {
        let aj = oe.fromString(af.src).items[0].url.value;
        let ak = await this.#g(aj, "arrayBuffer");
        let al = (await import("../../libs/font-kit/font-kit.js")).default.create(
          new Uint8Array(ak)
        );
        if (al) {
          let am = al.hhea.ascent;
          let an = al.hhea.descent;
          ah = 1 - Math.abs(an) / (Math.abs(am) + Math.abs(an));
        }
      }
      ag(ah);
    });
  }
  getFontFamilyWeights(af) {
    return new Promise(async (ag) => {
      let ah = await this.#m(af);
      let aj = new Set();
      for (let ak of ah) {
        let al = ak.style.fontWeight ? Le(ak.style.fontWeight) : "400";
        aj.add(al);
      }
      ag([...aj]);
    });
  }
  pinFontFamily(af) {
    return new Promise(async (ag) => {
      this.normalize();
      for (let ah of this.#p.querySelectorAll("style[data-bx-fonts]")) {
        if (ah.getAttribute("data-bx-fonts") === af) {
          ah.setAttribute("data-bx-pinned", "true");
        }
      }
      ag();
    });
  }
  unpinFontFamily(af) {
    return new Promise(async (ag) => {
      this.normalize();
      for (let ah of this.#p.querySelectorAll("style[data-bx-fonts]")) {
        if (ah.getAttribute("data-bx-fonts") === af) {
          ah.removeAttribute("data-bx-pinned");
        }
      }
      ag();
    });
  }
  removeFontFamily(af) {
    return new Promise(async (ag) => {
      this.normalize();
      let ah = this.#p.querySelector('style[data-bx-fonts="' + af + '"]');
      if (ah) {
        ah.remove();
      }
      ag();
    });
  }
  linkFontFamily(af, ag) {
    return new Promise(async (ah) => {
      this.normalize();
      let aj = this.#p.querySelector('style[data-bx-fonts="' + af + '"]');
      if (!aj) {
        aj = ei("svg:style");
        aj.setAttribute("data-bx-fonts", af);
        this.#p.querySelector("defs").append(aj);
      }
      let ak = "@import url(" + ag + ");";
      aj.textContent = ak;
      ah();
    });
  }
  async unlinkFontFamily(af) {
    return new Promise(async (ag) => {
      this.normalize();
      let ah = [...this.#p.querySelectorAll("style[data-bx-fonts]")];
      for (let aj of ah) {
        if (aj.getAttribute("data-bx-fonts") === af) {
          let ak = false;
          let al = [...aj.sheet.cssRules];
          for (let am = 0; am < al.length; am += 1) {
            let an = al[am];
            if (an.type === CSSRule.IMPORT_RULE) {
              if (an.href.startsWith("https://fonts.googleapis.com/css")) {
                let ap = await ae.getFontFaceRulesFromUrl(an.href);
                for (let aq of ap) {
                  if (aq.type === CSSRule.FONT_FACE_RULE) {
                    let ar = oe.fromString(aq.style.src).items[0] || null;
                    if (ar?.type === "external") {
                      let au = await this.#g(ar.url.value, "dataURL");
                      aq.style.src = 'url("' + encodeURI(au) + '")';
                      aj.sheet.insertRule(aq.cssText, aj.sheet.cssRules.length);
                      ak = true;
                    }
                  }
                }
              }
              aj.sheet.deleteRule(am);
            } else if (an.type === CSSRule.FONT_FACE_RULE) {
              let av = oe.fromString(an.style.src).items[0] || null;
              if (av?.type === "external") {
                let aw = await this.#g(av.url.value, "dataURL");
                an.style.src = 'url("' + encodeURI(aw) + '")';
                ak = true;
              }
            }
          }
          if (ak) {
            Be(aj);
          }
        }
      }
      ag();
    });
  }
  reorderFontFamilies(af) {
    return new Promise(async (ag) => {
      this.normalize();
      let ah = [];
      for (let ak of af) {
        let al = this.#p.querySelector('style[data-bx-fonts="' + ak + '"]');
        ah.push(al);
      }
      let aj = this.#p.querySelector("defs");
      for (let am of ah) {
        aj.append(am);
      }
      ag();
    });
  }
  addFontFaces(af) {
    return new Promise(async (ag) => {
      let ah = {};
      for (let aj of af) {
        if (ah[aj.family] === undefined) {
          ah[aj.family] = [];
        }
        ah[aj.family].push(aj);
      }
      for (let [ak, al] of Object.entries(ah)) {
        let am = await this.getFontFaces(ak);
        for (let an of al) {
          for (let ap of am) {
            if (
              ap.weight === an.weight &&
              ap.style === an.weight &&
              ap.stretch === an.stretch &&
              ap.unicodeRange === an.unicodeRange &&
              ap.variant === an.variant &&
              ap.featureSettings === an.featureSettings
            ) {
              am.remove(ap);
            }
          }
          am.push(an);
        }
        this.#b(am);
      }
      ag();
    });
  }
  removeFontFace(af) {
    return new Promise(async (ag) => {
      let ah = await this.getFontFaces(af.family);
      let aj = ah.filter(
        (ak) =>
          ak.style !== af.style ||
          ak.weight !== af.weight ||
          ak.stretch !== af.stretch ||
          ak.unicodeRange !== af.unicodeRange
      );
      if (aj.length !== ah.length) {
        this.#b(aj);
      }
      ag();
    });
  }
  #b(af) {
    let ag = af.length > 0 ? af[0].family : null;
    if (ag !== null) {
      if (!af.find((ah) => ah.family !== ag)) {
        this.normalize();
        let ah = this.#p.querySelector('style[data-bx-fonts="' + ag + '"]');
        if (!ah) {
          ah = ei("svg:style");
          ah.setAttribute("data-bx-fonts", ag);
          this.#p.querySelector("defs").append(ah);
        }
        let aj = "";
        for (let ak of af) {
          aj += this.#f(ak);
        }
        ah.textContent = aj;
        return;
      }
      console.error(
        "Passed font faces from different families to fontsManger.#setFamilyFontFaces()."
      );
    }
  }
  #g(af, ag = "dataURL") {
    return new Promise(async (ah) => {
      let aj = await fetch(af);
      let ak = await aj.blob();
      if (ag === "dataURL") {
        ah(await me(ak));
      } else if (ag === "arrayBuffer") {
        ah(await ak.arrayBuffer());
      }
    });
  }
  #x(af, ag = false) {
    let ah = af.style.src;
    let aj = ne.fromString(af.style.fontFamily).items[0];
    let ak = af.style.fontStyle || "normal";
    let al = af.style.fontWeight ? Le(af.style.fontWeight) : "400";
    let am = af.style.fontStretch || "normal";
    let an = af.style.unicodeRange || "U+0-10FFFF";
    let ap = af.style.fontVariant || "normal";
    let aq = af.style.fontFeatureSettings || "normal";
    if (ag) {
      return {
        src: ah,
        family: aj,
        style: ak,
        weight: al,
        stretch: am,
        unicodeRange: an,
        variant: ap,
        featureSettings: aq,
      };
    }
    {
      let ar = new FontFace(aj, ah, {
        style: ak,
        weight: al,
        stretch: am,
        unicodeRange: an,
        variant: ap,
        featureSettings: aq,
      });
      ar.src = ah;
      return ar;
    }
  }
  #f(af) {
    let ag = "@font-face { ";
    ag += 'font-family: "' + af.family + '"; ';
    ag += "font-style: " + af.style + "; ";
    ag += "font-weight: " + af.weight + "; ";
    ag += "font-stretch: " + af.stretch + "; ";
    ag += "font-unicode-range: " + af.unicodeRange + "; ";
    ag += "font-variant: " + af.variant + "; ";
    ag += "font-feature-settings: " + af.featureSettings + "; ";
    ag += "src: " + af.src + "; ";
    ag += "}";
    return ag;
  }
}
var Ie = new (class extends EventTarget {
  #w = "init";
  #v = [];
  #l;
  get status() {
    return this.#w;
  }
  constructor() {
    super();
    this.#l = new a7("LocalFontsManager");
    this.#l.version(1).stores({
      cache: "family",
    });
    this.#l
      .version(2)
      .stores({
        cache: "family",
      })
      .upgrade((af) => af.cache.clear());
    if (window.queryLocalFonts === undefined) {
      this.#w = "no-api";
    } else {
      navigator.permissions
        .query({
          name: "local-fonts",
        })
        .then((af) => {
          if (af.state === "granted") {
            this.refresh();
          } else if (af.state !== "prompt") {
            this.#w = "no-permission";
          }
        });
    }
  }
  search(af = "", ag = "all") {
    return new Promise(async (ah) => {
      let aj = [];
      let ak = this.#l.cache;
      if (af.trim() !== "") {
        ak = ak.filter((al) =>
          al.family.toLowerCase().includes(af.trim().toLowerCase())
        );
      }
      aj = await ak.toArray();
      if (ag !== "all") {
        aj = aj.slice(ag * 40, (ag + 1) * 40);
      }
      ah(aj);
    });
  }
  refresh() {
    return new Promise(async (af, ag) => {
      let ah;
      try {
        ah = await this.getLocalFontsMetadata(true);
      } catch (ak) {
        return ag(ak);
      }
      let aj = [];
      for (let al of ah) {
        let am = Ue(al.style) + (De(al.style) === "italic" ? "i" : "");
        let an = aj.find((ap) => ap.family === al.family);
        if (an) {
          if (an.faces.includes(am) === false) {
            an.faces.push(am);
          }
        } else {
          let ap = {
            family: al.family,
            faces: [am],
          };
          aj.push(ap);
        }
      }
      for (let aq of aj) {
        aq.faces.sort();
      }
      await this.#l.cache.clear();
      await this.#l.cache.bulkPut(aj);
      this.#w = "ready";
      af();
    });
  }
  getLocalFontsMetadata(af = false) {
    return new Promise(async (ag, ah) => {
      if (this.status === "no-api") {
        ag([]);
      } else {
        if (this.#v.length < 10 || af) {
          try {
            this.#v = await window.queryLocalFonts();
          } catch (aj) {
            return ah({
              message: aj.message,
              name: aj.name,
            });
          }
        }
        ag(this.#v);
      }
    });
  }
  getCacheSize() {
    return new Promise(async (af) => {
      af(await this.#l.cache.count());
    });
  }
  getFamilyDescriptor(af) {
    return new Promise(async (ag) => {
      ag((await this.#l.cache.where("family").equals(af).toArray())[0] || null);
    });
  }
  getFamilyWeights(af) {
    return new Promise(async (ag) => {
      let ah = await this.getFamilyDescriptor(af);
      if (ah) {
        let aj = new Set();
        for (let ak of ah.faces) {
          let al = ak.substring(0, 3);
          aj.add(al);
        }
        ag([...aj]);
      } else {
        ag(["400"]);
      }
    });
  }
})();
let Fe = (af, ag) =>
  af.is2D
    ? new DOMMatrix([
        z(af.a, ag),
        z(af.b, ag),
        z(af.c, ag),
        z(af.d, ag),
        z(af.e, ag),
        z(af.f, ag),
      ])
    : new DOMMatrix([
        z(af.m11, ag),
        z(af.m12, ag),
        z(af.m13, ag),
        z(af.m14, ag),
        z(af.m21, ag),
        z(af.m22, ag),
        z(af.m23, ag),
        z(af.m24, ag),
        z(af.m31, ag),
        z(af.m32, ag),
        z(af.m33, ag),
        z(af.m34, ag),
        z(af.m41, ag),
        z(af.m42, ag),
        z(af.m43, ag),
        z(af.m44, ag),
      ]);
let Ne = (af, ag) => JSON.stringify(af) === JSON.stringify(ag);
let Oe = (af, ag = 6) => {
  let ah = ei("svg:path");
  let aj = af.getPathData();
  for (let ak of aj) {
    ak.values = ak.values.map((al) => z(al, ag));
  }
  ah.setPathData(aj);
  for (let al of af.attributes) {
    if (["x", "y", "width", "height", "rx", "ry"].includes(al.name) === false) {
      ah.setAttribute(al.name, al.value);
    }
  }
  ah.innerHTML = af.innerHTML;
  return ah;
};
let _e = (af, ag = 6) => {
  let ah = ei("svg:path");
  let aj = af.getPathData();
  for (let ak of aj) {
    ak.values = ak.values.map((al) => z(al, ag));
  }
  ah.setPathData(aj);
  for (let al of af.attributes) {
    if (!["cx", "cy", "r"].includes(al.name)) {
      ah.setAttribute(al.name, al.value);
    }
  }
  ah.innerHTML = af.innerHTML;
  return ah;
};
let qe = (af, ag = 6) => {
  let ah = ei("svg:path");
  let aj = af.getPathData();
  for (let ak of aj) {
    ak.values = ak.values.map((al) => z(al, ag));
  }
  ah.setPathData(aj);
  for (let al of af.attributes) {
    if (!["cx", "cy", "rx", "ry"].includes(al.name)) {
      ah.setAttribute(al.name, al.value);
    }
  }
  ah.innerHTML = af.innerHTML;
  return ah;
};
let je = (af, ag = 6) => {
  let ah = ei("svg:path");
  let aj = af.getPathData();
  for (let ak of aj) {
    ak.values = ak.values.map((al) => z(al, ag));
  }
  ah.setPathData(aj);
  for (let al of af.attributes) {
    if (!["x1", "y1", "x2", "y2"].includes(al.name)) {
      ah.setAttribute(al.name, al.value);
    }
  }
  ah.innerHTML = af.innerHTML;
  return ah;
};
let Ve = (af, ag = 6) => {
  let ah = ei("svg:path");
  let aj = af.getPathData();
  for (let ak of aj) {
    ak.values = ak.values.map((al) => z(al, ag));
  }
  ah.setPathData(aj);
  for (let al of af.attributes) {
    if (al.name !== "points") {
      ah.setAttribute(al.name, al.value);
    }
  }
  ah.innerHTML = af.innerHTML;
  return ah;
};
let Ge = (af, ag = 6) => {
  let ah = ei("svg:path");
  let aj = af.getPathData();
  for (let ak of aj) {
    ak.values = ak.values.map((al) => z(al, ag));
  }
  ah.setPathData(af.getPathData());
  for (let al of af.attributes) {
    if (al.name !== "points") {
      ah.setAttribute(al.name, al.value);
    }
  }
  ah.innerHTML = af.innerHTML;
  return ah;
};
const He = ["de", "en", "es", "pl"];
let We;
let Ke = () => {
  if (We === undefined) {
    We =
      navigator.platform.startsWith("Mac") === true
        ? "macos"
        : ["iPhone", "iPad", "iPod"].indexOf(navigator.platform) !== -1
        ? "ios"
        : ["Win32", "Win64", "Windows", "WinCE"].indexOf(navigator.platform) !==
          -1
        ? "windows"
        : /CrOS/.test(navigator.userAgent)
        ? "chromeos"
        : /Android/.test(navigator.userAgent)
        ? "android"
        : /Linux/.test(navigator.platform)
        ? "linux"
        : null;
  }
  return We;
};
let Ze = () => {
  let af = navigator.language;
  let [ag, ah] = af.split("-");
  if (He.includes(af)) {
    return af;
  } else if (He.includes(ag)) {
    return ag;
  } else {
    return "en";
  }
};
let Ye = () => {
  let af = null;
  let ag = Ke();
  af = ag === "macos" ? "cupertino" : ag === "windows" ? "fluent" : "adwaita";
  return af;
};
let Xe = () =>
  new Promise(async (af) => {
    let ag = null;
    let ah = null;
    let aj = null;
    let ak = null;
    if (navigator.userAgentData) {
      let al;
      try {
        al = await navigator.userAgentData.getHighEntropyValues([
          "platformVersion",
        ]);
      } catch (am) {
        al = navigator.userAgentData;
      }
      for (let an of [
        "Opera",
        "Vivaldi",
        "Brave",
        "Microsoft Edge",
        "Google Chrome",
        "Chromium",
      ]) {
        let ap = al.brands.find((aq) => aq.brand === an);
        if (ap) {
          ag =
            ap.brand === "Microsoft Edge"
              ? "Edge"
              : ap.brand === "Google Chrome"
              ? "Chrome"
              : ap.brand;
          ah = ap.version || null;
          break;
        }
      }
      if (al.platform) {
        if (al.platform === "macOS") {
          aj = "macOS";
          if (al.platformVersion) {
            let [aq, ar, au] = al.platformVersion.split(".");
            ak = aq === "10" ? aq + "." + ar : aq;
          }
        } else if (al.platform === "Linux") {
          for (let av of [
            "Fedora",
            "Ubuntu",
            "Debian",
            "CentOS",
            "Red Hat",
            "Mint",
          ]) {
            if (navigator.userAgent.includes(av)) {
              aj = av + " Linux";
              break;
            }
          }
          if (aj === null) {
            aj = "Linux";
          }
        } else if (al.platform === "Windows") {
          aj = "Windows";
          if (al.platformVersion) {
            let [aw, ax] = al.platformVersion
              .split(".")
              .map((ay) => parseInt(ay));
            if (aw === 0) {
              if (ax === 3 || ax === 2) {
                ak = "8";
              } else if (ax === 1) {
                ak = "7";
              }
            } else if (aw <= 10) {
              ak = "10";
            }
            if (aw >= 13) {
              ak = "11";
            }
          }
        } else {
          aj =
            al.platform === "Chrome OS"
              ? "Chrome OS"
              : al.platform === "Android"
              ? "Android"
              : al.platform;
        }
      }
    } else if (
      navigator.userAgent.indexOf("Safari/") > -1 &&
      navigator.userAgent.indexOf("Chrome") === -1
    ) {
      let ay = Ke();
      if (ay === "macos" || ay === "ios") {
        ag = "Safari";
        ah = navigator.userAgent
          .split(" ")
          .find((az) => az.startsWith("Version/"))
          .split("/")[1];
        aj = ay === "macos" ? "macOS" : "iOS";
      } else {
        ag = "WebKit";
        ah = navigator.userAgent
          .split(" ")
          .find((az) => az.startsWith("Safari/"))
          .split("/")[1];
        if (ay === "windows") {
          aj = "Windows";
        } else if (ay === "chromeos") {
          aj = "Chrome OS";
        } else if (ay === "android") {
          aj = "Android";
        } else if (ay === "linux") {
          aj = "Linux";
        }
      }
    }
    if (ag !== null) {
      let az = "" + ag;
      if (ah) {
        az += "/" + ah;
      }
      if (aj) {
        az += "; " + aj;
        if (ak) {
          az += "/" + ak;
        }
      }
      af(az);
    } else {
      af(null);
    }
  });
const Je =
  "\n  position: fixed;\n  top: -1px;\n  left: -1px;\n  width: 1px;\n  height: 1px;\n  contain: strict;\n  overflow: hidden;\n".replaceAll(
    "\n  ",
    ""
  );
class Qe {
  #y;
  #k;
  get shadowRoot() {
    return this.#y.shadowRoot;
  }
  constructor(af) {
    this.#k = af;
    this.#y = document.createElement("div");
    this.#y.setAttribute("style", Je);
    this.#y.setAttribute("class", "offscreen-container");
    this.#y.attachShadow({
      mode: "open",
    });
    this.#y.shadowRoot.append(af);
    document.body.append(this.#y);
  }
  destroy() {
    if (this.#k.parentNode === this.#y.shadowRoot) {
      this.#k.remove();
    }
    this.#y.remove();
    this.#y = null;
  }
}
let et = (af, ag = 500, ah) => {
  let aj = null;
  let ak = null;
  let al = null;
  let am = 0;
  let an = () => {
    am = new Date();
    ak = null;
    al = af.apply(ah, aj);
  };
  return (...ap) => {
    let aq = new Date();
    let ar = ag - (aq - am);
    aj = ap;
    if (ar <= 0) {
      clearTimeout(ak);
      ak = null;
      am = aq;
      al = af.apply(ah, aj);
    } else {
      ak ||= setTimeout(an, ar);
    }
    return al;
  };
};
let tt = (af, ag) => {
  let ah;
  let aj = false;
  return function () {
    if (!aj) {
      aj = true;
      ah = af.apply(ag || this, arguments);
      af = null;
    }
    return ah;
  };
};
let it = (af) =>
  new Promise((ag, ah) => {
    setTimeout(() => ag(), af);
  });
let st = (af) => af / 1000 / 60 / 60 / 24;
let at = () => new Date().getFullYear();
let { abs, tan } = Math;
let lt = (af) => {
  if (af.isConnected === false) {
    new Qe(af);
  }
  if (re) {
    let ag = null;
    if (af.style.transform === "") {
      ag =
        af.localName === "linearGradient" || af.localName === "radialGradient"
          ? af.gradientTransform.baseVal.consolidate()
          : af.localName === "pattern"
          ? af.patternTransform.baseVal.consolidate()
          : af.transform.baseVal.consolidate();
      if (ag) {
        return DOMMatrix.fromMatrix(ag.matrix);
      } else {
        return new DOMMatrix();
      }
    }
    {
      let ah = af.computedStyleMap().get("transform");
      if (ah.value === "none") {
        return new DOMMatrix();
      } else {
        return ah.toMatrix();
      }
    }
  }
  {
    let aj = af.computedStyleMap().get("transform");
    if (aj.value === "none") {
      return new DOMMatrix();
    } else {
      return aj.toMatrix();
    }
  }
};
let rt = (af, ag, ah = null) => {
  af.style.removeProperty("transform");
  if (ag === null) {
    if (
      af.localName === "linearGradient" ||
      af.localName === "radialGradient"
    ) {
      af.removeAttribute("gradientTransform");
    } else if (af.localName === "pattern") {
      af.removeAttribute("patternTransform");
    } else {
      af.removeAttribute("transform");
    }
  } else {
    if (ah !== null) {
      ag = Fe(ag, ah);
    }
    if (ag.isIdentity) {
      if (
        af.localName === "linearGradient" ||
        af.localName === "radialGradient"
      ) {
        af.removeAttribute("gradientTransform");
      } else if (af.localName === "pattern") {
        af.removeAttribute("patternTransform");
      } else {
        af.removeAttribute("transform");
      }
    } else if (
      af.localName === "linearGradient" ||
      af.localName === "radialGradient"
    ) {
      af.setAttribute("gradientTransform", ag.toString());
    } else if (af.localName === "pattern") {
      af.setAttribute("patternTransform", ag.toString());
    } else {
      af.setAttribute("transform", ag.toString());
    }
  }
};
let ht = (af, ag, ah = "userSpaceOnUse", aj = null, ak = null) => {
  let al = null;
  {
    let am = lt(af);
    let [an, ap] = ((aA, aB = "auto") => {
      let aC;
      let aD;
      let aE;
      let aF;
      let aG = tt(() => St(aA));
      {
        let aH = getComputedStyle(aA);
        let { transformBox } = aH;
        if (transformBox === "fill-box" && aA.style.transformOrigin !== "") {
          let aJ = aA.style.transformOrigin
            .split(" ")
            .map((aK) => aK.trim())
            .map((aK) =>
              aK === "center"
                ? CSSUnitValue.parse("50%")
                : aK === "top" || aK === "left"
                ? CSSUnitValue.parse("0%")
                : aK === "bottom" || aK === "right"
                ? CSSUnitValue.parse("100%")
                : CSSUnitValue.parse(aK)
            );
          if (aJ.length === 1) {
            aC = aJ[0];
            aD = aJ[0];
          } else if (aJ.length === 2) {
            aC = aJ[0];
            aD = aJ[1];
          }
          if (aC.unit === "percent") {
            aC = aC.value / 100;
          } else {
            let aK = aG();
            aC = aC.to("px").value / aK.width;
          }
          if (aD.unit === "percent") {
            aD = aD.value / 100;
          } else {
            let aL = aG();
            aD = aD.to("px").value / aL.height;
          }
          aE = "objectBoundingBox";
        } else {
          let { transformOrigin } = aH;
          let aN = transformOrigin
            .split(" ")
            .map((aO) => CSSUnitValue.parse(aO));
          if (transformBox === "fill-box") {
            let aO = aG();
            aC = aN[0].value / aO.width;
            aD = aN[1].value / aO.height;
            aE = "objectBoundingBox";
          } else {
            aC = aN[0].value;
            aD = aN[1].value;
            aE = "userSpaceOnUse";
          }
        }
      }
      if (aB === "auto" || aB === aE) {
        aF = new DOMPoint(aC, aD);
      } else if (aB === "userSpaceOnUse" && aE === "objectBoundingBox") {
        let aP = aG();
        aF = new DOMPoint(aP.x + aC * aP.width, aP.y + aD * aP.height);
        aE = "userSpaceOnUse";
      } else if (aB === "objectBoundingBox" && aE === "userSpaceOnUse") {
        let aQ = aG();
        aF = new DOMPoint((aC - aQ.x) / aQ.width, (aD - aQ.y) / aQ.height);
        aE = "objectBoundingBox";
      }
      return [aF, aE];
    })(af, "userSpaceOnUse");
    let aq = St(af);
    if (aq.width === 0) {
      aq.width = 1e-7;
    }
    if (aq.height === 0) {
      aq.height = 1e-7;
    }
    let ar = new DOMPoint(aq.x, aq.y);
    let au = new DOMPoint(aq.x + aq.width, aq.y);
    let av = new DOMPoint(aq.x, aq.y + aq.height);
    let aw = null;
    if (ah === "userSpaceOnUse") {
      aw = new DOMMatrix()
        .translate(an.x, an.y)
        .translate(-ag.x, -ag.y)
        .multiply(am)
        .translate(ag.x, ag.y)
        .translate(-an.x, -an.y);
    } else if (ah === "objectBoundingBox") {
      let aA = new DOMPoint(ag.x * aq.width, ag.y * aq.height);
      aw = new DOMMatrix()
        .translate(an.x - aq.x, an.y - aq.y)
        .translate(-aA.x, -aA.y)
        .multiply(am)
        .translate(aA.x, aA.y)
        .translate(-an.x + aq.x, -an.y + aq.y);
    }
    let [ax, ay, az] = [ar, au, av].map((aB) => aB.matrixTransform(aw));
    al = ct(ar, au, av, ax, ay, az);
    if (aj !== null && al.a === 1 && al.b === 0 && al.c === 0 && al.d === 1) {
      al.e = z(al.e, aj);
      al.f = z(al.f, aj);
    }
  }
  rt(af, al, ak);
  if (ah === "objectBoundingBox") {
    af.style.setProperty("transform-box", "fill-box");
  } else {
    af.style.removeProperty("transform-box");
  }
  if (ah === "userSpaceOnUse") {
    let { x: aB, y: aC } = ag;
    if (aj) {
      aB = z(aB, aj);
      aC = z(aC, aj);
    }
    if (ag.x === 0 && ag.y === 0) {
      af.style.removeProperty("transform-origin");
    } else {
      af.style.setProperty("transform-origin", aB + "px " + aC + "px");
    }
  } else if (ah === "objectBoundingBox") {
    let aD = ag.x * 100;
    let aE = ag.y * 100;
    if (aj) {
      aD = z(aD, aj + 2);
      aE = z(aE, aj + 2);
    }
    if (ag.x === 0 && ag.y === 0) {
      af.style.removeProperty("transform-origin");
    } else {
      af.style.setProperty("transform-origin", aD + "% " + aE + "%");
    }
  }
};
let ct = (af, ag, ah, aj, ak, al) => {
  let am = (ax) =>
    ax[0][0] * (ax[1][1] * ax[2][2] - ax[1][2] * ax[2][1]) -
    ax[0][1] * (ax[1][0] * ax[2][2] - ax[1][2] * ax[2][0]) +
    ax[0][2] * (ax[1][0] * ax[2][1] - ax[1][1] * ax[2][0]);
  let an = am([
    [af.x, af.y, 1],
    [ag.x, ag.y, 1],
    [ah.x, ah.y, 1],
  ]);
  let ap = am([
    [aj.x, af.y, 1],
    [ak.x, ag.y, 1],
    [al.x, ah.y, 1],
  ]);
  let aq = am([
    [aj.y, af.y, 1],
    [ak.y, ag.y, 1],
    [al.y, ah.y, 1],
  ]);
  let ar = am([
    [af.x, aj.x, 1],
    [ag.x, ak.x, 1],
    [ah.x, al.x, 1],
  ]);
  let au = am([
    [af.x, aj.y, 1],
    [ag.x, ak.y, 1],
    [ah.x, al.y, 1],
  ]);
  let av = am([
    [af.x, af.y, aj.x],
    [ag.x, ag.y, ak.x],
    [ah.x, ah.y, al.x],
  ]);
  let aw = am([
    [af.x, af.y, aj.y],
    [ag.x, ag.y, ak.y],
    [ah.x, ah.y, al.y],
  ]);
  if (an === 0) {
    return new DOMMatrix([1, 0, 0, 1, 0, 0]);
  }
  {
    let ax = [ap / an, aq / an, ar / an, au / an, av / an, aw / an].map((ay) =>
      z(ay, 12)
    );
    return new DOMMatrix(ax);
  }
};
let dt = (af, ag) => {
  let ah = new DOMPoint(af.x, af.y);
  let aj = new DOMPoint(af.x + af.width, af.y);
  let ak = new DOMPoint(af.x, af.y + af.height);
  let al = new DOMPoint(ag.x, ag.y);
  let am = new DOMPoint(ag.x + ag.width, ag.y);
  let an = new DOMPoint(ag.x, ag.y + ag.height);
  return ct(ah, aj, ak, al, am, an);
};
let ut = (af, ag, ah, aj = 0, ak = 0) => {
  let al = DOMMatrix.fromMatrix(af);
  let am = Bt(ag);
  let an = Bt(ah);
  let ap = new DOMMatrix();
  ap = pt(ap, tan(am), tan(an));
  al = mt(al, aj, ak);
  al.multiplySelf(ap);
  al = mt(al, -aj, -ak);
  return al;
};
let pt = (af, ag, ah) => {
  let aj = DOMMatrix.fromMatrix(af);
  let ak = aj.a;
  let al = aj.b;
  aj.a += ah * aj.c;
  aj.b += ah * aj.d;
  aj.c += ag * ak;
  aj.d += ag * al;
  return aj;
};
let mt = (af, ag, ah) => {
  let aj = DOMMatrix.fromMatrix(af);
  aj.e = aj.e + ag * aj.a + ah * aj.c;
  aj.f = aj.f + ag * aj.b + ah * aj.d;
  return aj;
};
let { keys } = Object;
let gt = (af) => {
  let ag = af.querySelectorAll("textPath");
  af.querySelectorAll("tspan");
  let ah = ag.length > 0 ? ag[0] : null;
  {
    let aj =
      af.hasAttribute("width") || af.hasAttribute("height")
        ? "pre-wrap"
        : "pre";
    af.style.setProperty("white-space", aj);
  }
  if (ag.length > 1) {
    for (let ak of ag) {
      if (ak !== ah) {
        ak.remove();
      }
    }
  }
  if (ah) {
    if (ah.parentElement !== af) {
      af.append(ah);
    }
    for (let al of [...af.childNodes]) {
      if (["a", "tspan", "#text"].includes(al.localName)) {
        al.remove();
      }
    }
    if (ah.hasAttribute("style")) {
      for (let am of ah.style) {
        let an = af.style.getPropertyValue(am);
        let ap = ah.style.getPropertyValue(am);
        if (an !== ap) {
          af.style.setProperty(am, ap);
        }
      }
      ah.removeAttribute("style");
    }
  }
};
let bt = (af) => {
  {
    let ag = ti(af);
    let ah = af.href.baseVal ? ag.querySelector(af.href.baseVal) : null;
    if (
      ah &&
      ["rect", "circle", "ellipse", "line", "polyline", "polygon"].includes(
        ah.localName
      )
    ) {
      let aj = ((ak, al = 6) => {
        let am = null;
        if (ak.localName === "rect") {
          am = Oe(ak, al);
        } else if (ak.localName === "circle") {
          am = _e(ak, al);
        } else if (ak.localName === "ellipse") {
          am = qe(ak, al);
        } else if (ak.localName === "line") {
          am = je(ak, al);
        } else if (ak.localName === "polyline") {
          am = Ve(ak, al);
        } else if (ak.localName === "polygon") {
          am = Ge(ak, al);
        }
        return am;
      })(ah);
      ah.replaceWith(aj);
    }
  }
};
let ft = (af) => {
  let ag = {
    rootItem: null,
    childItems: [],
  };
  {
    let [ah, aj] = yt(af);
    let ak = {
      inheritableProperties: ah,
      nonInheritableProperties: aj,
    };
    ag.rootItem = ak;
  }
  {
    let al = 0;
    for (let am of wt(af)) {
      let an = {
        textContent: am.textContent,
        href: null,
        inheritableProperties: {},
        nonInheritableProperties: {},
        isLineBreak: false,
        x: [],
        y: [],
        dx: [],
        dy: [],
        rotate: [],
        startOffset: al,
        endOffset: al + am.length,
        animations: [],
      };
      al += am.length;
      if (am.textContent === "​") {
        an.isLineBreak = true;
      }
      if (an.isLineBreak === false) {
        for (let ap = am.parentNode; ap !== af; ap = ap.parentNode) {
          if (ap.localName === "a" && ap.hasAttribute("_href")) {
            an.href = ap.getAttribute("_href");
            break;
          }
        }
      }
      if (an.isLineBreak === false) {
        let aq = am.closest("tspan, text");
        let [ar, au] = yt(aq);
        an.inheritableProperties = ar;
        if (aq !== af) {
          an.nonInheritableProperties = au;
        }
      }
      {
        let av = [];
        let aw = [];
        let ax = [];
        let ay = [];
        let az = [];
        for (let aB = am.parentNode; af.contains(aB); aB = aB.parentNode) {
          if (aB.localName === "tspan" || aB.localName === "text") {
            let aC = 0;
            for (let aD of wt(aB)) {
              if (aD === am) {
                break;
              }
              aC += aD.length;
            }
            for (
              let aE = aC, aF = 0;
              aB.x.baseVal.length, aF < am.length;
              aE += 1, aF += 1
            ) {
              if (av[aF] === undefined && aB.x.baseVal[aE] !== undefined) {
                av[aF] = aB.x.baseVal[aE].valueAsString;
              }
            }
            for (
              let aG = aC, aH = 0;
              aB.y.baseVal.length, aH < am.length;
              aG += 1, aH += 1
            ) {
              if (aw[aH] === undefined && aB.y.baseVal[aG] !== undefined) {
                aw[aH] = aB.y.baseVal[aG].valueAsString;
              }
            }
            for (
              let aI = aC, aJ = 0;
              aB.dx.baseVal.length, aJ < am.length;
              aI += 1, aJ += 1
            ) {
              if (ax[aJ] === undefined && aB.dx.baseVal[aI] !== undefined) {
                ax[aJ] = aB.dx.baseVal[aI].valueAsString;
              }
            }
            for (
              let aK = aC, aL = 0;
              aB.dy.baseVal.length, aL < am.length;
              aK += 1, aL += 1
            ) {
              if (ay[aL] === undefined && aB.dy.baseVal[aK] !== undefined) {
                ay[aL] = aB.dy.baseVal[aK].valueAsString;
              }
            }
            for (
              let aM = aC, aN = 0;
              aB.rotate.baseVal.length, aN < am.length;
              aM += 1, aN += 1
            ) {
              if (az[aN] === undefined && aB.rotate.baseVal[aM] !== undefined) {
                az[aN] = "" + aB.rotate.baseVal[aM].value;
              }
            }
          }
        }
        let aA = "0";
        for (let aO = 0; aO < am.length; aO += 1) {
          if (av[aO] === undefined) {
            av[aO] = "auto";
          }
          if (aw[aO] === undefined) {
            aw[aO] = "auto";
          }
          if (ax[aO] === undefined) {
            ax[aO] = "0";
          }
          if (ay[aO] === undefined) {
            ay[aO] = "0";
          }
          if (az[aO] === undefined) {
            az[aO] = aA;
          }
          aA = az[aO];
        }
        an.x = av;
        an.y = aw;
        an.dx = ax;
        an.dy = ay;
        an.rotate = az;
      }
      {
        let aP = [
          ...am
            .closest("tspan,text")
            .querySelectorAll(":scope > [attributeName]"),
        ];
        an.animations = aP;
      }
      ag.childItems.push(an);
    }
  }
  for (let aQ of ag.childItems) {
    for (let aR of keys(aQ.inheritableProperties)) {
      if (
        ag.rootItem.inheritableProperties[aR] === aQ.inheritableProperties[aR]
      ) {
        delete aQ.inheritableProperties[aR];
      }
    }
  }
  {
    let aS = ag.childItems.filter((aT) => !aT.isLineBreak);
    if (aS.length > 0) {
      let [aT, ...aU] = aS;
      for (let aV of keys(aT.inheritableProperties)) {
        let aW = true;
        for (let aX of aU) {
          if (aX.inheritableProperties[aV] !== aT.inheritableProperties[aV]) {
            aW = false;
          }
        }
        if (aW) {
          ag.rootItem.inheritableProperties[aV] = aT.inheritableProperties[aV];
          for (let aY of ag.childItems) {
            delete aY.inheritableProperties[aV];
          }
        }
      }
    }
  }
  if (ag.childItems.length > 1) {
    let aZ = [];
    let b0 = null;
    for (let b1 of ag.childItems) {
      if (
        b0 &&
        b0.href === b1.href &&
        Ne(b0.nonInheritableProperties, b1.nonInheritableProperties) &&
        Ne(b0.inheritableProperties, b1.inheritableProperties) &&
        (b0.x.includes("auto") === false ||
          b1.x.length === 0 ||
          G(b1.x, "auto")) &&
        (b0.y.includes("auto") === false ||
          b1.y.length === 0 ||
          G(b1.y, "auto")) &&
        b0.isLineBreak === false &&
        b1.isLineBreak === false
      ) {
        b0.textContent += b1.textContent;
        b0.x.push(...b1.x);
        b0.y.push(...b1.y);
        b0.dx.push(...b1.dx);
        b0.dy.push(...b1.dy);
        b0.rotate.push(...b1.rotate);
        b0.endOffset = b1.endOffset;
      } else {
        aZ.push(b1);
        b0 = b1;
      }
    }
    ag.childItems = aZ;
  }
  return ag;
};
let wt = (af) => {
  let ag = [];
  if (af.closest("text")) {
    let ah = [];
    let aj = document.createTreeWalker(af, NodeFilter.SHOW_TEXT);
    while (aj.nextNode()) {
      ah.push(aj.currentNode);
    }
    for (let ak of ah) {
      let al = ak.parentElement;
      if (
        al.localName === "text" ||
        al.localName === "tspan" ||
        al.localName === "textPath"
      ) {
        if (al.getNumberOfChars() > 0) {
          ag.push(ak);
        }
      } else if (al.localName === "a") {
        let am = al.getBBox();
        if (am.x !== 0 || am.y !== 0 || am.width !== 0 || am.height !== 0) {
          ag.push(ak);
        }
      }
    }
  }
  return ag;
};
let vt = (af) => {
  let ag = wt(af);
  let ah = [];
  for (let aj of ag) {
    let ak = aj.closest("*");
    let al = getComputedStyle(ak).textTransform;
    let am = aj.textContent;
    if (al === "uppercase") {
      am = am.toUpperCase();
    } else if (al === "lowercase") {
      am = am.toLowerCase();
    } else if (al === "capitalize") {
      am = ke(am);
    }
    ah.push(...am.split(""));
  }
  return ah;
};
let yt = (af) => {
  let ag = getComputedStyle(af);
  let ah = {};
  let aj = {};
  for (let ak of U) {
    if (
      ak.appliesTo.includes("text") ||
      ak.appliesTo.includes("tspan") ||
      ak.appliesTo.includes("textPath")
    ) {
      if (ak.name === "font" || ak.name === "display") {
        continue;
      }
      if (ak.inheritable === true) {
        ah[ak.name] = ag.getPropertyValue(ak.name);
      } else if (ak.inheritable === false) {
        aj[ak.name] = ag.getPropertyValue(ak.name);
      }
    }
  }
  return [ah, aj];
};
let kt = (af, ag) => {
  let ah = af.closest("text");
  let aj = 0;
  let ak = -1;
  for (let al of wt(ah)) {
    if (al === af) {
      ak = aj + ag;
      break;
    }
    aj += al.length;
  }
  return [ah, ak];
};
let Ct = (af, ag = 3, ah = 6, aj = false) =>
  new Promise(async (ak) => {
    let al = await new Re(af.closest("svg")).getFontFaces();
    let am = await Ie.getLocalFontsMetadata();
    let an = Ke();
    if (["windows", "linux", "macos"].includes(an) === false) {
      an = an === "ios" ? "macos" : "linux";
    }
    ((au, av = null) => {
      let aw = ft(au);
      let ax = av && au.contains(av.commonAncestorContainer);
      let ay = ax ? kt(av.startContainer, av.startOffset)[1] : -1;
      let az = ax ? kt(av.endContainer, av.endOffset)[1] : -1;
      if (ax && ay !== az) {
        let aA = [];
        for (let aB of aw.childItems) {
          let aC = null;
          if (ay >= aB.startOffset && az <= aB.endOffset) {
            aC = [
              aB.textContent.slice(0, ay - aB.startOffset),
              aB.textContent.slice(ay - aB.startOffset, az - aB.startOffset),
              aB.textContent.slice(az - aB.startOffset),
            ];
          } else if (ay >= aB.startOffset && ay < aB.endOffset) {
            aC = [
              aB.textContent.slice(0, ay - aB.startOffset),
              aB.textContent.slice(ay - aB.startOffset),
            ];
          } else if (az > aB.startOffset && az <= aB.endOffset) {
            aC = [
              aB.textContent.slice(0, az - aB.startOffset),
              aB.textContent.slice(az - aB.startOffset),
            ];
          }
          if (aC === null) {
            aA.push(aB);
          } else {
            let aD = aB.startOffset;
            let aE = 0;
            for (let aF of aC) {
              if (aF.length > 0) {
                let aG = {
                  textContent: aF,
                  href: aB.href,
                  inheritableProperties: aB.inheritableProperties,
                  nonInheritableProperties: aB.nonInheritableProperties,
                  startOffset: aD,
                  endOffset: aD + aF.length,
                  x: [],
                  y: [],
                  dx: [],
                  dy: [],
                  rotate: [],
                  animations: aB.animations.map((aH) => aH.cloneNode(true)),
                };
                for (let aH = 0; aH < aF.length; aH += 1) {
                  aG.x.push(aB.x[aE]);
                  aG.y.push(aB.y[aE]);
                  aG.dx.push(aB.dx[aE]);
                  aG.dy.push(aB.dy[aE]);
                  aG.rotate.push(aB.rotate[aE]);
                  aE += 1;
                }
                aA.push(aG);
                aD += aF.length;
              }
            }
          }
        }
        aw.childItems = aA;
      }
      au.removeAttribute("x");
      au.removeAttribute("y");
      au.removeAttribute("dx");
      au.removeAttribute("dy");
      au.removeAttribute("rotate");
      au.setAttribute("style", "");
      for (let aI of D) {
        if (au.hasAttribute(aI) && aI !== "transform") {
          au.removeAttribute(aI);
        }
      }
      {
        let aJ = getComputedStyle(au);
        for (let aK of keys(aw.rootItem.inheritableProperties)) {
          if (
            aJ.getPropertyValue(aK) !== aw.rootItem.inheritableProperties[aK]
          ) {
            au.style.setProperty(aK, aw.rootItem.inheritableProperties[aK]);
          }
        }
        for (let aL of keys(aw.rootItem.nonInheritableProperties)) {
          if (
            aJ.getPropertyValue(aL) !== aw.rootItem.nonInheritableProperties[aL]
          ) {
            au.style.setProperty(aL, aw.rootItem.nonInheritableProperties[aL]);
          }
        }
      }
      {
        let aM = au.querySelector("textPath") || au;
        for (let aN of [...aM.childNodes]) {
          if (
            aN.nodeName === "tspan" ||
            aN.nodeName === "a" ||
            aN.nodeName === "#text"
          ) {
            aN.remove();
          }
        }
        if (aw.childItems.length > 0) {
          for (let aO of aw.childItems) {
            let aP = ei("svg:tspan");
            aM.append(aP);
            if (aO.href) {
              let aQ = ei("svg:a");
              aQ.setAttribute("_href", aO.href);
              aQ.textContent = aO.textContent;
              aP.append(aQ);
            } else {
              aP.textContent = aO.textContent;
            }
            if (aO.animations) {
              for (let aR of aO.animations) {
                aP.append(aR.cloneNode(true));
              }
            }
            {
              let aS = getComputedStyle(aP);
              for (let aT of keys(aO.inheritableProperties)) {
                if (aS.getPropertyValue(aT) !== aO.inheritableProperties[aT]) {
                  aP.style.setProperty(aT, aO.inheritableProperties[aT]);
                }
              }
              for (let aU of keys(aO.nonInheritableProperties)) {
                if (
                  aS.getPropertyValue(aU) !== aO.nonInheritableProperties[aU]
                ) {
                  aP.style.setProperty(aU, aO.nonInheritableProperties[aU]);
                }
              }
            }
            {
              let aV = aO.x.filter((aW) => aW !== "auto");
              if (aV.length > 0) {
                aP.setAttribute("x", aV.join(" "));
              }
            }
            {
              let aW = aO.y.filter((aX) => aX !== "auto");
              if (aW.length > 0) {
                aP.setAttribute("y", aW.join(" "));
              }
            }
            {
              let aX = [...aO.dx];
              for (let aY = aX.length - 1; aY >= 0 && aX[aY] === "0"; aY -= 1) {
                aX.pop();
              }
              if (aX.length > 0) {
                aP.setAttribute("dx", aX.join(" "));
              }
            }
            {
              let aZ = [...aO.dy];
              for (let b0 = aZ.length - 1; b0 >= 0 && aZ[b0] === "0"; b0 -= 1) {
                aZ.pop();
              }
              if (aZ.length > 0) {
                aP.setAttribute("dy", aZ.join(" "));
              }
            }
            {
              let b1 = [...aO.rotate];
              for (
                let b2 = b1.length - 1;
                b2 >= 0 && b1[b2] === b1[b2 - 1];
                b2 -= 1
              ) {
                b1.pop();
              }
              if (b1.length === 1 && b1[0] === "0") {
                b1 = [];
              }
              if (b1.length > 0) {
                aP.setAttribute("rotate", b1.join(" "));
              }
            }
          }
        }
      }
      if (ax) {
        let b3 = 0;
        let b4 = null;
        for (let b5 of wt(au)) {
          for (let b6 = 0; b6 <= b5.textContent.length; b6 += 1, b3 += 1) {
            if (b3 === ay) {
              av.setStart(b5, b6);
            }
            if (b3 === az) {
              if (b6 === 0 && b4) {
                av.setEnd(b4, b4.textContent.length);
              } else {
                av.setEnd(b5, b6);
              }
            }
          }
          b3 -= 1;
          b4 = b5;
        }
      }
    })(af);
    ht(af, new DOMPoint(0, 0), "userSpaceOnUse");
    let ap = Fe(lt(af), ah);
    let aq = document.createDocumentFragment();
    let ar = af.querySelectorAll("tspan");
    for (let au of ar) {
      let av;
      let aw = vt(au).filter((aF) => aF !== "​");
      let ax = getComputedStyle(au);
      let ay = /[\u0590-\u05FF]/.test(aw.join(""));
      let az = /[\u0600-\u06FF]/.test(aw.join(""));
      let aA = parseFloat(ax.getPropertyValue("font-size"));
      let aB = ax.getPropertyValue("font-weight");
      let aC = ax.getPropertyValue("font-style");
      let aD = ax.getPropertyValue("text-decoration");
      let aE = [...ne.fromString(ax.fontFamily).items, ...ee[an]];
      for (let aF of aE) {
        if (ze(am, aF, aB, aC) !== null) {
          av = aF;
          break;
        }
        if (ze(al, aF, aB, aC) !== null) {
          av = aF;
          break;
        }
      }
      if (av) {
        let aG = [];
        {
          let aI;
          let aJ;
          let aK = aB;
          let aL = aC;
          for (let aM of aE) {
            let aN = ze(al, aM, aK, aL);
            let aO = ze(am, aM, aK, aL);
            if (aN) {
              aI = await Me(aN);
              break;
            }
            if (aO) {
              aI = await Me(aO);
              break;
            }
          }
          if (aI.fonts) {
            aI = aI.fonts[0];
          }
          {
            let aP = aw.join("");
            aJ = ay
              ? aI.layout(aP, "hebr", "hr", "ltr")
              : az
              ? aI.layout(aP, "arab", "ar", "ltr")
              : aI.layout(aP);
          }
          for (let aQ = 0, aR = 0; aQ < aJ.glyphs.length; aQ += 1) {
            aw[aR];
            let aS = aJ.glyphs[aQ];
            let aT = aw.join("").substr(aR, aS.codePoints.length);
            let aU = aI;
            if (aS.id === 0) {
              for (let aV of aE) {
                let aW;
                let aX = ze(al, aV, aK, aL);
                let aY = ze(am, aV, aK, aL);
                if (aX) {
                  aW = await Me(aX);
                } else if (aY) {
                  aW = await Me(aY);
                }
                if (aW) {
                  if (aW.fonts) {
                    aW = aW.fonts[0];
                  }
                  let aZ = aW.glyphsForString(aT)[0];
                  if (aZ && aZ.id !== 0) {
                    aS = aZ;
                    aU = aW;
                    break;
                  }
                }
              }
            }
            if (aR < au.getNumberOfChars()) {
              let b0 = au.getStartPositionOfChar(aR);
              let b1 = au.getEndPositionOfChar(aR);
              let b2 = au.getRotationOfChar(aR);
              if (aB === "700") {
                aU["OS/2"].usWeightClass;
              }
              let b3 =
                ["italic", "oblique"].includes(aC) &&
                aU["OS/2"].fsSelection.italic === false &&
                aU.italicAngle === 0;
              let b4 = aS.advanceWidth;
              let b5 = aU.hhea.ascent;
              let b6 = aU.hhea.descent;
              let b7 = b5 / 20;
              let b8 = (1 / aU.head.unitsPerEm) * aA;
              let b9 = Ae(aS);
              if (aD.includes("underline")) {
                let bc = b4;
                let bd = b7;
                let bf = b6 / 3;
                b9.push(
                  {
                    type: "M",
                    values: [0, bf],
                  },
                  {
                    type: "L",
                    values: [bc, bf],
                  },
                  {
                    type: "L",
                    values: [bc, bf - bd],
                  },
                  {
                    type: "L",
                    values: [0, bf - bd],
                  },
                  {
                    type: "Z",
                    values: [],
                  }
                );
              }
              if (aD.includes("overline")) {
                let bg = b4;
                let bh = b7;
                let bj = b5 - b7;
                b9.push(
                  {
                    type: "M",
                    values: [0, bj],
                  },
                  {
                    type: "L",
                    values: [bg, bj],
                  },
                  {
                    type: "L",
                    values: [bg, bj - bh],
                  },
                  {
                    type: "L",
                    values: [0, bj - bh],
                  },
                  {
                    type: "Z",
                    values: [],
                  }
                );
              }
              if (aD.includes("line-through")) {
                let bk = b4;
                let bl = b7;
                let bm = (b5 + b6) / 2;
                b9.push(
                  {
                    type: "M",
                    values: [0, bm],
                  },
                  {
                    type: "L",
                    values: [bk, bm],
                  },
                  {
                    type: "L",
                    values: [bk, bm - bl],
                  },
                  {
                    type: "L",
                    values: [0, bm - bl],
                  },
                  {
                    type: "Z",
                    values: [],
                  }
                );
              }
              let bb = [];
              for (let bn of b9) {
                let bp = new DOMMatrix();
                if (az || ay) {
                  bp.translateSelf(b1.x, b1.y);
                } else {
                  bp.translateSelf(b0.x, b0.y);
                }
                let bq = b3 ? -14 : 0;
                bp.rotateSelf(b2);
                bp = ut(bp, bq, 0, 0, 0);
                bp.scaleSelf(b8, -b8, 1, 0, 0);
                if (bn.type === "M") {
                  let [br, bu] = bn.values;
                  let bv = new DOMPoint(br, bu).matrixTransform(bp);
                  bn.values = [bv.x, bv.y];
                } else if (bn.type === "L") {
                  let [bw, bx] = bn.values;
                  let by = new DOMPoint(bw, bx).matrixTransform(bp);
                  bn.values = [by.x, by.y];
                } else if (bn.type === "Q") {
                  let [bz, bA, bB, bC] = bn.values;
                  let bD = new DOMPoint(bz, bA).matrixTransform(bp);
                  let bE = new DOMPoint(bB, bC).matrixTransform(bp);
                  bn.values = [bD.x, bD.y, bE.x, bE.y];
                } else if (bn.type === "C") {
                  let [bF, bG, bH, bI, bJ, bK] = bn.values;
                  let bL = new DOMPoint(bF, bG).matrixTransform(bp);
                  let bM = new DOMPoint(bH, bI).matrixTransform(bp);
                  let bN = new DOMPoint(bJ, bK).matrixTransform(bp);
                  bn.values = [bL.x, bL.y, bM.x, bM.y, bN.x, bN.y];
                }
                bn.values = bn.values.map((bO) => z(bO, ag));
                bb.push(bn);
              }
              if (bb.length > 0) {
                aG.push(bb);
              }
            }
            aR += aS.codePoints.length;
          }
        }
        let aH = [];
        if (aj === true) {
          for (let bO of aG) {
            aH.push(bO);
          }
        } else {
          let bP = [];
          for (let bQ of aG) {
            for (let bR of bQ) {
              bP.push(bR);
            }
          }
          aH.push(bP);
        }
        for (let bS of aH) {
          let bT = ei("svg:path");
          bT.setPathData(bS);
          if (ap.isIdentity === false) {
            rt(bT, ap);
          }
          for (let bU of af.style) {
            if (E.includes(bU) === false) {
              bT.style.setProperty(bU, af.style.getPropertyValue(bU));
            }
          }
          for (let bV of au.style) {
            if (E.includes(bV) === false) {
              bT.style.setProperty(bV, au.style.getPropertyValue(bV));
            }
          }
          aq.append(bT);
        }
      }
    }
    if (aq.children.length > 0) {
      let bW = [...aq.children];
      af.replaceWith(aq);
      ak(bW);
    } else {
      ak(null);
    }
  });
let St = (af, ag = true) => {
  let ah = new DOMRect(0, 0, 0, 0);
  let aj = ag
    ? ((ak) => {
        let al = null;
        if (y.includes(ak.localName)) {
          let am = getComputedStyle(ak).clipPath;
          if (am && am !== "none") {
            let an = am.substring(6, am.length - 2);
            let ap = ti(ak).querySelector("#" + CSS.escape(an)) || null;
            if (ap?.localName === "clipPath" && ap !== ak) {
              al = ap;
            }
          }
        }
        return al;
      })(af)
    : null;
  if (aj) {
    let ak = St(af, false);
    let al = Rt(St(aj), lt(aj));
    ah = Ft(ak, al);
  } else if (af.localName === "tspan") {
    let am = wt(af);
    let an = document.createRange();
    if (am.length > 0) {
      an.setStart(am[0], 0);
      an.setEnd(am[am.length - 1], am[am.length - 1].length);
    }
    if (an.collapsed === false) {
      let ap = an.startContainer.closest("text");
      let [, aq] = kt(an.startContainer, an.startOffset);
      let [, ar] = kt(an.endContainer, an.endOffset);
      let au = [];
      for (let av = aq; av < ar; av += 1) {
        let aw = ap.getExtentOfChar(av);
        au.push(aw);
      }
      ah = It(au);
    }
  } else if (af.localName === "use") {
    ah = new DOMRect(0, 0, af.width.baseVal.value, af.height.baseVal.value);
  } else if (af.localName === "clipPath") {
    let ax = [];
    for (let ay of af.children) {
      if (v.includes(ay.localName)) {
        let az = Rt(DOMRect.fromRect(ay.getBBox()), lt(ay));
        ax.push(az);
      }
    }
    if (ax.length > 0) {
      ah = It(ax);
    }
  } else {
    ah = DOMRect.fromRect(af.getBBox());
  }
  return ah;
};
let { sin, cos, acos, atan2, abs: Lt, sqrt, pow, PI: zt, min, max } = Math;
document.createElementNS("http://www.w3.org/2000/svg", "svg");
let Bt = (af) => (zt * af) / 180;
let Rt = (af, ag) => {
  let ah = [
    new DOMPoint(af.x, af.y),
    new DOMPoint(af.x + af.width, af.y),
    new DOMPoint(af.x + af.width, af.y + af.height),
    new DOMPoint(af.x, af.y + af.height),
  ].map((aq) => aq.matrixTransform(ag));
  let aj = ah.map((aq) => aq.x);
  let ak = ah.map((aq) => aq.y);
  let al = min(...aj);
  let am = min(...ak);
  let an = max(...aj);
  let ap = max(...ak);
  return new DOMRect(al, am, an - al, ap - am);
};
let It = (af) => {
  if (af.length === 0) {
    return new DOMRect(0, 0, 0, 0);
  }
  if (af.length === 1) {
    let ag = af[0];
    return new DOMRect(ag.x, ag.y, ag.width, ag.height);
  }
  {
    let ah = Math.min(...af.map((am) => am.x));
    let aj = Math.min(...af.map((am) => am.y));
    let ak = Math.max(...af.map((am) => am.x + am.width));
    let al = Math.max(...af.map((am) => am.y + am.height));
    return new DOMRect(ah, aj, ak - ah, al - aj);
  }
};
let Ft = (af, ag) => {
  let ah = Math.max(af.left, ag.left);
  let aj = Math.min(af.right, ag.right);
  let ak = Math.max(af.top, ag.top);
  let al = Math.min(af.bottom, ag.bottom);
  return new DOMRect(ah, ak, aj - ah, al - ak);
};
let Nt = (af, ag) =>
  ag.x >= af.x &&
  ag.x <= af.x + af.width &&
  ag.y >= af.y &&
  ag.y <= af.y + af.height;
let Ot = (af, ag) =>
  af.left <= ag.right &&
  ag.left <= af.right &&
  af.top <= ag.bottom &&
  ag.top <= af.bottom;
let _t = (af) => {
  {
    let ag = 0;
    let ah = [...af.children].filter((aj) => aj.localName === "stop");
    for (let aj of ah) {
      if (aj.hasAttribute("offset")) {
        let ak = aj.offset.baseVal;
        if (ak < ag) {
          ak = ag;
        }
        ak = M(ak, 0, 1, 4);
        ag = ak;
        aj.setAttribute("offset", ak);
      }
    }
  }
};
let qt = (af) => {
  {
    let ag = 0;
    let ah = [...af.children].filter((aj) => aj.localName === "stop");
    for (let aj of ah) {
      if (aj.hasAttribute("offset")) {
        let ak = aj.offset.baseVal;
        if (ak < ag) {
          ak = ag;
        }
        ak = M(ak, 0, 1, 4);
        ag = ak;
        aj.setAttribute("offset", ak);
      }
    }
  }
  af.removeAttribute("fx");
  af.removeAttribute("fy");
  af.removeAttribute("fr");
};
const jt = [
  ["#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"],
  ["#e63946", "#f1faee", "#a8dadc", "#457b9d", "#1d3557"],
  ["#ffcdb2", "#ffb4a2", "#e5989b", "#b5838d", "#6d6875"],
  ["#000000", "#14213d", "#fca311", "#e5e5e5", "#ffffff"],
  ["#003049", "#d62828", "#f77f00", "#fcbf49", "#eae2b7"],
  ["#f4f1de", "#e07a5f", "#3d405b", "#81b29a", "#f2cc8f"],
  ["#606c38", "#283618", "#fefae0", "#dda15e", "#bc6c25"],
  ["#006d77", "#83c5be", "#edf6f9", "#ffddd2", "#e29578"],
  ["#ef476f", "#ffd166", "#06d6a0", "#118ab2", "#073b4c"],
  ["#2b2d42", "#8d99ae", "#edf2f4", "#ef233c", "#d90429"],
  ["#ffb5a7", "#fcd5ce", "#f8edeb", "#f9dcc4", "#fec89a"],
  ["#ffbe0b", "#fb5607", "#ff006e", "#8338ec", "#3a86ff"],
  ["#f6bd60", "#f7ede2", "#f5cac3", "#84a59d", "#f28482"],
  ["#8ecae6", "#219ebc", "#023047", "#ffb703", "#fb8500"],
  ["#d8e2dc", "#ffe5d9", "#ffcad4", "#f4acb7", "#9d8189"],
  ["#3d5a80", "#98c1d9", "#e0fbfc", "#ee6c4d", "#293241"],
  ["#22223b", "#4a4e69", "#9a8c98", "#c9ada7", "#f2e9e4"],
  ["#05668d", "#028090", "#00a896", "#02c39a", "#f0f3bd"],
  ["#8e9aaf", "#cbc0d3", "#efd3d7", "#feeafa", "#dee2ff"],
  ["#cdb4db", "#ffc8dd", "#ffafcc", "#bde0fe", "#a2d2ff"],
  ["#011627", "#fdfffc", "#2ec4b6", "#e71d36", "#ff9f1c"],
  ["#1a535c", "#4ecdc4", "#f7fff7", "#ff6b6b", "#ffe66d"],
  ["#ffa69e", "#faf3dd", "#b8f2e6", "#aed9e0", "#5e6472"],
  ["#ccd5ae", "#e9edc9", "#fefae0", "#faedcd", "#d4a373"],
  ["#335c67", "#fff3b0", "#e09f3e", "#9e2a2b", "#540b0e"],
  ["#cad2c5", "#84a98c", "#52796f", "#354f52", "#2f3e46"],
  ["#355070", "#6d597a", "#b56576", "#e56b6f", "#eaac8b"],
  ["#ff9f1c", "#ffbf69", "#ffffff", "#cbf3f0", "#2ec4b6"],
  ["#5f0f40", "#9a031e", "#fb8b24", "#e36414", "#0f4c5c"],
  ["#f08080", "#f4978e", "#f8ad9d", "#fbc4ab", "#ffdab9"],
  ["#555b6e", "#89b0ae", "#bee3db", "#faf9f9", "#ffd6ba"],
  ["#0081a7", "#00afb9", "#fdfcdc", "#fed9b7", "#f07167"],
  ["#f72585", "#7209b7", "#3a0ca3", "#4361ee", "#4cc9f0"],
  ["#03045e", "#0077b6", "#00b4d8", "#90e0ef", "#caf0f8"],
  ["#463f3a", "#8a817c", "#bcb8b1", "#f4f3ee", "#e0afa0"],
  ["#353535", "#3c6e71", "#ffffff", "#d9d9d9", "#284b63"],
  ["#ecf8f8", "#eee4e1", "#e7d8c9", "#e6beae", "#b2967d"],
  ["#283d3b", "#197278", "#edddd4", "#c44536", "#772e25"],
  ["#d4e09b", "#f6f4d2", "#cbdfbd", "#f19c79", "#a44a3f"],
  ["#cfdbd5", "#e8eddf", "#f5cb5c", "#242423", "#333533"],
  ["#7bdff2", "#b2f7ef", "#eff7f6", "#f7d6e0", "#f2b5d4"],
  ["#50514f", "#f25f5c", "#ffe066", "#247ba0", "#70c1b3"],
  ["#9c89b8", "#f0a6ca", "#efc3e6", "#f0e6ef", "#b8bedd"],
  ["#588b8b", "#ffffff", "#ffd5c2", "#f28f3b", "#c8553d"],
  ["#c9cba3", "#ffe1a8", "#e26d5c", "#723d46", "#472d30"],
  ["#247ba0", "#70c1b3", "#b2dbbf", "#f3ffbd", "#ff1654"],
  ["#ff595e", "#ffca3a", "#8ac926", "#1982c4", "#6a4c93"],
  ["#ffffff", "#84dcc6", "#a5ffd6", "#ffa69e", "#ff686b"],
  ["#0b132b", "#1c2541", "#3a506b", "#5bc0be", "#6fffe9"],
  ["#390099", "#9e0059", "#ff0054", "#ff5400", "#ffbd00"],
  ["#f7b267", "#f79d65", "#f4845f", "#f27059", "#f25c54"],
  ["#00296b", "#003f88", "#00509d", "#fdc500", "#ffd500"],
  ["#6f1d1b", "#bb9457", "#432818", "#99582a", "#ffe6a7"],
  ["#70d6ff", "#ff70a6", "#ff9770", "#ffd670", "#e9ff70"],
  ["#fe938c", "#e6b89c", "#ead2ac", "#9cafb7", "#4281a4"],
  ["#dad7cd", "#a3b18a", "#588157", "#3a5a40", "#344e41"],
  ["#fffcf2", "#ccc5b9", "#403d39", "#252422", "#eb5e28"],
  ["#ffffff", "#00171f", "#003459", "#007ea7", "#00a8e8"],
  ["#233d4d", "#fe7f2d", "#fcca46", "#a1c181", "#619b8a"],
  ["#0d3b66", "#faf0ca", "#f4d35e", "#ee964b", "#f95738"],
  ["#ff99c8", "#fcf6bd", "#d0f4de", "#a9def9", "#e4c1f9"],
  ["#4f000b", "#720026", "#ce4257", "#ff7f51", "#ff9b54"],
  ["#001427", "#708d81", "#f4d58d", "#bf0603", "#8d0801"],
  ["#eee2df", "#eed7c5", "#c89f9c", "#c97c5d", "#b36a5e"],
  ["#220901", "#621708", "#941b0c", "#bc3908", "#f6aa1c"],
  ["#0d1b2a", "#1b263b", "#415a77", "#778da9", "#e0e1dd"],
  ["#f7d1cd", "#e8c2ca", "#d1b3c4", "#b392ac", "#735d78"],
  ["#6b9080", "#a4c3b2", "#cce3de", "#eaf4f4", "#f6fff8"],
  ["#386641", "#6a994e", "#a7c957", "#f2e8cf", "#bc4749"],
  ["#ffac81", "#ff928b", "#fec3a6", "#efe9ae", "#cdeac0"],
  ["#540d6e", "#ee4266", "#ffd23f", "#3bceac", "#0ead69"],
  ["#ecc8af", "#e7ad99", "#ce796b", "#c18c5d", "#495867"],
  ["#16697a", "#489fb5", "#82c0cc", "#ede7e3", "#ffa62b"],
  ["#ed6a5a", "#f4f1bb", "#9bc1bc", "#5ca4a9", "#e6ebe0"],
  ["#64a6bd", "#90a8c3", "#ada7c9", "#d7b9d5", "#f4cae0"],
  ["#565264", "#706677", "#a6808c", "#ccb7ae", "#d6cfcb"],
  ["#2d3142", "#bfc0c0", "#ffffff", "#ef8354", "#4f5d75"],
  ["#495867", "#577399", "#bdd5ea", "#f7f7ff", "#fe5f55"],
  ["#2d3142", "#4f5d75", "#bfc0c0", "#ffffff", "#ef8354"],
  ["#177e89", "#084c61", "#db3a34", "#ffc857", "#323031"],
  ["#f9dbbd", "#ffa5ab", "#da627d", "#a53860", "#450920"],
  ["#227c9d", "#17c3b2", "#ffcb77", "#fef9ef", "#fe6d73"],
  ["#114b5f", "#1a936f", "#88d498", "#c6dabf", "#f3e9d2"],
  ["#9381ff", "#b8b8ff", "#f8f7ff", "#ffeedd", "#ffd8be"],
  ["#ffbc42", "#d81159", "#8f2d56", "#218380", "#73d2de"],
  ["#bee9e8", "#62b6cb", "#1b4965", "#cae9ff", "#5fa8d3"],
  ["#3d348b", "#7678ed", "#f7b801", "#f18701", "#f35b04"],
  ["#07beb8", "#3dccc7", "#68d8d6", "#9ceaef", "#c4fff9"],
  ["#dcdcdd", "#c5c3c6", "#46494c", "#4c5c68", "#1985a1"],
  ["#fdc5f5", "#f7aef8", "#b388eb", "#8093f1", "#72ddf7"],
  ["#bce784", "#5dd39e", "#348aa7", "#525174", "#513b56"],
  ["#001524", "#15616d", "#ffecd1", "#ff7d00", "#78290f"],
  ["#231942", "#5e548e", "#9f86c0", "#be95c4", "#e0b1cb"],
  ["#461220", "#8c2f39", "#b23a48", "#fcb9b2", "#fed0bb"],
  ["#f9c80e", "#f86624", "#ea3546", "#662e9b", "#43bccd"],
  ["#c9e4ca", "#87bba2", "#55828b", "#3b6064", "#364958"],
  ["#0a0908", "#22333b", "#eae0d5", "#c6ac8f", "#5e503f"],
  ["#132a13", "#31572c", "#4f772d", "#90a955", "#ecf39e"],
  ["#edeec9", "#dde7c7", "#bfd8bd", "#98c9a3", "#77bfa3"],
  ["#0c0f0a", "#ff206e", "#fbff12", "#41ead4", "#ffffff"],
  ["#f0ead2", "#dde5b6", "#adc178", "#a98467", "#6c584c"],
  ["#d0b8ac", "#f3d8c7", "#efe5dc", "#fbfefb", "#ffffff"],
  ["#cc5803", "#e2711d", "#ff9505", "#ffb627", "#ffc971"],
  ["#edafb8", "#f7e1d7", "#dedbd2", "#b0c4b1", "#4a5759"],
  ["#ee6055", "#60d394", "#aaf683", "#ffd97d", "#ff9b85"],
  ["#5bc0eb", "#fde74c", "#9bc53d", "#e55934", "#fa7921"],
  ["#3c1642", "#086375", "#1dd3b0", "#affc41", "#b2ff9e"],
  ["#e0fbfc", "#c2dfe3", "#9db4c0", "#5c6b73", "#253237"],
  ["#90f1ef", "#ffd6e0", "#ffef9f", "#c1fba4", "#7bf1a8"],
  ["#ef6351", "#f38375", "#f7a399", "#fbc3bc", "#ffe3e0"],
  ["#000814", "#001d3d", "#003566", "#ffc300", "#ffd60a"],
  ["#2c6e49", "#4c956c", "#fefee3", "#ffc9b9", "#d68c45"],
  ["#484a47", "#5c6d70", "#a37774", "#e88873", "#e0ac9d"],
  ["#edae49", "#d1495b", "#00798c", "#30638e", "#003d5b"],
  ["#202c39", "#283845", "#b8b08d", "#f2d492", "#f29559"],
  ["#0b3954", "#087e8b", "#bfd7ea", "#ff5a5f", "#c81d25"],
  ["#e7ecef", "#274c77", "#6096ba", "#a3cef1", "#8b8c89"],
  ["#ff6700", "#ebebeb", "#c0c0c0", "#3a6ea5", "#004e98"],
  ["#083d77", "#ebebd3", "#f4d35e", "#ee964b", "#f95738"],
  ["#250902", "#38040e", "#640d14", "#800e13", "#ad2831"],
  ["#dd6e42", "#e8dab2", "#4f6d7a", "#c0d6df", "#eaeaea"],
  ["#fbfbf2", "#e5e6e4", "#cfd2cd", "#a6a2a2", "#847577"],
  ["#ffc09f", "#ffee93", "#fcf5c7", "#a0ced9", "#adf7b6"],
  ["#a3a380", "#d6ce93", "#efebce", "#d8a48f", "#bb8588"],
  ["#00a6fb", "#0582ca", "#006494", "#003554", "#051923"],
  ["#cebebe", "#ece2d0", "#d5b9b2", "#a26769", "#6d2e46"],
  ["#2b2d42", "#8d99ae", "#edf2f4", "#ef233c", "#d80032"],
  ["#780116", "#f7b538", "#db7c26", "#d8572a", "#c32f27"],
  ["#ff6b35", "#f7c59f", "#efefd0", "#004e89", "#1a659e"],
  ["#d7263d", "#f46036", "#2e294e", "#1b998b", "#c5d86d"],
  ["#8cb369", "#f4e285", "#f4a259", "#5b8e7d", "#bc4b51"],
  ["#d3f8e2", "#e4c1f9", "#f694c1", "#ede7b1", "#a9def9"],
  ["#006ba6", "#0496ff", "#ffbc42", "#d81159", "#8f2d56"],
  ["#ffd6ff", "#e7c6ff", "#c8b6ff", "#b8c0ff", "#bbd0ff"],
  ["#55dde0", "#33658a", "#2f4858", "#f6ae2d", "#f26419"],
  ["#002642", "#840032", "#e59500", "#e5dada", "#02040f"],
  ["#585123", "#eec170", "#f2a65a", "#f58549", "#772f1a"],
  ["#e8d6cb", "#d0ada7", "#ad6a6c", "#5d2e46", "#b58db6"],
  ["#011627", "#f71735", "#41ead4", "#fdfffc", "#ff9f1c"],
  ["#cc8b86", "#f9eae1", "#7d4f50", "#d1be9c", "#aa998f"],
  ["#7a6c5d", "#2a3d45", "#ddc9b4", "#bcac9b", "#c17c74"],
  ["#0a1128", "#001f54", "#034078", "#1282a2", "#fefcfb"],
  ["#ffffff", "#ffcad4", "#b0d0d3", "#c08497", "#f7af9d"],
  ["#d88c9a", "#f2d0a9", "#f1e3d3", "#99c1b9", "#8e7dbe"],
  ["#05668d", "#427aa1", "#ebf2fa", "#679436", "#a5be00"],
  ["#2f4858", "#33658a", "#86bbd8", "#f6ae2d", "#f26419"],
  ["#f8ffe5", "#06d6a0", "#1b9aaa", "#ef476f", "#ffc43d"],
  ["#25ced1", "#ffffff", "#fceade", "#ff8a5b", "#ea526f"],
  ["#6f2dbd", "#a663cc", "#b298dc", "#b8d0eb", "#b9faf8"],
  ["#031d44", "#04395e", "#70a288", "#dab785", "#d5896f"],
  ["#1a1423", "#372549", "#774c60", "#b75d69", "#eacdc2"],
  ["#f79256", "#fbd1a2", "#7dcfb6", "#00b2ca", "#1d4e89"],
  ["#223843", "#eff1f3", "#dbd3d8", "#d8b4a0", "#d77a61"],
  ["#114b5f", "#028090", "#e4fde1", "#456990", "#f45b69"],
  ["#160f29", "#246a73", "#368f8b", "#f3dfc1", "#ddbea8"],
  ["#06aed5", "#086788", "#f0c808", "#fff1d0", "#dd1c1a"],
  ["#f3e9dc", "#c08552", "#5e3023", "#895737", "#dab49d"],
  ["#b0d0d3", "#c08497", "#f7af9d", "#f7e3af", "#f3eec3"],
  ["#b09e99", "#fee9e1", "#fad4c0", "#64b6ac", "#c0fdfb"],
  ["#292f36", "#4ecdc4", "#f7fff7", "#ff6b6b", "#ffe66d"],
  ["#0d1321", "#1d2d44", "#3e5c76", "#748cab", "#f0ebd8"],
  ["#1f2041", "#4b3f72", "#ffc857", "#119da4", "#19647e"],
  ["#f2d7ee", "#d3bcc0", "#a5668b", "#69306d", "#0e103d"],
  ["#a4243b", "#d8c99b", "#d8973c", "#bd632f", "#273e47"],
  ["#ff5e5b", "#d8d8d8", "#ffffea", "#00cecb", "#ffed66"],
  ["#2364aa", "#3da5d9", "#73bfb8", "#fec601", "#ea7317"],
  ["#f6511d", "#ffb400", "#00a6ed", "#7fb800", "#0d2c54"],
  ["#efc7c2", "#ffe5d4", "#bfd3c1", "#68a691", "#694f5d"],
  ["#022b3a", "#1f7a8c", "#bfdbf7", "#e1e5f2", "#ffffff"],
  ["#11151c", "#212d40", "#364156", "#7d4e57", "#d66853"],
  ["#000000", "#2f4550", "#586f7c", "#b8dbd9", "#f4f4f9"],
  ["#586ba4", "#324376", "#f5dd90", "#f68e5f", "#f76c5e"],
  ["#26547c", "#ef476f", "#ffd166", "#06d6a0", "#fffcf9"],
  ["#033f63", "#28666e", "#7c9885", "#b5b682", "#fedc97"],
  ["#ea8c55", "#c75146", "#ad2e24", "#81171b", "#540804"],
  ["#809bce", "#95b8d1", "#b8e0d2", "#d6eadf", "#eac4d5"],
  ["#01161e", "#124559", "#598392", "#aec3b0", "#eff6e0"],
  ["#533747", "#5f506b", "#6a6b83", "#76949f", "#86bbbd"],
  ["#b8d8ba", "#d9dbbc", "#fcddbc", "#ef959d", "#69585f"],
  ["#666a86", "#788aa3", "#92b6b1", "#b2c9ab", "#e8ddb5"],
  ["#faa275", "#ff8c61", "#ce6a85", "#985277", "#5c374c"],
  ["#faf3dd", "#c8d5b9", "#8fc0a9", "#68b0ab", "#4a7c59"],
  ["#004e64", "#00a5cf", "#9fffcb", "#25a18e", "#7ae582"],
  ["#133c55", "#386fa4", "#59a5d8", "#84d2f6", "#91e5f6"],
  ["#432371", "#714674", "#9f6976", "#cc8b79", "#faae7b"],
  ["#ddd8c4", "#a3c9a8", "#84b59f", "#69a297", "#50808e"],
  ["#d8dbe2", "#a9bcd0", "#58a4b0", "#373f51", "#1b1b1e"],
  ["#ddfff7", "#93e1d8", "#ffa69e", "#aa4465", "#462255"],
  ["#042a2b", "#5eb1bf", "#cdedf6", "#ef7b45", "#d84727"],
  ["#33658a", "#86bbd8", "#2f4858", "#f6ae2d", "#f26419"],
];
let Vt = (af) => {
  let ag = 0;
  let ah = [
    "#7b1fa2",
    "#4a148c",
    "#299fff",
    "#107dc0",
    "#00838f",
    "#17b978",
    "#13c3c0",
    "#2e7d32",
    "#7cb342",
    "#c2cb73",
    "#f57f17",
    "#ffc107",
    "#f4511e",
    "#d32f2f",
    "#ec407a",
    "#89a3b2",
    "#8d6e63",
  ];
  for (let aj of af) {
    if (aj === ":") {
      break;
    }
    ag += aj.charCodeAt(0);
  }
  return ah[ag % ah.length];
};
let Gt = (af) => {
  let ag = ti(af);
  if (af.hasAttribute("id") === false) {
    let ah = 0;
    while (ag.querySelector("#pattern-" + ah) !== null) {
      ah += 1;
    }
    af.setAttribute("id", "pattern-" + ah);
  }
};
let Ht = (af = 0, ag = 100, ah = 0, aj = null) => {
  let ak = af + (aj ? new a5(aj) : Math.random)() * (ag - af);
  return z(ak, ah);
};
let Wt = (af, ag = "hex") => {
  let ah = 2166136261;
  for (let aj = 0, ak = af.length; aj < ak; aj += 1) {
    ah ^= af.charCodeAt(aj);
    ah += (ah << 1) + (ah << 4) + (ah << 7) + (ah << 8) + (ah << 24);
  }
  ah >>>= 0;
  if (ag === "hex") {
    ah = ("0000000" + ah.toString(16)).substr(-8);
  }
  return ah;
};
let Kt = (af = 10) => {
  let ag = "";
  let ah = crypto.getRandomValues(new Uint8Array(af));
  while (af-- > 0) {
    ag += "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[
      ah[af] & 63
    ];
  }
  return ag;
};
let Zt = (af) => {
  let ag = false;
  if (af.hasAttribute("data-bx-d")) {
    let ah = af.getAttribute("d");
    let aj = af
      .getAttribute("data-bx-d")
      .trim()
      .split(/[\s+,]+/);
    if (aj.length >= 3) {
      let ak = aj.slice(0, aj.length - 1);
      let al = aj[aj.length - 1];
      if (al.includes("@")) {
        let [am, an] = al.split("@");
        if (an === Wt(ah + " / " + ak.join(" ") + " " + am).toString(32)) {
          ag = true;
        }
      }
    }
  }
  return ag;
};
let Yt = (af) => {
  if (af.hasAttribute("href")) {
    let ag = af.getAttribute("href");
    let ah = ti(af).querySelector(ag);
    if (ah) {
      ah.append(af);
    }
    af.removeAttribute("href");
  }
  if (af.hasAttribute("repeatDur")) {
    if (af.hasAttribute("max") === false) {
      let aj = Xt(af);
      if (
        aj.length === 1 &&
        aj[0].type === "<offset-value>" &&
        aj[0].seconds === 0
      ) {
        af.setAttribute("max", af.getAttribute("repeatDur"));
      }
    }
    af.removeAttribute("repeatDur");
  }
  if (af.hasAttribute("by")) {
    if (af.hasAttribute("to") === false) {
      af.setAttribute("to", af.getAttribute("by"));
    }
    af.removeAttribute("by");
  }
  if (af.hasAttribute("attributeType")) {
    af.removeAttribute("attributeType");
  }
  if (af.hasAttribute("min")) {
    af.removeAttribute("min");
  }
  if (af.getAttribute("dur") === "media") {
    af.removeAttribute("dur");
  }
  if (af.getAttribute("max") === "media") {
    af.removeAttribute("max");
  }
};
let Xt = (af) => Jt(af.getAttribute("begin"));
let Jt = (af, ag = false) => {
  let ah = [];
  if (af !== null) {
    let aj = af
      .trim()
      .split(";")
      .map((ak) => ak.trim())
      .filter((ak) => ak !== "");
    for (let ak of aj) {
      if (ak === "indefinite") {
        if (ah.includes("indefinite") === false) {
          ah.push("indefinite");
        }
      } else {
        let al = null;
        for (let am of [N, _, F, O]) {
          al = am.fromString(ak, false, ag);
          if (al !== null) {
            break;
          }
        }
        if (al !== null) {
          if (
            (ah.find((an) => an.compare && an.compare(al)) !== undefined) ===
            false
          ) {
            ah.push(al);
          }
        }
      }
    }
    if (ah.length === 0) {
      ah.push("indefinite");
    }
  } else {
    ah.push(N.fromString("0s"));
  }
  if (ah.includes("indefinite")) {
    ah = ah.length === 1 ? [] : ah.filter((an) => an !== "indefinite");
  }
  return ah;
};
let { parseInt } = Number;
let ei = (af, ag = null) => {
  let ah = af.split(":");
  let aj = null;
  if (ah.length === 1) {
    let [ak] = ah;
    aj = document.createElement(ak, ag);
  } else if (ah.length === 2) {
    let [al, am] = ah;
    if (al === "svg") {
      aj = document.createElementNS(u, am, ag);
    }
  }
  return aj;
};
let ti = (af) => {
  let ag = af.localName === "svg" ? af : null;
  for (let ah = af.ownerSVGElement; ah; ah = ah.ownerSVGElement) {
    ag = ah;
  }
  return ag;
};
let ii = (af) => {
  for (let ag in af.parentElement.children) {
    if (af.parentElement.children[ag] === af) {
      return parseInt(ag);
    }
  }
};
let si = (af, ag, ah = true) => {
  let aj = af.closest(ag);
  if (ah && !aj && af.getRootNode().host) {
    return si(af.getRootNode().host, ag);
  } else {
    return aj;
  }
};
let ai = (af, ag) => {
  let ah = [];
  if (af.length > 0) {
    for (let aj of ag) {
      let ak;
      let al = document.createTreeWalker(aj, NodeFilter.SHOW_TEXT, null, false);
      let am = [];
      while ((ak = al.nextNode())) {
        am.push(ak);
      }
      for (let an of am) {
        for (let ap of af) {
          if (an.textContent.includes(ap)) {
            let aq = an.textContent.indexOf(ap);
            let ar = aq + ap.length;
            let au = new Range();
            au.setStart(an, aq);
            au.setEnd(an, ar);
            ah.push(au);
          }
        }
      }
    }
  }
  return ah;
};
class oi extends HTMLElement {
  static observedAttributes = ["name", "version"];
  static #C = ie` <template> <div id="container"> <header part="header"> <img id="logo" src="./images/boxy-svg.svg" width="80px" height="80px"> <h1 id="name" part="name">Boxy SVG</h1> <h2 id="version"> <x-message href="#version"></x-message> <span id="version-number">0.0.0</span> </h2> </header> <main id="main" part="main"></main> <footer part="footer"> <h2 id="copyright">© 2012-${new Date().getFullYear()} <a href="http://foksa.name/">Jarosław Foksa</a></h2> </footer> </div> </template>
  `;
  static #S = se`
    :host {
      display: block;
      width: 100%;
      height: 100%;
      contain: strict;
    }
    :host(:focus) {
      outline: none;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    #container {
      width: 100%;
      height: 100%;
      display: flex;
      flex-flow: column;
      align-items: center;
      justify-content: center;
      position: relative;
      position: relative;
      overflow: hidden;
      text-align: center;
      font-size: 10px;
      cursor: default;
      user-select: none;
      -webkit-user-select: none;
    }

    #container a {
      color: var(--text-color);
      text-decoration: none;
    }
    #container a:hover {
      cursor: pointer;
      text-decoration: underline;
    }

    /**
     * Header
     */

    #logo {
      margin: 14px 0px 2px
    }

    #name {
      font-size: 16px;
      font-weight: 700;
      margin-bottom: 2px;
      cursor: text;
      width: 100%;
      user-select: text;
      -webkit-user-select: text;
    }

    #version {
      font-size: 12px;
      margin: 0 0 12px 0;
      cursor: text;
      width: 100%;
      user-select: text;
      -webkit-user-select: text;
    }

    /**
     * Main
     */

    #main {
      width: 300px;
      height: 135px;
      overflow: auto;
      border-top-width: 1px;
      border-top-style: solid;
      border-bottom-width: 1px;
      border-bottom-style: solid;
      font-size: 12px;
      padding-left: 7px;
      padding-bottom: 8px;
      flex: 1;
      cursor: text;
      user-select: text;
      -webkit-user-select: text;
    }

    #main h3 {
      font-weight: 700;
      margin: 20px 0 6px 0;
      font-size: 12px;
      text-transform: uppercase;
      opacity: 0.8;
    }
    #main h3:first-child {
      margin-top: 15px;
    }

    #main ul,
    #main li {
      margin: 0;
      padding: 0;
    }

    #main dt,
    #main dt a {
      font-weight: 600;
    }

    #main dd {
      margin-bottom: 9px;
    }

    #main #libraries li:not(:last-child),
    #main #frameworks li:not(:last-child) {
      margin-bottom: 3px;
    }

    /**
     * Footer
     */

    #copyright {
      width: 100%;
      margin: 10px 0 11px 0;
      font-size: 11px;
      cursor: text;
      user-select: text;
      -webkit-user-select: text;
    }
  `;
  get name() {
    if (this.hasAttribute("name")) {
      return this.getAttribute("name");
    } else {
      return "Boxy SVG";
    }
  }
  set name(af) {
    this.setAttribute("name", af);
  }
  get version() {
    if (this.hasAttribute("version")) {
      return this.getAttribute("version");
    } else {
      return "0.0.0";
    }
  }
  set version(af) {
    this.setAttribute("version", af);
  }
  commands = {};
  #T;
  #$;
  #P;
  #E = 0;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "open",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, oi.#S];
    this.#P.append(document.importNode(oi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.setAttribute("tabindex", "0");
    this["#main"].addEventListener("scroll", () => this.#L());
    this.addEventListener("keydown", (ag) => {
      if (ag.code === "Escape" && ag.defaultPrevented === false && this.#$) {
        this.#$.close();
      }
    });
  }
  async connectedCallback() {
    this.#T = si(this, "#app");
    this.#$ = si(this, "dialog");
    if (this["#main"].firstElementChild === null) {
      this["#main"].innerHTML = await (
        await fetch("./templates/about.tpl")
      ).text();
      let af = this.#T.localName.endsWith("webapp");
      for (let ag of this["#main"].querySelectorAll("a")) {
        ag.setAttribute("rel", "noopener");
        if (af) {
          ag.setAttribute("target", "_blank");
        }
      }
    }
    this["#main"].scrollTop = this.#E;
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah) {
      if (af === "name") {
        this["#name"].textContent = this.name;
      } else if (af === "version") {
        this["#version-number"].textContent = this.version;
      }
    }
  }
  #L() {
    this.#E = this["#main"].scrollTop;
  }
}
customElements.define("bx-about", oi);
class ni extends HTMLElement {
  static observedAttributes = ["enabled"];
  static _shadowStyleSheet = se`:host{display:none;width:100%}:host([enabled]){display:block}h2:first-child{margin-top:0}p{font-size:13px;line-height:1.4;margin:5px 0 8px 0}section+hr{margin:20px 0}section[hidden]+hr{display:none}`;
  get enabled() {
    return this.hasAttribute("enabled");
  }
  set enabled(af) {
    if (af) {
      this.setAttribute("enabled", "");
    } else {
      this.removeAttribute("enabled");
    }
  }
  _shadowRoot;
  o;
  constructor() {
    super();
    this._shadowRoot = this.attachShadow({
      mode: "closed",
    });
    this._shadowRoot.append(
      document.importNode(this.constructor._shadowTemplate.content, true)
    );
    this._shadowRoot.adoptedStyleSheets = [
      a2.themeStyleSheet,
      ni._shadowStyleSheet,
      this.constructor._shadowStyleSheet,
    ];
    for (let af of this._shadowRoot.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.setAttribute("extends", "bx-appsettings");
  }
  connectedCallback() {
    this.o = si(this, "#app");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "enabled") {
      if (this.enabled) {
        this.l();
      } else {
        this.h();
      }
    }
  }
  l() {}
  h() {}
}
class li extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#general" autocapitalize></x-message></h2> <section id="hardware-acceleration-section"> <h3><x-message href="#hardware-acceleration" autocapitalize></x-message></h3> <p><x-message href="#hardware-acceleration-hint"></x-message></p> <x-checkbox id="hardware-acceleration-checkbox" toggled> <x-label><x-message href="#hardware-acceleration"></x-message></x-label> </x-checkbox> </section> <hr> <section id="recent-files-section" hidden> <h3><x-message href="#recent-files" autocapitalize></x-message></h3> <p><x-message href="#recent-files-hint"></x-message></p> <x-select id="recent-files-select"> <x-menu id="recent-files-menu"> <x-menuitem value="5"><x-label>5</x-label></x-menuitem> <x-menuitem value="10"><x-label>10</x-label></x-menuitem> <x-menuitem value="15"><x-label>15</x-label></x-menuitem> <x-menuitem value="20"><x-label>20</x-label></x-menuitem> <x-menuitem value="20"><x-label>30</x-label></x-menuitem> <x-menuitem value="20"><x-label>50</x-label></x-menuitem> </x-menu> </x-select> </section> <hr> <section id="settings-section"> <h3><x-message id="settings-message" href="#settings" autocapitalize></x-message></h3> <x-box id="settings-buttons"> <x-button id="import-settings-button"> <x-label><x-message href="#import" ellipsis></x-message> </x-label></x-button> <x-button id="export-settings-button"> <x-label><x-message href="#export--verb" ellipsis></x-message></x-label> </x-button>  </x-box></section> </template>
  `;
  static _shadowStyleSheet = se`#hardware-acceleration-checkbox{margin-top:10px}#recent-files-select{width:100%}#settings-buttons{margin-top:14px}#settings-buttons x-button{flex:1}#settings-buttons x-button+x-button{margin-left:8px}`;
  constructor() {
    super();
    this["#hardware-acceleration-checkbox"].addEventListener("toggle", () =>
      this.#U()
    );
    this["#recent-files-select"].addEventListener("change", () => this.#D());
    this["#import-settings-button"].addEventListener("click", () => this.#z());
    this["#export-settings-button"].addEventListener("click", () => this.#M());
  }
  l() {
    this.#A();
  }
  #U() {
    this.o.hardwareAcceleration =
      this["#hardware-acceleration-checkbox"].toggled;
  }
  #D() {
    let af = parseInt(this["#recent-files-select"].value);
    a2.setConfig("bx-generalsettings:maxRecentFiles", af);
    if (this.o.clearExcessiveRecentFiles) {
      this.o.clearExcessiveRecentFiles(af);
    }
  }
  #z() {
    this.o.importConfig();
  }
  #M() {
    this.o.exportConfig();
  }
  async #A() {
    let af = this.o;
    if (af.localName === "bx-macapp" || af.localName === "bx-linuxapp") {
      let ag = await af.hardwareAcceleration;
      this["#hardware-acceleration-section"].hidden = false;
      this["#hardware-acceleration-checkbox"].toggled = ag;
    } else {
      this["#hardware-acceleration-section"].hidden = true;
    }
    if (
      af.localName === "bx-progressivewebapp" ||
      af.localName === "bx-portalwebapp"
    ) {
      let ah = a2.getConfig("bx-generalsettings:maxRecentFiles", 5);
      this["#recent-files-section"].hidden = false;
      this["#recent-files-select"].value = ah + "";
    } else {
      this["#recent-files-section"].hidden = true;
    }
    this["#settings-message"].href =
      af.localName === "bx-linuxapp" ? "#preferences" : "#settings";
  }
}
customElements.define("bx-generalsettings", li);
class ri extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#ui" autocapitalize></x-message></h2> <section id="locale-section"> <h3><x-message href="#language" autocapitalize></x-message></h3> <x-select id="locale-select"> <x-menu id="locale-select-menu"> <x-menuitem value="auto" toggled> <x-label id="auto-locale-label"></x-label> </x-menuitem> <hr id="locale-select-separator"> </x-menu> </x-select> </section> <hr> <section id="theme-section"> <h3><x-message href="#theme" autocapitalize></x-message></h3> <x-select id="theme-select"> <x-menu> <x-menuitem value="auto" toggled> <x-icon id="auto-theme-icon"></x-icon> <x-label id="auto-theme-label"></x-label> </x-menuitem> <hr id="theme-select-separator"> <x-menuitem value="fluent"> <x-icon href="#windows"></x-icon> <x-label>Windows</x-label> </x-menuitem> <x-menuitem value="cupertino"> <x-icon href="#macos"></x-icon> <x-label>macOS</x-label> </x-menuitem> <x-menuitem value="adwaita"> <x-icon href="#gnome"></x-icon> <x-label>GNOME</x-label> </x-menuitem> </x-menu> </x-select> </section> <hr> <section id="colors-section"> <h3><x-message href="#colors" autocapitalize></x-message></h3> <section id="color-scheme-subsection"> <h4><x-message href="#color-scheme" autocapitalize></x-message></h4> <x-select id="color-scheme-select"> <x-menu id="color-scheme-menu"> <x-menuitem value="auto"> <x-label id="auto-color-scheme-label"></x-label> </x-menuitem> <hr> <x-menuitem value="light"> <x-label><x-message href="#color-scheme.light"></x-message></x-label> </x-menuitem> <x-menuitem value="dark"> <x-label><x-message href="#color-scheme.dark"></x-message></x-label> </x-menuitem> </x-menu> </x-select> </section> <section id="accent-color-subsection"> <h4><x-message href="#accent-color" autocapitalize></x-message></h4> <x-box id="accent-color-box"> <x-select id="accent-color-preset-select"> <x-menu id="accent-color-preset-menu"> <x-menuitem value="auto" toggled> <x-swatch id="auto-accent-color-preset-swatch"></x-swatch> <x-label id="auto-accent-color-preset-label"></x-label> </x-menuitem> <hr> <x-menuitem value="blue"> <x-swatch></x-swatch> <x-label><x-message href="#color.blue"></x-message></x-label> </x-menuitem> <x-menuitem value="purple"> <x-swatch></x-swatch> <x-label><x-message href="#color.purple"></x-message></x-label> </x-menuitem> <x-menuitem value="pink"> <x-swatch></x-swatch> <x-label><x-message href="#color.pink"></x-message></x-label> </x-menuitem> <x-menuitem value="red"> <x-swatch></x-swatch> <x-label><x-message href="#color.red"></x-message></x-label> </x-menuitem> <x-menuitem value="orange"> <x-swatch></x-swatch> <x-label><x-message href="#color.orange"></x-message></x-label> </x-menuitem> <x-menuitem value="yellow"> <x-swatch></x-swatch> <x-label><x-message href="#color.yellow"></x-message></x-label> </x-menuitem> <x-menuitem value="green"> <x-swatch></x-swatch> <x-label><x-message href="#color.green"></x-message></x-label> </x-menuitem> <x-menuitem value="graphite"> <x-swatch></x-swatch> <x-label><x-message href="#color.graphite"></x-message></x-label> </x-menuitem> <hr> <x-menuitem value="custom"> <x-icon href="#color-wheel"></x-icon> <x-label><x-message href="#color.custom"></x-message></x-label> </x-menuitem> </x-menu> </x-select> <x-colorselect id="accent-color-select" spaces="srgb"></x-colorselect> </x-box> </section> </section> <hr> <section id="size-section"> <h3><x-message href="#size" autocapitalize></x-message></h3> <x-box id="size-box"> <x-slider id="size-slider" value="100" min="50" max="150" step="1"></x-slider> <x-numberinput id="size-input" value="100" min="50" max="150" step="1" suffix="%" condensed> <x-stepper></x-stepper> </x-numberinput> </x-box> </section> <hr> <section id="menubar-section"> <h3><x-message href="#menubar" autocapitalize></x-message></h3> <x-checkbox id="show-install-button-checkbox"> <x-label><x-message href="#show-install-button"></x-message></x-label> </x-checkbox> </section> <hr> <section id="canvas-section"> <h3><x-message href="#canvas" autocapitalize></x-message></h3> <x-checkbox id="limit-scrollable-area-checkbox"> <x-label><x-message href="#limit-scrollable-area"></x-message></x-label> </x-checkbox> <x-checkbox id="show-view-outline-above-objects-checkbox"> <x-label><x-message href="#show-view-outline-above-objects"></x-message></x-label> </x-checkbox> </section> </template>
  `;
  static _shadowStyleSheet = se`#locale-select{width:100%}#theme-select{width:100%}#colors-section section{margin-top:10px}#accent-color-box{margin-top:4px}#accent-color-preset-select{flex:1}#accent-color-select{margin-left:6px}#color-scheme-select{width:100%}#size-input{width:80px;margin-left:12px}`;
  #B;
  #R;
  #I;
  #F;
  #N;
  #O;
  constructor() {
    super();
    this["#locale-select"].addEventListener("change", () => this.#_());
    this["#theme-select"].addEventListener("change", () => this.#q());
    this["#color-scheme-select"].addEventListener("change", () => this.#j());
    this["#accent-color-preset-select"].addEventListener("change", (af) =>
      this.#V(af)
    );
    this["#accent-color-select"].addEventListener("changestart", (af) =>
      this.#G(af)
    );
    this["#size-box"].addEventListener("change", (af) => this.#H(af));
    this["#size-box"].addEventListener("changeend", (af) => this.#W(af));
    this["#show-install-button-checkbox"].addEventListener("toggle", () => {
      a2.setConfig(
        "bx-uisettings:showInstallButton",
        this["#show-install-button-checkbox"].toggled
      );
    });
    this["#limit-scrollable-area-checkbox"].addEventListener("toggle", () => {
      a2.setConfig(
        "bx-uisettings:limitScrollableArea",
        this["#limit-scrollable-area-checkbox"].toggled
      );
    });
    this["#show-view-outline-above-objects-checkbox"].addEventListener(
      "toggle",
      () => {
        a2.setConfig(
          "bx-uisettings:showViewOutlineAboveObjects",
          this["#show-view-outline-above-objects-checkbox"].toggled
        );
      }
    );
    {
      let af = "";
      for (let ag of He) {
        af +=
          '\n          <x-menuitem value="' +
          ag +
          '">\n            <x-label>' +
          Pe(ag) +
          "</x-label>\n          </x-menuitem>\n        ";
      }
      this["#locale-select-menu"].insertAdjacentHTML("beforeend", af);
    }
    {
      let ah = Ye();
      let aj = this["#theme-select"].querySelector(
        'x-menuitem[value="' + ah + '"]'
      );
      this["#theme-select-separator"].after(aj);
    }
    if (le === false) {
      this["#theme-select"]
        .querySelector("x-menuitem[value=cupertino]")
        .remove();
    }
  }
  async l() {
    await a2.whenLocalesReady;
    await a2.whenThemeReady;
    this.#A();
    this.#B = window.matchMedia("(prefers-color-scheme: dark)");
    this.o.addEventListener("installedchange", (this.#R = () => this.#A()));
    this.#B.addEventListener("change", (this.#I = () => this.#A()));
    a2.addEventListener("localeschange", (this.#F = () => this.#A()));
    a2.addEventListener("themechange", (this.#N = () => this.#A()));
    a2.addEventListener("accentcolorchange", (this.#O = () => this.#A()));
  }
  h() {
    this.o.removeEventListener("installedchange", this.#R);
    this.#B.removeEventListener("change", this.#I);
    a2.removeEventListener("localeschange", this.#F);
    a2.removeEventListener("themechange", this.#N);
    a2.removeEventListener("accentcolorchange", this.#O);
  }
  #_() {
    a2.setConfig("bx-uisettings:locale", this["#locale-select"].value);
  }
  #q() {
    a2.setConfig("bx-uisettings:theme", this["#theme-select"].value);
  }
  #j() {
    let af = this["#color-scheme-select"].value;
    if (this.o.localName === "bx-macapp") {
      this.o.setColorScheme(af);
    } else {
      a2.setConfig("bx-uisettings:colorScheme", af);
    }
    this.#A();
  }
  #V() {
    if (this["#accent-color-preset-select"].value === "custom") {
      a2.setConfig(
        "bx-uisettings:accentColor",
        this["#accent-color-select"].value
      );
      this["#accent-color-select"].click();
    } else if (this["#accent-color-preset-select"].value === "auto") {
      a2.setConfig("bx-uisettings:accentColor", "auto");
    } else {
      a2.setConfig(
        "bx-uisettings:accentColor",
        this["#accent-color-preset-select"].value
      );
    }
  }
  #G() {
    let af;
    let ag;
    this["#accent-color-preset-select"].value = "custom";
    this["#accent-color-select"].addEventListener(
      "change",
      (af = et(() => {
        a2.setConfig(
          "bx-uisettings:accentColor",
          this["#accent-color-select"].value
        );
      }, 150))
    );
    this["#accent-color-select"].addEventListener(
      "changeend",
      (ag = () => {
        this["#accent-color-select"].removeEventListener("change", af);
        this["#accent-color-select"].removeEventListener("changeend", ag);
      })
    );
  }
  #H(af) {
    if (af.target === this["#size-slider"]) {
      this["#size-input"].value = this["#size-slider"].value;
    } else {
      this["#size-slider"].value = this["#size-input"].value;
    }
  }
  #W(af) {
    let ag = z(this["#size-slider"].value / 100, 2);
    a2.setConfig("bx-uisettings:size", ag);
    bridge.postMessage("setUISize", ag);
    this.#A();
  }
  async #A() {
    if (
      this.o.localName === "bx-macapp" ||
      this.o.localName === "bx-linuxapp"
    ) {
      this["#locale-section"].hidden = true;
    } else if (this.o.localName === "bx-embeddedwebapp") {
      this["#locale-section"].hidden = true;
    } else {
      let af = a2.getConfig("bx-uisettings:locale", "auto");
      let ag = Ze();
      if (af !== "auto" && He.includes(af) === false) {
        af = "en";
      }
      this["#auto-locale-label"].innerHTML =
        '<x-message href="#language.auto"></x-message> (' + Pe(ag) + ")";
      this["#locale-select"].value = af;
    }
    if (this.o.localName === "bx-macapp") {
      this["#theme-section"].hidden = true;
    } else if (this.o.localName === "bx-linuxapp") {
      this["#theme-section"].hidden = true;
    } else if (this.o.localName === "bx-embeddedwebapp") {
      this["#theme-section"].hidden = true;
    } else {
      let ah = a2.getConfig("bx-uisettings:theme", "auto");
      let aj = Ye();
      let ak = this["#theme-select"].querySelector(
        'x-menuitem[value="' + aj + '"]'
      );
      let al = ak.querySelector("x-label").textContent;
      if (ah === "cupertino" && le === false) {
        ah = "auto";
      }
      this["#auto-theme-label"].textContent = "Auto (" + al + ")";
      this["#auto-theme-icon"].href = ak.querySelector("x-icon").href;
      this["#theme-select"].value = ah;
    }
    if (this.o.localName === "bx-embeddedwebapp") {
      this["#colors-section"].hidden = true;
    } else {
      if (this.o.localName === "bx-macapp") {
        let am = await this.o.getColorScheme();
        if (am === "auto") {
          let an = await this.o.getColorScheme(true);
          this["#auto-color-scheme-label"].innerHTML =
            '<x-message href="#color-scheme.auto"></x-message> (<x-message href="#color-scheme.' +
            an +
            '"></x-message>)';
        } else {
          this["#auto-color-scheme-label"].innerHTML =
            '<x-message href="#color-scheme.auto"></x-message>';
        }
        this["#color-scheme-select"].value = am;
      } else if (this.o.localName === "bx-linuxapp") {
        let ap = a2.getConfig("bx-uisettings:colorScheme", "light");
        this["#color-scheme-menu"].children[0].hidden = true;
        this["#color-scheme-menu"].children[1].hidden = true;
        this["#color-scheme-select"].value = ap;
      } else {
        let aq = a2.getConfig("bx-uisettings:colorScheme", "auto");
        let ar = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
        this["#auto-color-scheme-label"].innerHTML =
          '<x-message href="#color-scheme.auto"></x-message> (<x-message href="#color-scheme.' +
          ar +
          '"></x-message>)';
        this["#color-scheme-select"].value = aq;
      }
      {
        let { presetAccentColors } = a2;
        for (let av of [
          ...this["#accent-color-preset-menu"].querySelectorAll("x-swatch"),
        ]) {
          let aw = av.parentElement;
          av.value = presetAccentColors[aw.value];
        }
        if (this.o.localName === "bx-macapp") {
          this["#accent-color-subsection"].hidden = true;
        } else if (this.o.localName === "bx-linuxapp") {
          let ax = a2.getConfig("bx-uisettings:accentColor", "blue");
          let ay = !!presetAccentColors[ax];
          this["#accent-color-preset-menu"].children[0].hidden = true;
          this["#accent-color-preset-menu"].children[1].hidden = true;
          this["#accent-color-preset-select"].value = ay ? ax : "custom";
          this["#accent-color-select"].value = ay ? presetAccentColors[ax] : ax;
        } else {
          let az = a2.getConfig("bx-uisettings:accentColor", "auto");
          let aA = this.o.getSystemAccentColorName();
          let aB = presetAccentColors[aA];
          this["#auto-accent-color-preset-label"].innerHTML =
            '<x-message href="#color.auto"></x-message> (<x-message href="#color.' +
            aA +
            '"></x-message>)';
          this["#auto-accent-color-preset-swatch"].value = aB;
          if (az === "auto") {
            this["#accent-color-preset-select"].value = "auto";
            this["#accent-color-select"].value = aB;
          } else {
            let aC = !!presetAccentColors[az];
            this["#accent-color-preset-select"].value = aC ? az : "custom";
            this["#accent-color-select"].value = aC
              ? presetAccentColors[az]
              : az;
          }
        }
      }
    }
    if (
      this.o.localName === "bx-macapp" ||
      this.o.localName === "bx-linuxapp"
    ) {
      let aD = a2.getConfig("bx-uisettings:size", "auto");
      if (aD === "auto") {
        aD = window.matchMedia("(pointer: coarse)").matches
          ? 1.2
          : window.matchMedia("(min-device-width: 1025px)").matches
          ? 1
          : 1.2;
      }
      this["#size-section"].hidden = false;
      this["#size-slider"].value = z(aD * 100, 0);
      this["#size-input"].value = z(aD * 100, 0);
    } else {
      this["#size-section"].hidden = true;
    }
    if (
      this.o.localName === "bx-macapp" ||
      this.o.localName === "bx-linuxapp" ||
      this.o.localName === "bx-embeddedwebapp"
    ) {
      this["#menubar-section"].hidden = true;
    } else if (
      this.o.localName === "bx-progressivewebapp" ||
      this.o.localName === "bx-portalwebapp"
    ) {
      this["#show-install-button-checkbox"].hidden =
        this.o.isInstalled === true;
      this["#show-install-button-checkbox"].toggled = a2.getConfig(
        "bx-uisettings:showInstallButton",
        true
      );
      this["#menubar-section"].hidden =
        this["#show-install-button-checkbox"].hidden;
    }
    {
      let aE = a2.getConfig("bx-uisettings:limitScrollableArea", false);
      let aF = a2.getConfig("bx-uisettings:showViewOutlineAboveObjects", false);
      this["#limit-scrollable-area-checkbox"].toggled = aE;
      this["#show-view-outline-above-objects-checkbox"].toggled = aF;
    }
  }
}
customElements.define("bx-uisettings", ri);
class hi extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#markup"></x-message></h2> <section id="geometry-precision-section"> <h3><x-message href="#geometry-precision"></x-message></h3> <p><x-message href="#geometry-precision-hint"></x-message></p> <x-slider id="geometry-precision-slider" value="3" min="0" max="6" step="1"> <x-label value="0">0</x-label> <x-label value="1">1</x-label> <x-label value="2">2</x-label> <x-label value="3">3</x-label> <x-label value="4">4</x-label> <x-label value="5">5</x-label> <x-label value="6">6</x-label> </x-slider> </section> <hr> <section id="transform-precision-section"> <h3><x-message href="#transform-precision"></x-message></h3> <p><x-message href="#transform-precision-hint"></x-message></p> <x-slider id="transform-precision-slider" value="6" min="5" max="12" step="1"> <x-label value="5">5</x-label> <x-label value="6">6</x-label> <x-label value="7">7</x-label> <x-label value="8">8</x-label> <x-label value="9">9</x-label> <x-label value="10">10</x-label> <x-label value="11">11</x-label> <x-label value="12">12</x-label> </x-slider> </section> <hr> <section id="indentation-section"> <h3><x-message href="#indentation"></x-message></h3> <p><x-message href="#indentation-hint"></x-message></p> <x-slider id="indentation-slider" value="2" min="0" max="8" step="1"> <x-label value="0">0</x-label> <x-label value="1">1</x-label> <x-label value="2">2</x-label> <x-label value="3">3</x-label> <x-label value="4">4</x-label> <x-label value="5">5</x-label> <x-label value="6">6</x-label> <x-label value="7">7</x-label> <x-label value="8">8</x-label> </x-slider> </section> <hr> <section id="foreign-objects-section"> <h3><x-message href="#foreign-objects"></x-message></h3> <p><x-message href="#foreign-objects-hint"></x-message></p> <x-radios id="foreign-objects-radios"> <x-radio value="preserve"> <x-label><x-message href="#preserve"></x-message></x-label> </x-radio> <x-radio value="remove"> <x-label><x-message href="#remove"></x-message></x-label> </x-radio> <x-radio value="sanitize"> <x-label><x-message href="#sanitize"></x-message></x-label> </x-radio> </x-radios> </section> <hr> <section id="foreign-metadata-section"> <h3><x-message href="#foreign-metadata"></x-message></h3> <p><x-message href="#foreign-metadata-hint"></x-message></p> <x-radios id="foreign-metadata-radios"> <x-radio value="preserve"> <x-label><x-message href="#preserve"></x-message></x-label> </x-radio> <x-radio value="remove"> <x-label><x-message href="#remove"></x-message></x-label> </x-radio> </x-radios> </section> </template>
  `;
  static _shadowStyleSheet = se`#foreign-objects-radios{display:block;margin-top:10px}#foreign-metadata-radios{display:block;margin-top:10px}`;
  constructor() {
    super();
    this["#geometry-precision-slider"].addEventListener("changeend", () => {
      a2.setConfig(
        "bx-markupsettings:geometryPrecision",
        this["#geometry-precision-slider"].value
      );
    });
    this["#transform-precision-slider"].addEventListener("changeend", () => {
      a2.setConfig(
        "bx-markupsettings:transformPrecision",
        this["#transform-precision-slider"].value
      );
    });
    this["#indentation-slider"].addEventListener("changeend", () => {
      a2.setConfig(
        "bx-markupsettings:indentation",
        this["#indentation-slider"].value
      );
    });
    this["#foreign-objects-radios"].addEventListener("toggle", () => {
      a2.setConfig(
        "bx-markupsettings:foreignObjects",
        this["#foreign-objects-radios"].value
      );
    });
    this["#foreign-metadata-radios"].addEventListener("toggle", () => {
      a2.setConfig(
        "bx-markupsettings:foreignMetadata",
        this["#foreign-metadata-radios"].value
      );
    });
  }
  l() {
    this.#A();
  }
  #A() {
    let af = a2.getConfig("bx-markupsettings:geometryPrecision", 3);
    let ag = a2.getConfig("bx-markupsettings:transformPrecision", 6);
    let ah = a2.getConfig("bx-markupsettings:indentation", 2);
    let aj = a2.getConfig("bx-markupsettings:foreignObjects", "sanitize");
    let ak = a2.getConfig("bx-markupsettings:foreignMetadata", "remove");
    this["#geometry-precision-slider"].value = af;
    this["#transform-precision-slider"].value = ag;
    this["#indentation-slider"].value = ah;
    this["#foreign-objects-radios"].value = aj;
    this["#foreign-metadata-radios"].value = ak;
  }
}
customElements.define("bx-markupsettings", hi);
let ci = {
  colors: "unpinned",
  gradients: "unpinned",
  patterns: "unpinned",
  markers: "unpinned",
  symbols: "none",
  filters: "unpinned",
  fonts: "unpinned",
  clipPaths: "unpinned",
  masks: "unpinned",
};
class di extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#garbage-collector" autocapitalize></x-message></h2> <section id="defs-section"> <h3 id="intro"><x-message href="#auto-remove-unused-defs" autocapitalize></x-message></h3> <x-box> <x-icon href="#defs-colors"></x-icon> <x-label><x-message href="#colors"></x-message></x-label> <x-buttons id="colors-buttons" tracking="1"> <x-button value="unpinned"> <x-label><x-message href="#auto-remove-unused-defs.unpinned"></x-message></x-label> </x-button> <x-button value="all"> <x-label><x-message href="#auto-remove-unused-defs.all"></x-message></x-label> </x-button> <x-button value="none"> <x-label><x-message href="#auto-remove-unused-defs.none"></x-message></x-label> </x-button> </x-buttons> </x-box> <x-box> <x-icon href="#defs-gradients"></x-icon> <x-label><x-message href="#gradients"></x-message></x-label> <x-buttons id="gradients-buttons" tracking="1"> <x-button value="unpinned"> <x-label><x-message href="#auto-remove-unused-defs.unpinned"></x-message></x-label> </x-button> <x-button value="all"> <x-label><x-message href="#auto-remove-unused-defs.all"></x-message></x-label> </x-button> <x-button value="none"> <x-label><x-message href="#auto-remove-unused-defs.none"></x-message></x-label> </x-button> </x-buttons> </x-box> <x-box> <x-icon href="#defs-patterns"></x-icon> <x-label><x-message href="#patterns"></x-message></x-label> <x-buttons id="patterns-buttons" tracking="1"> <x-button value="unpinned"> <x-label><x-message href="#auto-remove-unused-defs.unpinned"></x-message></x-label> </x-button> <x-button value="all"> <x-label><x-message href="#auto-remove-unused-defs.all"></x-message></x-label> </x-button> <x-button value="none"> <x-label><x-message href="#auto-remove-unused-defs.none"></x-message></x-label> </x-button> </x-buttons> </x-box> <x-box> <x-icon href="#defs-markers"></x-icon> <x-label><x-message href="#markers"></x-message></x-label> <x-buttons id="markers-buttons" tracking="1"> <x-button value="unpinned"> <x-label><x-message href="#auto-remove-unused-defs.unpinned"></x-message></x-label> </x-button> <x-button value="all"> <x-label><x-message href="#auto-remove-unused-defs.all"></x-message></x-label> </x-button> <x-button value="none"> <x-label><x-message href="#auto-remove-unused-defs.none"></x-message></x-label> </x-button> </x-buttons> </x-box> <x-box> <x-icon href="#defs-symbols"></x-icon> <x-label><x-message href="#symbols"></x-message></x-label> <x-buttons id="symbols-buttons" tracking="1"> <x-button value="unpinned"> <x-label><x-message href="#auto-remove-unused-defs.unpinned"></x-message></x-label> </x-button> <x-button value="all"> <x-label><x-message href="#auto-remove-unused-defs.all"></x-message></x-label> </x-button> <x-button value="none"> <x-label><x-message href="#auto-remove-unused-defs.none"></x-message></x-label> </x-button> </x-buttons> </x-box> <x-box> <x-icon href="#defs-filters"></x-icon> <x-label><x-message href="#filters"></x-message></x-label> <x-buttons id="filters-buttons" tracking="1"> <x-button value="unpinned"> <x-label><x-message href="#auto-remove-unused-defs.unpinned"></x-message></x-label> </x-button> <x-button value="all"> <x-label><x-message href="#auto-remove-unused-defs.all"></x-message></x-label> </x-button> <x-button value="none"> <x-label><x-message href="#auto-remove-unused-defs.none"></x-message></x-label> </x-button> </x-buttons> </x-box> <x-box> <x-icon href="#defs-fonts"></x-icon> <x-label><x-message href="#fonts"></x-message></x-label> <x-buttons id="fonts-buttons" tracking="1"> <x-button value="unpinned"> <x-label><x-message href="#auto-remove-unused-defs.unpinned"></x-message></x-label> </x-button> <x-button value="all"> <x-label><x-message href="#auto-remove-unused-defs.all"></x-message></x-label> </x-button> <x-button value="none"> <x-label><x-message href="#auto-remove-unused-defs.none"></x-message></x-label> </x-button> </x-buttons> </x-box> </section> </template>
  `;
  static _shadowStyleSheet = se`#defs-section x-box>x-icon{width:26px;height:26px;overflow:visible}#defs-section x-box>x-icon[size=small]{width:22px;height:22px}#defs-section x-box>x-icon[size=large]{width:30px;height:30px}#defs-section x-box>x-label{width:90px;margin-left:8px}#defs-section x-box+x-box{margin-top:10px}#defs-section x-buttons{flex:1}#defs-section x-buttons>x-button{flex:1}`;
  constructor() {
    super();
    this["#defs-section"].addEventListener("toggle", (af) => {
      this.#K(af);
    });
  }
  l() {
    this.#A();
  }
  #K(af) {
    a2.setConfig("bx-garbagecollectorsettings:collectOptions", {
      colors: this["#colors-buttons"].value,
      gradients: this["#gradients-buttons"].value,
      patterns: this["#patterns-buttons"].value,
      markers: this["#markers-buttons"].value,
      symbols: this["#symbols-buttons"].value,
      filters: this["#filters-buttons"].value,
      fonts: this["#fonts-buttons"].value,
    });
  }
  #A() {
    let af = a2.getConfig("bx-garbagecollectorsettings:collectOptions", ci);
    this["#colors-buttons"].value = af.colors;
    this["#gradients-buttons"].value = af.gradients;
    this["#patterns-buttons"].value = af.patterns;
    this["#markers-buttons"].value = af.markers;
    this["#symbols-buttons"].value = af.symbols;
    this["#filters-buttons"].value = af.filters;
    this["#fonts-buttons"].value = af.fonts;
  }
}
customElements.define("bx-garbagecollectorsettings", di);
class ui {
  #Z = false;
  #Y = false;
  #X = false;
  #J = false;
  #Q = null;
  constructor(...af) {
    for (let ag of af) {
      if (ag === "Control") {
        this.ctrl = true;
      } else if (ag === "Alt") {
        this.alt = true;
      } else if (ag === "Shift") {
        this.shift = true;
      } else if (ag === "Meta") {
        this.meta = true;
      } else {
        this.key = ag;
      }
    }
  }
  static fromEvent(af) {
    let ag = new ui();
    ag.ctrl = le ? af.metaKey : af.ctrlKey;
    ag.alt = af.altKey;
    ag.shift = af.shiftKey;
    ag.meta = le ? af.ctrlKey : af.metaKey;
    ag.key = null;
    if (af instanceof KeyboardEvent) {
      let ah = af.key;
      if (ah === " ") {
        ah = "Space";
      }
      if (
        ah &&
        ah !== "Control" &&
        ah !== "Alt" &&
        ah !== "Shift" &&
        ah !== "Meta"
      ) {
        if (ah.length === 1) {
          ag.key = ah.toUpperCase();
        } else {
          ag.key = ah;
        }
      }
    }
    return ag;
  }
  static fromElement(af) {
    let ag = new ui();
    ag.ctrl = af.modKeys.includes("Control");
    ag.alt = af.modKeys.includes("Alt");
    ag.shift = af.modKeys.includes("Shift");
    ag.meta = af.modKeys.includes("Meta");
    ag.key = af.normalKey;
    return ag;
  }
  static fromString(af) {
    return new ui(...af.split("+").filter((ag) => ag !== ""));
  }
  get ctrl() {
    return this.#Z;
  }
  set ctrl(af) {
    this.#Z = af;
  }
  get alt() {
    return this.#Y;
  }
  set alt(af) {
    this.#Y = af;
  }
  get shift() {
    return this.#X;
  }
  set shift(af) {
    this.#X = af;
  }
  get meta() {
    return this.#J;
  }
  set meta(af) {
    this.#J = af;
  }
  get key() {
    return this.#Q;
  }
  set key(af) {
    this.#Q = af;
  }
  matches(...af) {
    let ag = false;
    let ah = false;
    let aj = false;
    let ak = false;
    let al = null;
    for (let am of af) {
      if (am === "Control") {
        ag = true;
      } else if (am === "Alt") {
        ah = true;
      } else if (am === "Shift") {
        aj = true;
      } else if (am === "Meta") {
        ak = true;
      } else {
        al = am;
      }
    }
    return (
      ag === this.ctrl &&
      ah === this.alt &&
      ak === this.meta &&
      aj === this.shift &&
      al === this.key
    );
  }
  includes(af) {
    if (af === "Control") {
      return this.ctrl;
    } else if (af === "Alt") {
      return this.alt;
    } else if (af === "Shift") {
      return this.shift;
    } else if (af === "Meta") {
      return this.meta;
    } else {
      return this.key === af;
    }
  }
  compare(af) {
    return (
      this.ctrl === af.ctrl &&
      this.alt === af.alt &&
      this.shift === af.shift &&
      this.meta === af.meta &&
      this.key === af.key
    );
  }
  isVoid() {
    return (
      this.ctrl === false &&
      this.alt === false &&
      this.shift === false &&
      this.meta === false &&
      this.key === null
    );
  }
  toDisplayString() {
    let af = "";
    if (le) {
      if (this.meta) {
        af += "^";
      }
      if (this.alt) {
        af += "⌥";
      }
      if (this.shift) {
        af += "⇧";
      }
      if (this.ctrl) {
        af += "⌘";
      }
      let ag = {
        ArrowUp: "↑",
        ArrowDown: "↓",
        ArrowLeft: "←",
        ArrowRight: "→",
        Backspace: "⌦",
        Tab: "⇥",
      };
      if (this.key !== null) {
        af += ag[this.key] || this.key;
      }
    } else {
      let ah = [];
      if (this.ctrl) {
        ah.push("Ctrl");
      }
      if (this.alt) {
        ah.push("Alt");
      }
      if (this.shift) {
        ah.push("Shift");
      }
      if (this.meta) {
        ah.push("Meta");
      }
      let aj = {
        ArrowUp: "Up",
        ArrowDown: "Down",
        ArrowLeft: "Left",
        ArrowRight: "Right",
      };
      if (this.key !== null) {
        ah.push(aj[this.key] || this.key);
      }
      af = ah.join("+");
    }
    return af;
  }
  toJSON() {
    return this.toString();
  }
  toElement() {
    let af = ei("x-shortcut");
    let ag = [];
    if (this.ctrl) {
      ag.push("Control");
    }
    if (this.alt) {
      ag.push("Alt");
    }
    if (this.shift) {
      ag.push("Shift");
    }
    if (this.meta) {
      ag.push("Meta");
    }
    if (this.key !== null) {
      ag.push(key);
    }
    af.value = ag;
    return af;
  }
  toString() {
    let af = [];
    if (this.ctrl) {
      af.push("Control");
    }
    if (this.alt) {
      af.push("Alt");
    }
    if (this.shift) {
      af.push("Shift");
    }
    if (this.meta) {
      af.push("Meta");
    }
    if (this.key !== null) {
      af.push(this.key);
    }
    return af.join("+");
  }
}
let pi = Symbol();
let mi = [
  "ArrowUp",
  "ArrowDown",
  "ArrowLeft",
  "ArrowRight",
  "Shift+ArrowUp",
  "Shift+ArrowDown",
  "Shift+ArrowLeft",
  "Shift+ArrowRight",
  "Tab",
  "Escape",
  "Enter",
];
class xi extends HTMLElement {
  static #C = ie` <template> <header id="header" part="header"> <div><x-message href="#command"></x-message></div> <div><x-message href="#shortcut"></x-message></div> </header> <main id="items" tabindex="0"></main> <footer id="footer" part="footer"> <x-box> <x-input id="filter-input" placeholder="Filter symbols"> <x-icon href="#search"></x-icon> <x-label><x-message href="#search"></x-message></x-label> </x-input> <x-buttons id="filter-buttons" tracking="1"> <x-button skin="recessed" value="all" toggled> <x-label><x-message href="#shortcuts.all"></x-message></x-label> </x-button> <x-button skin="recessed" value="custom"> <x-label><x-message href="#shortcuts.custom"></x-message></x-label> </x-button> <x-button skin="recessed" value="conflicting"> <x-label><x-message href="#shortcuts.conflicting"></x-message> <span id="conflicting-items-counter"></span></x-label> </x-button> </x-buttons> </x-box> </footer> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      width: 100%;
      height: 100%;
      border-width: 1px;
      border-style: solid;
      outline: none;
      flex-flow: column;
      flex: 1;
      height: 100%;
    }

    /* Header */

    #header {
      display: flex;
      align-items: center;
      min-height: 30px;
      border-bottom-width: 1px;
      border-bottom-style: solid;
      font-size: 14px;
      font-weight: 500;
    }
    #header div:first-child {
      min-width: 50%;
      margin-left: 10px;
    }
    #header div:last-child {
      margin-left: 5px;
    }

    /* Items */

    #items {
      overflow: auto;
      height: 100%;
      outline: none;
    }

    .item {
      display: flex;
      width: 100%;
      height: 30px;
      align-items: center;
      font-size: 13px;
      user-select: none;
      -webkit-user-select: none;
      box-sizing: border-box;
      border: 2px solid transparent;
      color: var(--text-color);
    }
    .item[data-conflicting] {
      color: var(--error-color);
    }
    .item[data-selected] {
      background: var(--accent-color);
      color: white;
    }
    .item[data-selected][data-conflicting] {
      background: var(--error-color);
    }
    .item[data-user-shortcut] {
      font-weight: 900;
    }
    .item[hidden] {
      display: none;
    }

    .item .command-label {
      min-width: 50%;
      padding: 8px 10px;
      white-space: pre;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .item .shortcut-label {
      width: 100%;
    }
    .item[data-editable] .shortcut-label {
      padding: 2px 8px;
      margin-right: 4px;
      background: white;
      color: var(--dark-accent-color);
      font-size: 12px;
      line-height: 1;
      font-size: 11px;
      font-weight: 500;
      text-transform: uppercase;
    }
    .item[data-editable][data-conflicting] .shortcut-label {
      color: var(--error-color);
    }

    .item .reset-button {
      margin: 0 4px;
      padding: 3px 7px;
      min-width: fit-content;
    }
    .item[data-editable] .reset-button {
      display: none;
    }

    /* Footer */

    #footer {
      width: 100%;
      padding: 7px;
      box-sizing: border-box;
      border-top-width: 1px;
      border-top-style: solid;
    }

    #footer #filter-input {
      width: 100%;
      max-width: none;
    }

    #footer #filter-buttons {
      margin-left: 10px;
    }
  `;
  get value() {
    return this.#ee;
  }
  set value(af) {
    this.#ee = af;
    if (this.#te === true) {
      this.#A();
    }
  }
  #ee = {};
  #te = false;
  #T;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, xi.#S];
    this.#P.append(document.importNode(xi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("keydown", (ag) => this.#ie(ag));
    this["#items"].addEventListener("blur", () => this.#se());
    this["#items"].addEventListener("click", (ag) => this.#ae(ag));
    this["#items"].addEventListener("scroll", () => this.#oe());
    this["#filter-input"].addEventListener("input", () => this.#ne());
    this["#filter-buttons"].addEventListener("toggle", () => this.#le());
    this["#filter-buttons"].addEventListener("click", () =>
      this["#items"].focus()
    );
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#te = true;
    this.#A();
  }
  #se() {
    let af = this["#items"].querySelector(".item[data-editable]");
    if (af) {
      af.removeAttribute("data-editable");
      this.#re(af);
    }
  }
  #ae(af) {
    let ag = af.target.closest(".reset-button");
    let ah = af.target.closest(".item");
    if (ag) {
      this.#he(af);
    } else if (ah) {
      this.#ce(af);
    } else {
      for (let aj of this["#items"].children) {
        if (aj.hasAttribute("data-editable")) {
          aj.removeAttribute("data-editable");
          this.#re(aj);
        }
      }
    }
  }
  #ce(af) {
    let ag = af.target.closest(".item");
    if (af.detail === 2) {
      if (ag.hasAttribute("data-editable") === false) {
        ag.setAttribute("data-editable", "");
        this.#re(ag);
      }
    } else {
      for (let ah of this["#items"].children) {
        if (ah === ag) {
          ah.setAttribute("data-selected", "");
        } else {
          ah.removeAttribute("data-selected");
        }
        if (ah.hasAttribute("data-editable")) {
          ah.removeAttribute("data-editable");
          this.#re(ah);
        }
      }
    }
  }
  #oe() {}
  #he(af) {
    let ag = af.target.closest(".reset-button").closest(".item");
    let { commandID } = ag[pi];
    delete this.#ee[ah];
    this.dispatchEvent(new CustomEvent("change"));
    this.#re(ag);
    this.#de();
  }
  #le() {
    this["#filter-input"].value = "";
    this.#ne();
  }
  #ie(af) {
    let ag = ui.fromEvent(af);
    if (af.target === this["#items"]) {
      let ah = this["#items"].querySelector(".item[data-editable]");
      if (ah) {
        af.preventDefault();
        af.stopPropagation();
        if (
          ag.matches("Backspace") ||
          ag.matches("Delete") ||
          ag.matches("Escape") ||
          ag.matches("Enter") ||
          ag.matches("Space")
        ) {
          ah.removeAttribute("data-editable");
          this.#re(ah);
        } else if (ag.key && mi.includes(ag.toString()) === false) {
          let { commandID, defaultShortcut } = ah[pi];
          let al = this.#ee[aj] || null;
          if (al && ag.toString() === al) {
            ah.removeAttribute("data-editable");
            this.#re(ah);
          } else if (defaultShortcut && ag.toString() === defaultShortcut) {
            delete this.#ee[aj];
            this.dispatchEvent(new CustomEvent("change"));
            ah.removeAttribute("data-editable");
            this.#re(ah);
            this.#de();
          } else {
            this.#ee[aj] = ag.toString();
            this.dispatchEvent(new CustomEvent("change"));
            ah.removeAttribute("data-editable");
            this.#re(ah);
            this.#de();
          }
        }
      } else if (ag.matches("ArrowUp")) {
        af.preventDefault();
        this.#ue();
      } else if (ag.matches("ArrowDown")) {
        af.preventDefault();
        this.#pe();
      } else if (ag.matches("Enter")) {
        af.preventDefault();
        let am = this["#items"].querySelector(
          ".item[data-selected]:not([hidden])"
        );
        am.setAttribute("data-editable", "");
        this.#re(am);
      } else if (ag.matches("Backspace") || ag.matches("Delete")) {
        let an = this["#items"].querySelector(
          ".item[data-selected]:not([hidden])"
        );
        let { commandID, defaultShortcut } = an[pi];
        if (this.#ee[ap] !== undefined) {
          af.preventDefault();
          delete this.#ee[ap];
          this.dispatchEvent(new CustomEvent("change"));
          this.#re(an);
          this.#de();
        } else if (defaultShortcut !== null) {
          af.preventDefault();
          this.#ee[ap] = null;
          this.dispatchEvent(new CustomEvent("change"));
          this.#re(an);
          this.#de();
        }
      }
    }
  }
  #me(af) {
    let ag = ie`${'\n  <div class="item" part="item">\n    <div class="command-label"></div>\n    <div class="shortcut-label"></div>\n\n    <x-button class="button reset-button" skin="recessed" toggled condensed>\n      <x-label><x-message href="#reset"></x-message></x-label>\n    </x-button>\n  </div>\n'}`;
    ag[pi] = af;
    this.#re(ag);
    return ag;
  }
  #ue() {
    let af = [...this["#items"].querySelectorAll(".item:not([hidden])")];
    let ag = this["#items"].querySelector(".item[data-selected]:not([hidden])");
    let ah = ag ? af.indexOf(ag) : -1;
    let aj = af[ah - 1];
    if (aj) {
      aj.scrollIntoViewIfNeeded();
      for (let ak of this["#items"].children) {
        if (ak === aj) {
          ak.setAttribute("data-selected", "");
        } else {
          ak.removeAttribute("data-selected");
        }
      }
    }
  }
  #pe() {
    let af = [...this["#items"].querySelectorAll(".item:not([hidden])")];
    let ag = this["#items"].querySelector(".item[data-selected]:not([hidden])");
    let ah = ag ? af.indexOf(ag) : -1;
    let aj = af[ah + 1];
    if (aj) {
      aj.scrollIntoViewIfNeeded();
      for (let ak of this["#items"].children) {
        if (ak === aj) {
          ak.setAttribute("data-selected", "");
        } else {
          ak.removeAttribute("data-selected");
        }
      }
    }
  }
  async #A() {
    if (this["#items"].childElementCount === 0) {
      let af = await this.#T.getAppMenuCommandsIndex();
      this["#items"].innerHTML = "";
      for (let ag of af) {
        let ah = this.#me(ag);
        this["#items"].append(ah);
      }
    } else {
      for (let aj of this["#items"].children) {
        this.#re(aj);
      }
    }
    this.#de();
  }
  #re(af) {
    let { commandID, label, defaultShortcut } = af[pi];
    let ak = this.#ee[ag];
    if (ak || ak === null) {
      af.setAttribute("data-user-shortcut", "");
    } else {
      af.removeAttribute("data-user-shortcut");
    }
    af.querySelector(".command-label").innerHTML = label;
    {
      let al = af.querySelector(".shortcut-label");
      if (af.hasAttribute("data-editable")) {
        al.innerHTML = '<x-message href="#press-new-shortcut"></x-message>';
      } else if (ak) {
        al.textContent = ui.fromString(ak).toDisplayString();
      } else if (ak === null) {
        al.textContent = "";
      } else if (ak === undefined) {
        al.textContent = defaultShortcut
          ? ui.fromString(defaultShortcut).toDisplayString()
          : "";
      }
    }
    af.querySelector(".reset-button").hidden = ak === undefined;
  }
  #de() {
    let af = 0;
    for (let ag of this["#items"].children) {
      let { commandID, defaultShortcut } = ag[pi];
      let ak = this.#ee[ah] || defaultShortcut;
      let al = false;
      if (ak) {
        for (let am of this["#items"].children) {
          if (am !== ag) {
            let an = this.#ee[am[pi].commandID] || am[pi].defaultShortcut;
            if (an && an === ak) {
              al = true;
              break;
            }
          }
        }
      }
      if (al) {
        ag.setAttribute("data-conflicting", "");
        af += 1;
      } else {
        ag.removeAttribute("data-conflicting");
      }
    }
    this["#conflicting-items-counter"].textContent =
      af > 0 ? "(" + af + ")" : "";
  }
  #ne() {
    let af = this["#filter-input"].value.trim().toLowerCase();
    for (let ag of this["#items"].querySelectorAll(".command-label")) {
      let ah = ag.closest(".item");
      let aj = false;
      if (af.length > 0) {
        aj = ag.textContent.trim().toLowerCase().indexOf(af) === -1;
      } else {
        aj = false;
      }
      if (!aj) {
        if (this["#filter-buttons"].value === "custom") {
          if (ah.hasAttribute("data-user-shortcut") === false) {
            aj = true;
          }
        } else if (
          this["#filter-buttons"].value === "conflicting" &&
          ah.hasAttribute("data-conflicting") === false
        ) {
          aj = true;
        }
      }
      ah.hidden = aj;
    }
  }
}
if (customElements.get("bx-shortcutseditor") === undefined) {
  customElements.define("bx-shortcutseditor", xi);
}
class gi extends ni {
  static _shadowTemplate = ie` <template> <main id="main"> <h2><x-message href="#keyboard" autocapitalize></x-message></h2> <x-tabs id="tabs" centered> <x-tab value="shortcuts" selected="selected"> <x-label><x-message href="#shortcuts" autocapitalize></x-message></x-label> </x-tab> <x-tab value="modifiers"> <x-label><x-message href="#modifier-keys" autocapitalize></x-message></x-label> </x-tab> </x-tabs> <div id="views"> <div id="shortcuts-view" class="view"> <bx-shortcutseditor id="shortcuts-editor"></bx-shortcutseditor> </div> <div id="modifiers-view" class="view" hidden> <section id="space-modifier-section"> <h3><x-message href="#space-key" autocapitalize></x-message></h3> <x-radios id="space-modifier-radios"> <x-radio value="togglePreviousTool" toggled> <x-label><x-message href="#space-key.toggles-previous-tool"></x-message></x-label> </x-radio> <x-radio value="pan"> <x-label><x-message href="#space-key.pans-the-canvas"></x-message></x-label> </x-radio> </x-radios> </section> </div> </div> </main> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%;outline:0}#main{display:flex;flex-flow:column;height:100%}#tabs{width:100%}#tabs>x-tab{flex:1}#views{display:flex;flex-flow:column;flex:1;height:100%;min-height:0;margin-top:16px}#views .view{width:100%;height:100%}`;
  constructor() {
    super();
    this["#tabs"].addEventListener("change", () => this.#xe());
    this["#shortcuts-editor"].addEventListener("change", () => this.#ge());
    this["#space-modifier-radios"].addEventListener("toggle", () => this.#be());
  }
  l() {
    let af = a2.getConfig("bx-keyboardsettings:userShortcuts", {});
    let ag = a2.getConfig(
      "bx-keyboardsettings:spaceKeyMode",
      "togglePreviousTool"
    );
    this["#shortcuts-editor"].value = af;
    this["#space-modifier-radios"].value = ag;
  }
  #xe() {
    this["#shortcuts-view"].hidden = this["#tabs"].value !== "shortcuts";
    this["#modifiers-view"].hidden = this["#tabs"].value !== "modifiers";
  }
  #ge() {
    a2.setConfig(
      "bx-keyboardsettings:userShortcuts",
      this["#shortcuts-editor"].value
    );
  }
  #be() {
    a2.setConfig(
      "bx-keyboardsettings:spaceKeyMode",
      this["#space-modifier-radios"].value
    );
  }
}
customElements.define("bx-keyboardsettings", gi);
let bi = (af) =>
  af.code !== undefined
    ? af.message + " (" + af.name + " " + af.code + ")"
    : af.message + " (" + af.name + ")";
let fi = 0;
let wi = (af = "", ag = {}) => {
  let ah = "callback";
  let aj = ah + "_json" + ++fi;
  let ak = false;
  let al = (am, an) => {
    let ap = document.createElement("script");
    ap.src = am;
    ap.async = true;
    if (typeof an == "function") {
      ap.onerror = an;
    }
    ap.onload = ap.onreadystatechange = function () {
      if (
        ak === false &&
        (!this.readyState ||
          this.readyState === "loaded" ||
          this.readyState === "complete")
      ) {
        ak = true;
        ap.onload = ap.onreadystatechange = null;
        if (ap && ap.parentNode) {
          ap.parentNode.removeChild(ap);
        }
      }
    };
    document.getElementsByTagName("head")[0].appendChild(ap);
  };
  return new Promise((am, an) => {
    let ap;
    ap = setTimeout(() => {
      an(new Error("Request timed out."));
    }, 15000);
    window[aj] = (ar) => {
      try {
        delete window[aj];
      } catch (au) {}
      window[aj] = null;
      clearTimeout(ap);
      am(ar);
    };
    let aq = af.indexOf("?") === -1 ? "?" : "&";
    for (let ar in ag) {
      if (ag.hasOwnProperty(ar)) {
        aq += encodeURIComponent(ar) + "=" + encodeURIComponent(ag[ar]) + "&";
      }
    }
    aq = "" + af + aq + ah + "=" + aj;
    al(aq, () => {
      an(new Error("Script failed to load."));
    });
  });
};
const vi = "596389";
const yi = "650791";
const ki = "522135";
const Ci = [
  "BE",
  "BG",
  "CZ",
  "DK",
  "DE",
  "EE",
  "IE",
  "EL",
  "ES",
  "FR",
  "HR",
  "IT",
  "CY",
  "LV",
  "LT",
  "LU",
  "HU",
  "MT",
  "NL",
  "AT",
  "PL",
  "PT",
  "RO",
  "SI",
  "SK",
  "FI",
  "SE",
  "UK",
  "IS",
  "LI",
  "NO",
];
const Si = [
  "AW",
  "BQ",
  "CU",
  "CW",
  "DJ",
  "ER",
  "GU",
  "GW",
  "LR",
  "MY",
  "MM",
  "PW",
  "PR",
  "ST",
  "SB",
  "SR",
  "TL",
  "TV",
  "US",
  "YE",
  "KP",
  "SS",
  "EH",
];
const Ti = ["AU", "CA", "FR", "DE", "IN", "IT", "NL", "ES", "GB", "US"];
const $i = [
  "AF",
  "AX",
  "AL",
  "DZ",
  "AS",
  "AD",
  "AO",
  "AI",
  "AG",
  "AR",
  "AM",
  "AW",
  "AU",
  "AT",
  "AZ",
  "BS",
  "BH",
  "BD",
  "BB",
  "BY",
  "BE",
  "BZ",
  "BJ",
  "BM",
  "BT",
  "BO",
  "BQ",
  "BA",
  "BW",
  "BV",
  "BR",
  "IO",
  "VG",
  "BN",
  "BG",
  "BF",
  "BI",
  "KH",
  "CM",
  "CA",
  "CV",
  "KY",
  "CF",
  "TD",
  "CL",
  "CN",
  "CX",
  "CC",
  "CO",
  "KM",
  "CK",
  "CR",
  "CI",
  "HR",
  "CW",
  "CY",
  "CZ",
  "DK",
  "DJ",
  "DM",
  "DO",
  "EC",
  "EG",
  "SV",
  "GQ",
  "ER",
  "EE",
  "ET",
  "FK",
  "FO",
  "FJ",
  "FI",
  "FR",
  "GF",
  "PF",
  "TF",
  "GA",
  "GM",
  "GE",
  "DE",
  "GH",
  "GI",
  "GR",
  "GL",
  "GD",
  "GP",
  "GU",
  "GT",
  "GG",
  "GN",
  "GW",
  "GY",
  "HT",
  "HM",
  "VA",
  "HN",
  "HK",
  "HU",
  "IS",
  "IN",
  "ID",
  "IQ",
  "IE",
  "IM",
  "IL",
  "IT",
  "JM",
  "JP",
  "JE",
  "JO",
  "KZ",
  "KE",
  "KI",
  "KW",
  "KG",
  "LA",
  "LV",
  "LB",
  "LS",
  "LR",
  "LI",
  "LT",
  "LU",
  "MO",
  "MK",
  "MG",
  "MW",
  "MY",
  "MV",
  "ML",
  "MT",
  "MH",
  "MQ",
  "MR",
  "MU",
  "YT",
  "MX",
  "FM",
  "MD",
  "MC",
  "MN",
  "ME",
  "MS",
  "MA",
  "MZ",
  "MM",
  "NA",
  "NR",
  "NP",
  "NL",
  "AN",
  "NC",
  "NZ",
  "NE",
  "NG",
  "NU",
  "NF",
  "MP",
  "NO",
  "OM",
  "PK",
  "PW",
  "PS",
  "PA",
  "PG",
  "PY",
  "PE",
  "PH",
  "PN",
  "PL",
  "PT",
  "PR",
  "QA",
  "CG",
  "RS",
  "RE",
  "RO",
  "RU",
  "RW",
  "GS",
  "SH",
  "KN",
  "LC",
  "MF",
  "PM",
  "VC",
  "WS",
  "SM",
  "ST",
  "SA",
  "SN",
  "SC",
  "SL",
  "SG",
  "SK",
  "SI",
  "SB",
  "ZA",
  "KR",
  "ES",
  "LK",
  "SD",
  "SR",
  "SJ",
  "SZ",
  "SE",
  "CH",
  "TW",
  "TJ",
  "TZ",
  "TH",
  "TL",
  "TG",
  "TK",
  "TO",
  "TT",
  "TN",
  "TR",
  "TM",
  "TC",
  "TV",
  "VI",
  "UG",
  "UA",
  "AE",
  "GB",
  "US",
  "UM",
  "UY",
  "UZ",
  "VU",
  "VN",
  "WF",
  "EH",
  "ZM",
  "ZW",
];
const Pi = [
  "ar",
  "da",
  "de",
  "en",
  "es",
  "fr",
  "it",
  "ja",
  "ko",
  "nl",
  "no",
  "pl",
  "pt",
  "ru",
  "sv",
  "zh-Hans",
];
let Ei = null;
class Li extends EventTarget {
  #fe;
  #we;
  #ve = null;
  #ye = null;
  #ke = [];
  #Ce;
  #Se;
  #Te;
  get userID() {
    if (this.#we) {
      return this.#we.uid;
    } else {
      return null;
    }
  }
  get userEmail() {
    if (this.#we) {
      return this.#we.email;
    } else {
      return null;
    }
  }
  get userEmailVerified() {
    return !!this.#we && this.#we.emailVerified;
  }
  get userRegisteredTime() {
    if (this.#we?.metadata) {
      return new Date(this.#we.metadata.creationTime).getTime();
    } else {
      return null;
    }
  }
  get userProfile() {
    return this.#ve;
  }
  get userSubscription() {
    return this.#ye;
  }
  get isModerator() {
    return !!this.#ve?.roles?.includes("moderator");
  }
  get isReady() {
    return this.#ke === null;
  }
  get whenReady() {
    return new Promise((af) => {
      if (this.#ke === null) {
        af();
      } else {
        this.#ke.push(af);
      }
    });
  }
  constructor(af) {
    super();
    this.#fe = ab.Auth.initializeAuth(af, {
      persistence: [ab.Auth.browserLocalPersistence],
    });
    ab.Auth.onAuthStateChanged(this.#fe, (ag) => this.#$e(ag));
    {
      let ag = localStorage.getItem("firebase:authUser:" + Y + ":[DEFAULT]");
      let ah = localStorage.getItem("persistedUserProfile");
      if (ag) {
        this.#we = JSON.parse(ag);
      }
      if (ah) {
        this.#ve = JSON.parse(ah);
      }
    }
  }
  logIn(af, ag) {
    return new Promise(async (ah, aj) => {
      let ak;
      try {
        ak = await ab.Auth.signInWithEmailAndPassword(this.#fe, af, ag);
      } catch (al) {
        return aj(al);
      }
      {
        let am;
        let an;
        this.addEventListener(
          "userchange",
          (am = () => {
            this.removeEventListener("userchange", am);
            this.removeEventListener("error", an);
            this.#we = ak.user;
            ah();
          })
        );
        this.addEventListener(
          "error",
          (an = (ap) => {
            this.removeEventListener("userchange", am);
            this.removeEventListener("error", an);
            aj(ap.detail);
          })
        );
      }
    });
  }
  logOut() {
    return ab.Auth.signOut(this.#fe);
  }
  sendPasswordResetEmail(af) {
    return ab.Auth.sendPasswordResetEmail(this.#fe, af);
  }
  sendVerificationEmail() {
    return ab.Auth.sendEmailVerification(this.#fe.currentUser);
  }
  changeEmail(af) {
    return ab.Auth.updateEmail(this.#fe.currentUser, af);
  }
  changePassword(af) {
    return ab.Auth.updatePassword(this.#fe.currentUser, af);
  }
  reauthenticate(af) {
    let ag = this.#fe.currentUser;
    let ah = ab.Auth.EmailAuthProvider.credential(ag.email, af);
    return ab.Auth.reauthenticateWithCredential(ag, ah);
  }
  async #$e(af) {
    if (this.#we) {
      Ei.database.unobserveDocument("profiles", this.#we.uid, this.#Se);
      Ei.database.unobserveDocument("subscriptions", this.#we.uid, this.#Te);
      this.#we = null;
    }
    if (this.#Ce) {
      clearInterval(this.#Ce);
      this.#Ce = null;
    }
    this.#ve = null;
    this.#ye = null;
    if (af) {
      let ag;
      let ah;
      let aj = null;
      try {
        ag = await Ei.database.getDocument("profiles", af.uid);
        ah = await Ei.database.getDocument("subscriptions", af.uid);
      } catch (ak) {
        aj = ak;
      }
      if (aj) {
        await Ei.auth.logOut();
        this.dispatchEvent(
          new CustomEvent("error", {
            detail: bi(aj),
          })
        );
      } else {
        this.#we = af;
        this.#ve = ag;
        this.#ye = ah;
        localStorage.setItem("persistedUserProfile", JSON.stringify(ag));
        if (this.#ke !== null) {
          for (let al of this.#ke) {
            al();
          }
          this.#ke = null;
        }
        this.dispatchEvent(new CustomEvent("userchange"));
        this.dispatchEvent(new CustomEvent("userprofilechange"));
        this.dispatchEvent(new CustomEvent("usersubscriptionchange"));
        {
          let am = af.uid;
          Ei.database.observeDocument(
            "profiles",
            am,
            (this.#Se = (an) => {
              this.#ve = an;
              this.dispatchEvent(new CustomEvent("userprofilechange"));
            })
          );
          Ei.database.observeDocument(
            "subscriptions",
            am,
            (this.#Te = (an) => {
              this.#ye = an;
              this.dispatchEvent(new CustomEvent("usersubscriptionchange"));
            })
          );
        }
        if (af.emailVerified === false) {
          if (this.#ye?.orgPlanID) {
            Ei.functions.postMessage("verifyUser", this.#we.uid);
          }
          {
            let an = 0;
            this.#Ce = setInterval(async () => {
              an += 1;
              await af.reload();
              await af.getIdToken(true);
              if (af.emailVerified === true || an > 50) {
                clearInterval(this.#Ce);
                this.#Ce = null;
              }
            }, 30000);
          }
        }
      }
    } else {
      if (this.#ke !== null) {
        for (let ap of this.#ke) {
          ap();
        }
        this.#ke = null;
      }
      localStorage.removeItem("persistedUserProfile");
      this.dispatchEvent(new CustomEvent("userchange"));
      this.dispatchEvent(new CustomEvent("userprofilechange"));
    }
  }
}
class Ui extends EventTarget {
  #Pe;
  #Ee = {};
  #Le = {};
  constructor(af) {
    super();
    let ag = {
      experimentalAutoDetectLongPolling: true,
    };
    if (navigator.storage?.estimate) {
      navigator.storage.estimate().then((ah) => {
        if (ah.quota - ah.usage > 2097152) {
          ag.localCache = ab.Firestore.persistentLocalCache({
            tabManager: ab.Firestore.persistentMultipleTabManager(),
          });
          navigator.storage.persist();
        }
      });
    }
    this.#Pe = ab.Firestore.initializeFirestore(af, ag);
  }
  getDocument(af, ag) {
    return new Promise(async (ah) => {
      let aj = await ab.Firestore.getDoc(ab.Firestore.doc(this.#Pe, af, ag));
      if (aj.exists()) {
        ah(aj.data());
      } else {
        ah(null);
      }
    });
  }
  setDocument(af, ag, ah) {
    let aj = ab.Firestore.doc(this.#Pe, af, ag);
    return ab.Firestore.setDoc(aj, ah);
  }
  observeDocument(af, ag, ah, aj = false) {
    let ak = af + "-" + ag;
    if (this.#Ee[ak] === undefined) {
      let al = true;
      this.#Ee[ak] = {
        removeListener: null,
        callbacks: [ah],
      };
      this.#Ee[ak].removeListener = ab.Firestore.onSnapshot(
        ab.Firestore.doc(this.#Pe, af, ag),
        (am) => {
          if (al && ((al = false), aj === false)) {
            return;
          }
          let an = am.exists() ? am.data() : null;
          for (let ap of this.#Ee[ak].callbacks) {
            ap(an);
          }
        }
      );
    } else {
      this.#Ee[ak].callbacks.push(ah);
    }
  }
  unobserveDocument(af, ag, ah) {
    let aj = af + "-" + ag;
    if (this.#Ee[aj] !== undefined) {
      this.#Ee[aj].callbacks = this.#Ee[aj].callbacks.filter((ak) => ak !== ah);
      if (this.#Ee[aj].callbacks.length === 0) {
        this.#Ee[aj].removeListener();
        delete this.#Ee[aj];
      }
    }
  }
  observeCollection(af, ag, ah = false) {
    if (this.#Le[af] === undefined) {
      let aj = true;
      this.#Le[af] = {
        removeListener: null,
        callbacks: [ag],
      };
      this.#Le[af].removeListener = ab.Firestore.onSnapshot(
        ab.Firestore.query(
          ab.Firestore.collection(this.#Pe, af),
          ab.Firestore.where("authorUID", "==", Ei.auth.userID)
        ),
        (ak) => {
          if (aj && ((aj = false), ah === false)) {
            return;
          }
          let al = ak.docs.map((am) => ({
            id: am.id,
            data: am.data(),
          }));
          for (let am of this.#Le[af].callbacks) {
            am(al);
          }
        }
      );
    } else {
      this.#Le[af].callbacks.push(ag);
    }
  }
  unobserveCollection(af, ag) {
    if (this.#Le[af] !== undefined) {
      this.#Le[af].callbacks = this.#Le[af].callbacks.filter((ah) => ah !== ag);
      if (this.#Le[af].callbacks.length === 0) {
        this.#Le[af].removeListener();
        delete this.#Le[af];
      }
    }
  }
}
class Di extends EventTarget {
  #Ue;
  constructor(af) {
    super();
    this.#Ue = ab.Storage.getStorage(af);
  }
  uploadFile(af, ag) {
    return ab.Storage.uploadBytesResumable(ab.Storage.ref(this.#Ue, af), ag);
  }
  deleteFile(af) {
    return ab.Storage.deleteObject(ab.Storage.ref(this.#Ue, af));
  }
  getMetadata(af) {
    let ag;
    ag = af.startsWith("./storage/")
      ? new URL(af).pathname
      : af;
    if (ag.startsWith("/")) {
      ag = ag.substring(1);
    }
    return ab.Storage.getMetadata(ab.Storage.ref(this.#Ue, ag));
  }
}
class zi extends EventTarget {
  #De;
  constructor(af) {
    super();
    this.#De = ab.Functions.getFunctions(af);
  }
  postMessage(af, ag) {
    let ah = af === "convertToPDF" ? "onClientHeavyRequest" : "onClientRequest";
    return ab.Functions.httpsCallable(
      this.#De,
      ah
    )({
      name: af,
      arg: ag,
    });
  }
}
class Mi {
  #ze;
  #Me = {};
  constructor(af) {
    this.#ze = af;
  }
  open(af = vi, ag = 1, ah = "US") {
    return new Promise(async (aj) => {
      let ak = null;
      if (ag >= 10) {
        this.#ze.Spinner.show();
        try {
          ak = (
            await Ei.functions.postMessage("getDiscountedCheckoutURL", {
              productID: af,
              quantity: ag,
            })
          ).data;
        } catch (al) {
          console.log("ERROR", al);
        }
        this.#ze.Spinner.hide();
      }
      await Ei.auth.whenReady;
      this.#ze.Checkout.open({
        product: af,
        passthrough: Ei.auth.userID,
        email: Ei.auth.userEmail,
        disableLogout: true,
        allowQuantity: false,
        quantity: ag,
        override: ak,
        locale: Pi.includes(a2.locale) ? a2.locale : "en",
        country: ah,
        closeCallback: () => aj(),
      });
    });
  }
  getDefaultRegion() {
    return new Promise((af) =>
      this.#ze.Product.Prices(vi, (ag) => af(ag.country))
    );
  }
  getListSubscription(af = vi, ag = 1, ah = "US") {
    return new Promise(async (aj, ak) => {
      let al;
      if (this.#Me[af + "-" + ah]) {
        al = this.#Me[af + "-" + ah];
      } else {
        let am = await wi("https://checkout.paddle.com/api/2.0/prices", {
          product_ids: af,
          customer_country: ah,
        });
        if (am.success) {
          al = am.response.products[0];
          this.#Me[af + "-" + ah] = al;
        }
      }
      if (al) {
        let an = "" + al.product_id;
        let ap = 0;
        let aq = null;
        if (ag >= 100) {
          ap = 0.3;
        } else if (ag >= 30) {
          ap = 0.2;
        } else if (ag >= 10) {
          ap = 0.1;
        }
        if (al.subscription.price.tax > 0 || Ti.includes(ah)) {
          aq = Si.includes(ah) ? "GST" : "VAT";
        }
        aj({
          planID: an,
          planName: al.product_title,
          currency: al.currency,
          region: ah,
          amount: z(al.subscription.price.net * ag * (1 - ap), 2),
          volumeDiscount: ap,
          tax: aq,
          interval: al.subscription.interval,
        });
      } else {
        ak();
      }
    });
  }
  getEffectiveSubscriptionPlanID(af) {
    let ag = null;
    let ah = false;
    let aj = false;
    if (af) {
      if (
        af.subscriptionPlanID !== undefined &&
        (af.cancellationEffectiveDate === null ||
          new Date(af.cancellationEffectiveDate) - Date.now() > 0)
      ) {
        ag = af.subscriptionPlanID;
      }
      if (af.subscriptionPlanID === undefined || af.status === "deleted") {
        if (
          af.orgPlanID !== undefined &&
          (af.orgCancellationEffectiveDate === null ||
            new Date(af.orgCancellationEffectiveDate) - Date.now() > 0)
        ) {
          ag = af.orgPlanID;
          ah = true;
        }
      }
    }
    if (
      ag === null &&
      Ei.auth.userID &&
      st(Date.now() - Ei.auth.userRegisteredTime) < 15
    ) {
      ag = vi;
      aj = true;
    }
    return [ag, ah, aj];
  }
}
class Ai {
  #r;
  constructor(af) {
    this.#r = af;
  }
  getPost(af, ag = "en") {
    return new Promise(async (ah) => {
      if (ag === null) {
        let aj = await this.#r.collections("posts").documents(af).retrieve();
        console.log("response", aj);
      } else {
        let ak = await this.#r
          .collections("posts@" + ag)
          .documents()
          .search({
            q: "",
            query_by: "_description",
            exclude_fields: "_description,_thread",
            filter_by: "id:=" + af,
            sort_by: "createdTime:asc",
            limit_hits: 1,
            per_page: 1,
          });
        if (ak.hits.length === 1) {
          ah(ak.hits[0].document);
        } else {
          ah(null);
        }
      }
    });
  }
  getThreadComments(af, ag = "en") {
    return new Promise(async (ah) => {
      ah(
        (
          await this.#r
            .collections("posts@" + ag)
            .documents()
            .search({
              q: "",
              query_by: "_description",
              exclude_fields: "_description,_thread",
              filter_by: "type:=comment && threadID:=" + af,
              sort_by: "createdTime:asc",
              per_page: 250,
            })
        ).hits.map((aj) => aj.document)
      );
    });
  }
  searchPosts(af) {
    return new Promise(async (ag) => {
      let ah = "";
      let aj = "en";
      let ak = "createdTime:desc";
      let al = 1;
      let am = 10;
      let an = [];
      if (af.query) {
        ah = af.query;
      }
      if (af.locale) {
        aj = af.locale;
      }
      if (af.sort) {
        ak = af.sort;
      }
      if (af.page) {
        al = af.page;
      }
      if (af.perPage) {
        am = af.perPage;
      }
      if (af.authorID) {
        an.push("authorID:=" + af.authorID + "}");
      }
      if (af.type) {
        an.push("type:=" + af.type + "}");
      }
      if (af.threadType) {
        an.push("threadType:=" + af.threadType + "}");
      }
      if (af.createdYear) {
        let au = Date.parse(af.createdYear + "-01-01");
        let av = Date.parse(af.createdYear + "-12-31T23:59:59");
        an.push("createdTime:>" + au);
        an.push("createdTime:<" + av);
      }
      let ap = await this.#r
        .collections("posts@" + aj)
        .documents()
        .search({
          q: ah,
          query_by: "title,_description",
          highlight_fields: "title,_description",
          exclude_fields: "_description,_thread",
          sort_by: ak === "relevance" ? "_text_match:desc" : ak,
          filter_by: an.join(" && "),
          page: al,
          per_page: am,
        });
      let aq = [];
      let ar = Math.ceil(ap.found / am);
      for (let aw of ap.hits) {
        let ax = aw.document;
        let ay = [];
        for (let az of aw.highlights) {
          ay.push(...az.matched_tokens);
        }
        if (ay.length > 0) {
          ax.keywords = ay;
        }
        aq.push(ax);
      }
      ag([aq, ar]);
    });
  }
  searchThreads(af) {
    return new Promise(async (ag) => {
      let ah = "";
      let aj = "en";
      let ak = "createdTime:desc";
      let al = 1;
      let am = 10;
      let an = [];
      if (af.query) {
        ah = af.query;
      }
      if (af.locale) {
        aj = af.locale;
      }
      if (af.sort) {
        ak = af.sort;
      }
      if (af.page) {
        al = af.page;
      }
      if (af.perPage) {
        am = af.perPage;
      }
      if (af.authorID) {
        an.push("authorID:=" + af.authorID + "}");
      }
      if (af.watchedBy) {
        an.push("watchers:=" + af.watchedBy + "}");
      }
      if (af.upvotedBy) {
        an.push("upvoters:=" + af.upvotedBy + "}");
      }
      if (af.type) {
        an.push("type:=" + af.type + "}");
      }
      if (af.closed !== undefined) {
        an.push("closed:=" + af.closed);
      }
      if (af.tag) {
        an.push("tags:=" + af.tag + "}");
      }
      let ap = await this.#r
        .collections("posts@" + aj)
        .documents()
        .search({
          q: ah,
          query_by: "title,_thread",
          highlight_fields: "title,_thread",
          exclude_fields: "attachments,description,_description,_thread",
          sort_by: ak === "relevance" ? "_text_match:desc" : ak,
          filter_by: an.join(" && "),
          page: al,
          per_page: am,
        });
      let aq = [];
      let ar = Math.ceil(ap.found / am);
      for (let au of ap.hits) {
        let av = au.document;
        let aw = [];
        for (let ax of au.highlights) {
          aw.push(...ax.matched_tokens);
        }
        if (aw.length > 0) {
          av.keywords = aw;
        }
        aq.push(av);
      }
      ag([aq, ar]);
    });
  }
  whenPostCreated(af, ag = "en") {
    return new Promise(async (ah) => {
      let aj = 0;
      let ak = setInterval(async () => {
        aj += 2000;
        if (
          (
            await this.#r
              .collections("posts@" + ag)
              .documents()
              .search({
                q: "",
                query_by: "_description",
                include_fields: "id",
                filter_by: "id:=" + af,
                per_page: 1,
                highlight_fields: "none",
                highlight_full_fields: "none",
              })
          ).hits.length === 1 ||
          aj > 30000
        ) {
          clearInterval(ak);
          ah();
        }
      }, 2000);
    });
  }
  whenPostEdited(af, ag = "en", ah = 0) {
    return new Promise(async (aj) => {
      let ak = 0;
      let al = setInterval(async () => {
        ak += 2000;
        let am = await this.#r
          .collections("posts@" + ag)
          .documents()
          .search({
            q: "",
            query_by: "_description",
            include_fields: "id,revision",
            filter_by: "id:=" + af,
            per_page: 1,
            highlight_fields: "none",
            highlight_full_fields: "none",
          });
        if (
          (am.hits.length === 1 && am.hits[0].document.revision > ah) ||
          ak > 30000
        ) {
          clearInterval(al);
          aj();
        }
      }, 2000);
    });
  }
  whenPostDeleted(af, ag = "en") {
    return new Promise(async (ah) => {
      let aj = 0;
      let ak = setInterval(async () => {
        aj += 2000;
        if (
          (
            await this.#r
              .collections("posts@" + ag)
              .documents()
              .search({
                q: "",
                query_by: "_description",
                include_fields: "id",
                filter_by: "id:=" + af,
                per_page: 1,
                highlight_fields: "none",
                highlight_full_fields: "none",
              })
          ).hits.length === 0 ||
          aj > 30000
        ) {
          clearInterval(ak);
          ah();
        }
      }, 2000);
    });
  }
  searchColorHuntColors(af, ag = "popular", ah = 1, aj = 40) {
    return new Promise(async (ak) => {
      ak(
        (
          await this.#r
            .collections("colorHuntColors")
            .documents()
            .search({
              q: af,
              query_by: "tags",
              sort_by: ag === "popular" ? "likes:desc" : "",
              page: ah,
              per_page: aj,
            })
        ).hits.map((al) => al.document)
      );
    });
  }
  searchUiGradients(af, ag = 1, ah = 40) {
    return new Promise(async (aj) => {
      aj(
        (
          await this.#r.collections("uiGradients").documents().search({
            q: af,
            query_by: "name,tags",
            page: ag,
            per_page: ah,
          })
        ).hits.map((ak) => ak.document)
      );
    });
  }
  searchCocoMaterial(af, ag = "all", ah = 1, aj = 20) {
    return new Promise(async (ak) => {
      let al = [];
      if (ag !== "all") {
        al.push("variant:" + ag);
      }
      ak(
        (
          await this.#r
            .collections("cocoMaterial")
            .documents()
            .search({
              q: af,
              query_by: "name,tags",
              filter_by: al.join(" && "),
              page: ah,
              per_page: aj,
            })
        ).hits.map((am) => am.document)
      );
    });
  }
  searchFluentIcons(af, ag = "regular", ah = 1, aj = 20) {
    return new Promise(async (ak) => {
      ak(
        (
          await this.#r
            .collections("fluentIcons")
            .documents()
            .search({
              q: af,
              query_by: "name",
              filter_by: ag === "all" ? "" : "variant:" + ag,
              page: ah,
              per_page: aj,
            })
        ).hits.map((al) => al.document)
      );
    });
  }
  searchMaterialIcons(af, ag = "all", ah = "all", aj = 1, ak = 20) {
    return new Promise(async (al) => {
      let am = [];
      if (ag !== "all") {
        am.push("variant:" + ag);
      }
      if (ah !== "all") {
        am.push("category:" + ah);
      }
      al(
        (
          await this.#r
            .collections("materialIcons")
            .documents()
            .search({
              q: af,
              query_by: "name",
              filter_by: am.join(" && "),
              page: aj,
              per_page: ak,
            })
        ).hits.map((an) => an.document)
      );
    });
  }
  searchRemixIcons(af, ag = "all", ah = "all", aj = 1, ak = 20) {
    return new Promise(async (al) => {
      let am = [];
      if (ag !== "all") {
        am.push("variant:" + ag);
      }
      if (ah !== "all") {
        am.push("category:" + ah);
      }
      al(
        (
          await this.#r
            .collections("remixIcons")
            .documents()
            .search({
              q: af,
              query_by: "name",
              filter_by: am.join(" && "),
              page: aj,
              per_page: ak,
            })
        ).hits.map((an) => an.document)
      );
    });
  }
  searchGoogleEmojis(af, ag = "all", ah = "all", aj = 1, ak = 20) {
    return new Promise(async (al) => {
      let am = [];
      if (ah !== "all") {
        am.push("skinTone:" + ah);
      }
      if (ag !== "all") {
        am.push("category:" + ag);
      }
      al(
        (
          await this.#r
            .collections("googleEmojis")
            .documents()
            .search({
              q: af,
              query_by: "name",
              filter_by: am.join(" && "),
              page: aj,
              per_page: ak,
            })
        ).hits.map((an) => an.document)
      );
    });
  }
  searchTwitterEmojis(af, ag = "all", ah = "all", aj = 1, ak = 20) {
    return new Promise(async (al) => {
      let am = [];
      if (ah !== "all") {
        am.push("skinTone:" + ah);
      }
      if (ag !== "all") {
        am.push("category:" + ag);
      }
      al(
        (
          await this.#r
            .collections("twitterEmojis")
            .documents()
            .search({
              q: af,
              query_by: "name",
              filter_by: am.join(" && "),
              page: aj,
              per_page: ak,
            })
        ).hits.map((an) => an.document)
      );
    });
  }
  searchLogos(af, ag = "all", ah = 1, aj = 20) {
    return new Promise(async (ak) => {
      let al = [];
      if (ag !== "all") {
        al.push("variant:" + ag);
      }
      ak(
        (
          await this.#r
            .collections("logos")
            .documents()
            .search({
              q: af,
              query_by: "name",
              filter_by: al.join(" && "),
              page: ah,
              per_page: aj,
            })
        ).hits.map((am) => am.document)
      );
    });
  }
  getMacAppStorePrices(af) {
    return this.#r.collections("masPrices").documents(af).retrieve();
  }
}
var Bi = new (class {
  #Ae;
  #De;
  #Be;
  #Ue;
  #l;
  #Re;
  constructor() {
    Ei = this;
    try {
      let af = new a8.Client({
        apiKey: "TKanym7WVw2gyGQ2c6J0mBXHSTsgkkue",
        connectionTimeoutSeconds: 5,
        nodes: [
          {
            host: X,
            port: "443",
            protocol: "https",
          },
        ],
      });
      this.#Ae = new Ai(af);
    } catch (ag) {
      console.log("Failed to initialize Typesense", ag);
    }
    if (he || ce) {
      this.#De = new EventTarget();
      this.#Be = new EventTarget();
      this.#Ue = new EventTarget();
      this.#l = new EventTarget();
    } else {
      try {
        let ah = ab.App.initializeApp({
          projectId: "boxy-svg",
          apiKey: Y,
          databaseURL: "https://boxy-svg.firebaseio.com",
          storageBucket: "boxy-svg.appspot.com",
          authDomain: "boxy-svg.com",
          messagingSenderId: "166009762809",
        });
        this.#De = new zi(ah);
        this.#Be = new Li(ah);
        this.#Ue = new Di(ah);
        this.#l = new Ui(ah);
      } catch (aj) {
        console.log("Failed to initialize Firebase", aj);
      }
    }
    if (he || ce) {
      this.#Re = new EventTarget();
    } else {
      try {
        Paddle.Setup({
          vendor: 28592,
        });
        this.#Re = new Mi(Paddle);
      } catch (ak) {
        console.log("Failed to initialize Paddle", ak);
      }
    }
  }
  get auth() {
    return this.#Be;
  }
  get database() {
    return this.#l;
  }
  get storage() {
    return this.#Ue;
  }
  get functions() {
    return this.#De;
  }
  get index() {
    return this.#Ae;
  }
  get checkout() {
    return this.#Re;
  }
})();
let { ceil, floor } = Math;
class Fi extends HTMLElement {
  static observedAttributes = ["type", "value"];
  static #C = ie` <template> <img id="img" hidden> </template>
  `;
  static #Ie = {};
  static #Fe = new Set();
  static reloadInstances(af = null) {
    for (let ag of Fi.#Fe) {
      if (ag.value === af) {
        ag.reload();
      }
    }
  }
  static #S = se`
    :host {
      display: block;
      width: 28px;
      height: 28px;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
      user-select: none;
      -webkit-user-select: none;
      overflow: hidden;
    }
    :host([transparent]) {
      background: var(--checkboard-background);
    }
    :host([hidden]) {
      display: none;
    }

    #img {
      width: 100%;
      height: 100%;
      -webkit-user-drag: none;
    }
  `;
  get type() {
    if (this.hasAttribute("type")) {
      return this.getAttribute("type");
    } else {
      return "random";
    }
  }
  set type(af) {
    this.setAttribute("type", af);
  }
  get value() {
    return this.getAttribute("value");
  }
  set value(af) {
    if (af === null) {
      this.removeAttribute("value");
    } else {
      this.setAttribute("value", af);
    }
  }
  get transparent() {
    return this.hasAttribute("transparent");
  }
  set transparent(af) {
    if (af) {
      this.setAttribute("transparent", "");
    } else {
      this.removeAttribute("transparent");
    }
  }
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [Fi.#S];
    this.#P.append(document.importNode(Fi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
  connectedCallback() {
    Fi.#Fe.add(this);
  }
  disconnectedCallback() {
    Fi.#Fe.delete(this);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && this.#P && (af === "type" || af === "value")) {
      this.#A();
    }
  }
  reload() {
    if (this.type === "custom") {
      this["#img"].src = "";
      this.#A();
    }
  }
  #A() {
    if (this.type === "custom") {
      if (this.value === null) {
        this["#img"].src = "";
        this["#img"].hidden = true;
      } else {
        this["#img"].src =
          "./storage/avatars/" + this.value + ".png";
        this["#img"].hidden = false;
      }
    } else if (this.type === "random") {
      if (this.value === null) {
        this["#img"].src = "";
        this["#img"].hidden = true;
      } else {
        if (Fi.#Ie[this.value] === undefined) {
          let af = ((aj = "x", ak = 5, al = 20, am = al / 2) => {
            let an = Ht(50, 100, 0, aj) / 100;
            let ap = al * ak + am * 2;
            let aq = jt[Ht(0, jt.length - 1, 0, aj)];
            let ar = '<?xml version="1.0" encoding="utf-8"?>\n';
            ar +=
              '<svg xmlns="http://www.w3.org/2000/svg" width="' +
              ap +
              'px" height="' +
              ap +
              'px" viewBox="0 0 ' +
              ap +
              " " +
              ap +
              '">';
            let au = (av, aw, ax) => {
              ar +=
                '<rect x="' +
                (am + av * al) +
                '" y="' +
                (am + aw * al) +
                '" width="' +
                al +
                '" height="' +
                al +
                '" style="fill: ' +
                ax +
                ';"/>';
            };
            ar +=
              '<rect width="' +
              ap +
              '" height="' +
              ap +
              '" style="fill: ' +
              aq[0] +
              '; opacity: 0.2;"/>';
            for (let av = 0; av < ceil(ak / 2); av++) {
              for (let aw = 0; aw < ak; aw++) {
                if (Ht(0, 1, 10, aj + av * aw) < an) {
                  let ax = aq[Ht(0, aq.length - 1, 0, aj + av * aw)];
                  au(av, aw, ax);
                  if (av < floor(ak / 2)) {
                    au(ak - 1 - av, aw, ax);
                  }
                }
              }
            }
            ar += "</svg>";
            return ar;
          })(this.value);
          let ag = new Blob([af], {
            type: "image/svg+xml;charset=utf-8",
          });
          let ah = URL.createObjectURL(ag);
          Fi.#Ie[this.value] = ah;
        }
        this["#img"].src = Fi.#Ie[this.value];
        this["#img"].hidden = false;
      }
    }
  }
}
if (customElements.get("bx-avatar") === undefined) {
  customElements.define("bx-avatar", Fi);
}
class Ni extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#public-profile"></x-message></h2> <section id="avatar-section"> <h3><x-message href="#avatar"></x-message></h3> <p><x-message href="#avatar-hint"></x-message></p> <bx-avatar id="avatar" part="avatar" transparent></bx-avatar> <x-button id="avatar-edit-button" toggled> <x-label><x-message href="#edit--verb"></x-message></x-label> </x-button> </section> <hr> <section id="name-section"> <h3 id="name-heading"><x-message href="#name"></x-message></h3> <p><x-message href="#name-hint"></x-message></p> <x-throbber id="name-throbber" hidden></x-throbber> <x-box> <x-input id="name-input"></x-input> <x-button id="name-change-button" disabled="disabled"> <x-label><x-message href="#change"></x-message></x-label> </x-button> </x-box> </section> <hr> <section id="website-section"> <h3 id="website-heading"><x-message href="#website"></x-message></h3> <p><x-message href="#website-hint"></x-message></p> <x-throbber id="website-throbber" hidden></x-throbber> <x-box> <x-input id="website-input" type="url"></x-input> <x-button id="website-change-button" disabled="disabled"> <x-label><x-message href="#change"></x-message></x-label> </x-button> </x-box> </section> <hr> <section id="bio-section"> <h3 id="bio-heading"><x-message href="#bio"></x-message></h3> <p><x-message href="#bio-hint"></x-message></p> <x-throbber id="bio-throbber" hidden></x-throbber> <x-box> <x-texteditor id="bio-editor" maxlength="300"></x-texteditor> <x-button id="bio-change-button" disabled="disabled"> <x-label><x-message href="#change"></x-message></x-label> </x-button> </x-box> </section> </template>
  `;
  static _shadowStyleSheet = se`#avatar{width:120px;height:120px}#avatar-edit-button{width:120px;margin-top:8px}#name-section{position:relative}#name-section>x-box{margin-top:4px}#name-input{flex:1;max-width:none;margin-right:6px;position:relative}#name-throbber{position:absolute;top:2px;right:0}#website-section{position:relative}#website-section>x-box{margin-top:4px}#website-input{flex:1;max-width:none;margin-right:6px;position:relative}#website-throbber{position:absolute;top:2px;right:0}#bio-section{position:relative}#bio-section>x-box{margin-top:4px}#bio-editor{flex:1;max-width:none;height:46px;min-height:0}#bio-change-button{height:46px;margin-left:6px}#bio-throbber{position:absolute;top:2px;right:0}`;
  #Ne;
  constructor() {
    super();
    this["#avatar-edit-button"].addEventListener("click", () => this.#Oe());
    this["#name-input"].addEventListener("input", () => this.#_e());
    this["#name-input"].addEventListener("keydown", (af) => this.#qe(af));
    this["#name-change-button"].addEventListener("click", () => this.#je());
    this["#website-input"].addEventListener("input", () => this.#Ve());
    this["#website-input"].addEventListener("keydown", (af) => this.#Ge(af));
    this["#website-change-button"].addEventListener("click", () => this.#He());
    this["#bio-editor"].addEventListener("input", () => this.#We());
    this["#bio-change-button"].addEventListener("click", () => this.#Ke());
  }
  l() {
    Bi.auth.addEventListener("userprofilechange", (this.#Ne = () => this.#A()));
    this.#A();
  }
  h() {
    Bi.auth.removeEventListener("userprofilechange", this.#Ne);
  }
  #Oe() {
    if (this.o.displayMode === "standalone") {
      window.open(
        "./app//app/avatar",
        "_blank",
        "noopener,menubar=no,toolbar=no,location=no,status=no"
      );
    } else {
      window.open("./app//app/avatar", "_blank", "noopener");
    }
  }
  #_e() {
    let af = Bi.auth.userProfile.name;
    let ag = this["#name-input"].value.trim();
    if (af === ag || ag === "") {
      this["#name-change-button"].disabled = true;
      this["#name-change-button"].toggled = false;
    } else {
      this["#name-change-button"].disabled = false;
      this["#name-change-button"].toggled = true;
    }
  }
  #qe(af) {
    if (af.key === "Enter" && this["#name-change-button"].disabled === false) {
      this["#name-change-button"].click();
    }
  }
  async #je() {
    let af;
    let ag = this["#name-input"].value.trim();
    this["#name-input"].disabled = true;
    this["#name-change-button"].disabled = true;
    this["#name-throbber"].hidden = false;
    try {
      await Bi.functions.postMessage("editUser", {
        userID: Bi.auth.userID,
        name: ag,
      });
    } catch (ah) {
      af = ah;
    }
    if (af) {
      this["#name-input"].disabled = false;
      this["#name-change-button"].disabled = false;
      this["#name-throbber"].hidden = true;
      if (af.details === "name-taken") {
        this["#name-input"].setCustomValidity({
          href: "#name-already-taken",
        });
      } else if (af.details === "auth/invalid-display-name") {
        this["#name-input"].setCustomValidity("Invalid name");
      } else {
        this.o.openMessageDialog({
          title: {
            href: "#failed-to-change-user-name",
          },
          detail: bi(af),
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      }
    } else {
      this["#name-input"].disabled = false;
      this["#name-change-button"].disabled = true;
      this["#name-change-button"].toggled = false;
      this["#name-throbber"].hidden = true;
    }
  }
  #Ve() {
    if (
      Bi.auth.userProfile.websiteURL === this["#website-input"].value.trim()
    ) {
      this["#website-change-button"].disabled = true;
      this["#website-change-button"].toggled = false;
    } else {
      this["#website-change-button"].disabled = false;
      this["#website-change-button"].toggled = true;
    }
  }
  #Ge(af) {
    if (
      af.key === "Enter" &&
      this["#website-change-button"].disabled === false
    ) {
      this["#website-change-button"].click();
    }
  }
  async #He() {
    let af;
    let ag = this["#website-input"].value.trim();
    this["#website-input"].disabled = true;
    this["#website-input"].setCustomValidity("");
    this["#website-change-button"].disabled = true;
    this["#website-throbber"].hidden = false;
    try {
      await Bi.functions.postMessage("editUser", {
        userID: Bi.auth.userID,
        websiteURL: ag,
      });
    } catch (ah) {
      af = ah;
    }
    if (af) {
      this["#website-input"].disabled = false;
      this["#website-change-button"].disabled = false;
      this["#website-throbber"].hidden = true;
      if (af.details === "invalid-url") {
        this["#website-input"].setCustomValidity("This URL is not valid");
      } else {
        this.o.openMessageDialog({
          title: {
            href: "#failed-to-change-user-website",
          },
          detail: bi(af),
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      }
    } else {
      this["#website-input"].disabled = false;
      this["#website-change-button"].disabled = true;
      this["#website-change-button"].toggled = false;
      this["#website-throbber"].hidden = true;
    }
  }
  #We() {
    if (Bi.auth.userProfile.bio === this["#bio-editor"].value.trim()) {
      this["#bio-change-button"].disabled = true;
      this["#bio-change-button"].toggled = false;
    } else {
      this["#bio-change-button"].disabled = false;
      this["#bio-change-button"].toggled = true;
    }
  }
  async #Ke() {
    let af;
    let ag = this["#bio-editor"].value.trim();
    this["#bio-editor"].disabled = true;
    this["#bio-change-button"].disabled = true;
    this["#bio-throbber"].hidden = false;
    try {
      await Bi.functions.postMessage("editUser", {
        userID: Bi.auth.userID,
        bio: ag,
      });
    } catch (ah) {
      af = ah;
    }
    if (af) {
      this["#bio-editor"].disabled = false;
      this["#bio-change-button"].disabled = false;
      this["#bio-throbber"].hidden = true;
      if (af.details === "invalid-url") {
        this["#bio-editor"].setCustomValidity("This URL is not valid");
      } else {
        this.o.openMessageDialog({
          title: {
            href: "#failed-to-change-user-bio",
          },
          detail: bi(af),
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      }
    } else {
      this["#bio-editor"].disabled = false;
      this["#bio-change-button"].disabled = true;
      this["#bio-change-button"].toggled = false;
      this["#bio-throbber"].hidden = true;
    }
  }
  async #A() {
    let af = Bi.auth.userProfile;
    if (af) {
      let { name, bio, websiteURL } = af;
      this["#avatar"].type = af.avatar || "random";
      this["#avatar"].value = Bi.auth.userID;
      this["#name-input"].value = name;
      this["#name-change-button"].toggled = false;
      this["#name-change-button"].disabled = true;
      this["#website-input"].value = websiteURL;
      this["#website-change-button"].toggled = false;
      this["#website-change-button"].disabled = true;
      this["#bio-editor"].value = bio;
      this["#bio-change-button"].toggled = false;
      this["#bio-change-button"].disabled = true;
    } else {
      this["#avatar"].value = "";
      this["#name-input"].value = "";
      this["#website-input"].value = "";
      this["#bio-editor"].value = "";
    }
  }
}
customElements.define("bx-profilesettings", Ni);
class Oi extends HTMLElement {
  static #C = ie` <template> <main id="main"> <table id="table"> <tbody id="tbody"></tbody> </table> </main> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      box-sizing: border-box;
      max-height: 182px;
      overflow: hidden;
      border-width: 1px;
      border-style: solid;
    }
    :host([disabled]) {
      opacity: 0.5;
      pointer-events: none;
    }
    :host(:focus) {
      outline: none;
    }

    #main {
      width: 100%;
      overflow-y: auto;
    }

    #table {
      width: 100%;
      display: block;
      table-layout: auto;
      overflow: auto;
      border-collapse: collapse;
      user-select: none;
      -webkit-user-select: none;
      border: none;
      box-shadow: none;
    }

    #table tr {
      height: 30px;
      box-sizing: border-box;
    }
    #table[data-size="small"] tr {
      height: 24px;
    }
    #table[data-size="large"] tr {
      height: 34px;
    }

    #table td {
      border-width: 1px;
      border-style: solid;
    }
    #table td:first-child {
      border-left: none;
    }
    #table td:last-child {
      border-right: none;
    }
    #table tr:first-child td {
      border-top: none;
    }
    #table tr:last-child td {
      border-bottom: none;
    }

    #table td.index-cell {
      width: auto;
      padding: 0 6px;
      box-sizing: border-box;
      text-align: end;
      font-size: 12px;
    }

    #table td.value-cell {
      width: 100%;
      padding: 0 6px;
    }

    #table td.value-cell .label {
      width: 100%;
      padding: 0 2px;
      box-sizing: border-box;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: pre;
      font-size: 12px;
    }
    #table tr[data-disabled] td.value-cell .label {
      opacity: 0.6;
    }

    #table td.value-cell .input {
      width: 100%;
      max-width: none;
      height: 100%;
      border: none;
      font-size: 12px;
      padding: 2px 0;
      color: var(--text-color);
    }
    #table td.value-cell .input::part(input) {
      padding: 0 2px;
    }
    #table td.value-cell .input:focus {
      outline: none;
    }
  `;
  get value() {
    return [...this.#t];
  }
  set value(af) {
    this.#t = [...af];
    if (this.#t.length > this.limit) {
      this.#t.length = this.limit;
    }
    this.#A();
  }
  get limit() {
    return this.#Ze;
  }
  set limit(af) {
    this.#Ze = af;
    if (this.#t.length > this.limit) {
      this.#t.length = this.limit;
    }
    this.#A();
  }
  get editing() {
    return this["#table"].querySelector("tr[data-editing]") !== null;
  }
  get disabled() {
    return this.hasAttribute("disabled");
  }
  set disabled(af) {
    if (af) {
      this.setAttribute("disabled", "");
    } else {
      this.removeAttribute("disabled");
    }
  }
  #t = [];
  #Ze = 10;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
      delegatesFocus: false,
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Oi.#S];
    this.#P.append(document.importNode(Oi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
    this.addEventListener("keydown", (ag) => this.#ie(ag));
  }
  connectedCallback() {
    this.tabIndex = 0;
  }
  #Ye(af) {
    if (this.disabled) {
      return;
    }
    let ag = af.target.closest("tr");
    let ah = af.target.closest("x-input");
    if (ag && !ah && this["#tbody"].childElementCount > 1) {
      this.#Je();
      for (let aj of this["#tbody"].children) {
        if (aj === ag) {
          aj.setAttribute("data-selected", "");
          for (let ak of aj.children) {
            ak.part.add("selected-cell");
          }
        } else {
          aj.removeAttribute("data-selected");
          for (let al of aj.children) {
            al.part.remove("selected-cell");
          }
        }
      }
    }
  }
  #Xe(af) {
    if (this.disabled) {
      return;
    }
    let ag = af.target.closest("tr");
    if (
      ag &&
      af.detail === 2 &&
      ag.hasAttribute("data-editing") === false &&
      ag.hasAttribute("data-disabled") === false
    ) {
      this.#Qe(ag);
    }
  }
  #ie(af) {
    if (!this.disabled) {
      if (af.key === "Enter") {
        if (this.editing === true) {
          this.#Je();
          this.focus();
        } else {
          this.#Qe();
        }
      } else if (af.key === "Escape") {
        if (this.editing === true) {
          af.preventDefault();
          this.#Je();
          this.focus();
        }
      } else if (af.key === "Backspace") {
        if (this.editing === false) {
          af.preventDefault();
          this.#et();
        }
      } else if (af.key === "ArrowUp") {
        if (this.editing === false) {
          this.#tt();
        }
      } else if (af.key === "ArrowDown" && this.editing === false) {
        this.#it();
      }
    }
  }
  #Qe(af) {
    let ag = this["#table"].querySelector("tr[data-selected]");
    if (ag?.hasAttribute("data-disabled") === false) {
      ag.setAttribute("data-editing", "");
      ag.scrollIntoViewIfNeeded();
      for (let ak of ag.children) {
        ak.part.add("selected-cell");
      }
      let ah = ag.querySelector(".label");
      let aj = ie`<x-input class="input" part="input" value="${ah.textContent}" validation="instant"></x-input>`;
      ah.after(aj);
      ah.hidden = true;
      aj.selectAll();
      aj.addEventListener("focusout", () => {
        this.#Je();
      });
      aj.addEventListener("beforevalidate", (al) => {
        al.preventDefault();
        let am = aj.value.trim();
        var an;
        if (
          am.length > 0 &&
          ((an = am),
          new RegExp(
            "[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
          ).test(an)) === false
        ) {
          aj.setCustomValidity({
            href: "#invalid-email",
          });
        } else {
          aj.setCustomValidity("");
        }
      });
    }
  }
  #Je() {
    let af = this["#table"].querySelector("tr[data-editing]");
    if (af) {
      let ag = ii(af);
      let ah = af.querySelector(".label");
      let aj = af.querySelector(".input");
      af.removeAttribute("data-editing");
      ah.hidden = false;
      aj.remove();
      if (aj.reportValidity() === true) {
        let ak = ah.textContent;
        let al = aj.value.trim().toLowerCase();
        if (ak !== al) {
          let am = null;
          if (al !== "") {
            for (let an of this["#tbody"].children) {
              if (an !== af) {
                if (an.querySelector(".label").textContent === al) {
                  am = an;
                  break;
                }
              }
            }
          }
          if (am) {
            if (ak !== "") {
              ah.textContent = "";
              this.#t[ag] = "";
              this.dispatchEvent(new CustomEvent("change"));
            }
            this.#st(am);
          } else {
            ah.textContent = al;
            this.#t[ag] = al === "" ? null : al;
            this.dispatchEvent(new CustomEvent("change"));
          }
        }
      }
    }
  }
  #st(af) {
    let ag = this["#table"].querySelector("tr[data-selected]");
    if (ag && ag !== af) {
      ag.removeAttribute("data-selected");
      for (let ah of ag.children) {
        ah.part.remove("selected-cell");
      }
    }
    af.setAttribute("data-selected", "");
    for (let aj of af.children) {
      aj.part.add("selected-cell");
    }
    af.scrollIntoViewIfNeeded();
  }
  #tt() {
    let af = this["#table"].querySelector("tr[data-selected]");
    if (af) {
      let ag = af.previousElementSibling;
      if (ag) {
        af.removeAttribute("data-selected");
        for (let ah of af.children) {
          ah.part.remove("selected-cell");
        }
        ag.setAttribute("data-selected", "");
        for (let aj of ag.children) {
          aj.part.add("selected-cell");
        }
        ag.scrollIntoViewIfNeeded();
      }
    }
  }
  #it() {
    let af = this["#table"].querySelector("tr[data-selected]");
    if (af) {
      let ag = af.nextElementSibling;
      if (ag) {
        af.removeAttribute("data-selected");
        for (let ah of af.children) {
          ah.part.remove("selected-cell");
        }
        ag.setAttribute("data-selected", "");
        for (let aj of ag.children) {
          aj.part.add("selected-cell");
        }
        ag.scrollIntoViewIfNeeded();
      }
    }
  }
  #et() {
    let af = this["#table"].querySelector("tr[data-selected]");
    let ag = ii(af);
    let ah = af.querySelector(".label");
    if (af) {
      let aj = "";
      if (ah.textContent !== aj) {
        ah.textContent = aj;
        this.#t[ag] = null;
        this.dispatchEvent(new CustomEvent("change"));
      }
    }
  }
  #A() {
    let af = "";
    for (let ag = 1; ag <= this.#Ze; ag += 1) {
      let ah = this.#t[ag - 1];
      af +=
        '\n        <tr class="row" ' +
        (ag === 1 ? "data-disabled" : "") +
        '>\n          <td class="index-cell" part="cell index-cell">' +
        ag +
        '</td>\n          <td class="value-cell" part="cell value-cell">\n            <div class="label">' +
        (ah == null ? "" : this.#t[ag - 1]) +
        "</div>\n          </td>\n        </tr>\n      ";
    }
    this["#tbody"].innerHTML = af;
  }
}
if (customElements.get("bx-userseditor") === undefined) {
  customElements.define("bx-userseditor", Oi);
}
let _i = (af, ag) => {
  let ah = V([...af.keys(), ...ag.keys()]);
  let aj = [];
  for (let ak of ah) {
    if (af.get(ak) !== ag.get(ak)) {
      aj.push(ak);
    }
  }
  return aj;
};
let qi = (af, ag, ah) => {
  let aj = new URL(af);
  let ak = new URLSearchParams(aj.search);
  if (ah == null || ah === "") {
    ak.delete(ag);
  } else {
    ak.set(ag, ah);
  }
  aj.search = ak.toString();
  return aj.href;
};
class ji extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#authentication"></x-message></h2> <section id="email-section"> <h3><x-message href="#email"></x-message></h3> <p><x-message href="#email-hint"></x-message></p> <x-box> <x-input id="email-input" type="email"></x-input> <x-button id="email-change-button" disabled="disabled"> <x-label><x-message href="#change"></x-message></x-label> </x-button> <x-button id="email-verify-button"> <x-label><x-message href="#verify"></x-message></x-label> </x-button> <x-throbber id="email-throbber" hidden></x-throbber> </x-box> </section> <hr> <section id="password-section"> <h3><x-message href="#password"></x-message></h3> <p><x-message href="#password-hint"></x-message></p> <x-box> <x-input id="password-input" type="password"> <x-label id="password-placeholder">•••••••••••</x-label> </x-input> <x-button id="password-change-button" disabled="disabled"> <x-label><x-message href="#change"></x-message></x-label> </x-button> <x-throbber id="password-throbber" hidden></x-throbber> </x-box> </section> <hr> <section id="users-section" hidden> <h3><x-message href="#users"></x-message></h3> <p id="users-hint"><x-message href="#users-emails-hint"></x-message></p> <bx-userseditor id="users-editor"></bx-userseditor> <x-box id="users-change-box"> <x-button id="users-change-button" disabled="disabled"> <x-label><x-message href="#change"></x-message></x-label> </x-button> <x-throbber id="users-change-throbber" hidden></x-throbber> </x-box> </section> </template>
  `;
  static _shadowStyleSheet = se`#email-section>x-box{margin-top:4px}#email-input{flex:1;max-width:none}#email-change-button,#email-verify-button{margin-left:6px}#email-throbber{width:24px;height:24px;margin-left:6px}#password-section>x-box{margin-top:4px}#password-input{flex:1;max-width:none;margin-right:6px}#password-change-button{width:143px}#password-throbber{width:24px;height:24px;margin-left:6px}#users-change-box{margin-top:8px;width:100%}#users-change-button{flex:1}#users-change-throbber{margin-left:8px}`;
  #at;
  constructor() {
    super();
    this["#email-input"].addEventListener("input", () => this.#ot());
    this["#email-input"].addEventListener("keydown", (af) => this.#nt(af));
    this["#email-change-button"].addEventListener("click", () => this.#lt());
    this["#email-verify-button"].addEventListener("click", () => this.#rt());
    this["#password-input"].addEventListener("input", () => this.#ht());
    this["#password-input"].addEventListener("keydown", (af) => this.#ct(af));
    this["#password-change-button"].addEventListener("click", () => this.#dt());
    this["#users-hint"].addEventListener("click", (af) => this.#ut(af));
    this["#users-editor"].addEventListener("change", () => this.#pt());
    this["#users-change-button"].addEventListener("click", () => this.#mt());
  }
  l() {
    this.#A();
    Bi.auth.addEventListener("userchange", (this.#at = () => this.#A()));
  }
  h() {
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  #ot() {
    if (
      Bi.auth.userEmail !== this["#email-input"].value.trim() &&
      this["#email-input"].error === false
    ) {
      this["#email-change-button"].disabled = false;
      this["#email-change-button"].toggled = true;
    } else {
      this["#email-change-button"].disabled = true;
      this["#email-change-button"].toggled = false;
    }
  }
  #nt(af) {
    if (af.key === "Enter") {
      this["#email-change-button"].click();
    }
  }
  async #lt() {
    if (this["#email-input"].reportValidity() === true) {
      this["#email-input"].disabled = true;
      this["#email-change-button"].disabled = true;
      this["#email-throbber"].hidden = false;
      let af = Bi.auth.userID;
      let ag = this["#email-input"].value.trim();
      let ah = Bi.auth.userEmail;
      let aj = null;
      try {
        await Bi.auth.changeEmail(ag);
      } catch (ak) {
        aj = ak;
      }
      if (aj?.code === "auth/requires-recent-login") {
        if (await this.o.openPasswordConfirmDialog()) {
          aj = null;
          try {
            await Bi.auth.changeEmail(ag);
          } catch (al) {
            aj = al;
          }
        }
      }
      this["#email-input"].disabled = false;
      this["#email-change-button"].disabled = false;
      this["#email-throbber"].hidden = true;
      if (aj) {
        if (aj.code === "auth/invalid-email") {
          this["#email-input"].setCustomValidity({
            href: "#invalid-email",
          });
        } else if (aj.code === "auth/email-already-in-use") {
          this["#email-input"].setCustomValidity({
            href: "#email-already-registered",
          });
        } else {
          this.o.openMessageDialog({
            title: {
              href: "#failed-to-change-email",
            },
            detail: aj.message + " (" + aj.code + ")",
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      } else {
        Bi.functions.postMessage("editUser", {
          userID: af,
          email: ag,
          oldEmail: ah,
        });
        await Bi.auth.sendVerificationEmail();
        this.#xt();
      }
    }
  }
  #rt() {
    this.o.openEmailVerifyMessageDialog();
  }
  #ht() {
    if (this["#password-input"].value.length > 0) {
      this["#password-change-button"].disabled = false;
      this["#password-change-button"].toggled = true;
    } else {
      this["#password-change-button"].disabled = true;
      this["#password-change-button"].toggled = false;
    }
  }
  #ct(af) {
    if (af.key === "Enter") {
      this["#password-change-button"].click();
    }
  }
  async #dt() {
    if (this["#password-input"].reportValidity() === true) {
      this["#password-input"].disabled = true;
      this["#password-change-button"].disabled = true;
      this["#password-throbber"].hidden = false;
      let af = this["#password-input"].value.trim();
      let ag = null;
      try {
        await Bi.auth.changePassword(af);
      } catch (ah) {
        ag = ah;
      }
      if (ag?.code === "auth/requires-recent-login") {
        if (await this.o.openPasswordConfirmDialog()) {
          ag = null;
          try {
            await Bi.auth.changePassword(af);
          } catch (aj) {
            ag = aj;
          }
        }
      }
      this["#password-input"].disabled = false;
      this["#password-change-button"].disabled = false;
      this["#password-throbber"].hidden = true;
      if (ag) {
        if (ag.code !== "auth/requires-recent-login") {
          if (ag.code === "auth/weak-password") {
            this["#password-input"].setCustomValidity({
              href: "#password-too-short",
            });
            this["#password-input"].focus();
          } else {
            this.o.openMessageDialog({
              title: {
                href: "#failed-to-change-password",
              },
              detail: ag.message + " (" + ag.code + ")",
              buttons: [
                {
                  href: "#close",
                },
              ],
            });
          }
        }
      } else {
        this.#gt();
      }
    }
  }
  #ut(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
      this.o.navigate(
        qi(location.href, "dialog", "settings→subscription"),
        true
      );
    }
  }
  #pt() {
    this["#users-change-button"].disabled = false;
  }
  async #mt() {
    this["#users-editor"].disabled = true;
    this["#users-change-button"].disabled = true;
    this["#users-change-throbber"].hidden = false;
    let [af, ...ag] = this["#users-editor"].value;
    let ah = null;
    await it(4000);
    try {
      await Bi.functions.postMessage("setOrgUsers", {
        orgLeaderID: Bi.auth.userID,
        orgUsers: ag,
      });
    } catch (aj) {
      ah = aj;
    }
    await it(4000);
    if (ah) {
      this["#users-editor"].disabled = false;
      this["#users-change-button"].disabled = false;
      this["#users-change-throbber"].hidden = true;
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-change-users",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else {
      this["#users-editor"].disabled = false;
      this["#users-change-button"].disabled = true;
      this["#users-change-throbber"].hidden = true;
    }
  }
  #A() {
    this.#xt();
    this.#gt();
    this.#bt();
  }
  #xt() {
    if (Bi.auth.userID !== null) {
      this["#email-section"].hidden = false;
      this["#email-input"].value = Bi.auth.userEmail;
      this["#email-input"].setCustomValidity("");
      this["#email-verify-button"].disabled = Bi.auth.userEmailVerified;
      this["#email-change-button"].toggled = false;
      this["#email-change-button"].disabled = true;
      let af = Bi.auth.userSubscription;
      if (af === null || af.status === "deleted" || af.status === undefined) {
        this["#email-input"].disabled = false;
      } else {
        this["#email-input"].disabled = true;
      }
    } else {
      this["#email-section"].hidden = true;
    }
  }
  #gt() {
    if (Bi.auth.userID !== null) {
      this["#password-section"].hidden = false;
      this["#password-input"].value = "";
      this["#password-input"].setCustomValidity("");
      this["#password-change-button"].toggled = false;
      this["#password-change-button"].disabled = true;
    } else {
      this["#password-section"].hidden = true;
    }
  }
  #bt() {
    let af = Bi.auth.userSubscription;
    let [ag, ah] = Bi.checkout.getEffectiveSubscriptionPlanID(af);
    if (ah) {
      this["#users-section"].hidden = true;
      this["#users-section"].previousElementSibling.hidden = true;
    } else if (Bi.auth.userID !== null) {
      let aj = [];
      if (af?.orgUsers) {
        aj = af.orgUsers;
      }
      this["#users-section"].hidden = false;
      this["#users-section"].previousElementSibling.hidden = false;
      this["#users-editor"].limit =
        af?.quantity !== undefined ? af.quantity : 1;
      this["#users-editor"].value = [Bi.auth.userEmail, ...aj];
      this["#users-change-button"].disabled = true;
    } else {
      this["#users-section"].hidden = true;
      this["#users-section"].previousElementSibling.hidden = true;
    }
  }
}
customElements.define("bx-authsettings", ji);
const Vi = "jarek@boxy-svg.com";
class Gi extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#subscription"></x-message></h2> <main id="main"> <section id="info-section"> <p> <strong><x-message href="#current-plan"></x-message>:</strong> <span id="subscription-plan-span"><x-message href="#fetching" ellipsis></x-message></span> </p> <p> <strong><x-message href="#status"></x-message>:</strong> <span id="subscription-status-span"><x-message href="#fetching" ellipsis></x-message></span> </p> </section> <section id="table-section"> <table id="table"> <thead id="table-head"> <tr> <td><x-message href="subscription-plan"></x-message></td> <td> <x-radios> <x-radio id="standard-plan-radio" size="small"> <x-label><x-message href="subscription-plan.standard"></x-message></x-label> </x-radio> </x-radios> </td> <td> <x-radios> <x-radio id="premium-plan-radio" size="small"> <x-label><x-message href="subscription-plan.premium"></x-message></x-label> </x-radio> </x-radios> </td> </tr> </thead> <tbody id="table-body"> <tr> <td><x-message href="desktop-app"></x-message></td> <td> <x-icon href="#feature-supported" part="yes-icon"></x-icon> </td> <td> <x-icon href="#feature-supported" part="yes-icon"></x-icon> </td> </tr> <tr> <td><x-message href="web-app"></x-message></td> <td> <x-icon href="#feature-supported" part="yes-icon"></x-icon> </td> <td> <x-icon href="#feature-supported" part="yes-icon"></x-icon> </td> </tr> <tr> <td><x-message href="save-svg-files-to-disk"></x-message></td> <td> <x-icon href="#feature-supported" part="yes-icon"></x-icon> </td> <td> <x-icon href="#feature-supported" part="yes-icon"></x-icon> </td> </tr> <tr> <td><x-message href="save-and-host-svg-files-in-cloud"></x-message></td> <td> <x-icon href="#feature-unsupported" part="no-icon"></x-icon> </td> <td> <x-button skin="flat" id="cloud-button"> <x-icon part="yes-icon" href="#feature-supported-asterisk"></x-icon> <x-popover modal> <main> <p><x-message href="#cloud-storage-hint" args="email:${Vi}"></x-message></p> </main> </x-popover> </x-button> </td> </tr> <tr> <td><x-message href="sync-settings-between-devices"></x-message></td> <td> <x-icon href="#feature-unsupported" part="no-icon"></x-icon> </td> <td> <x-icon href="#feature-supported" part="yes-icon"></x-icon> </td> </tr> </tbody> <tfoot id="table-foot"> <tr id="billing-row"> <td><x-message href="#billing"></x-message></td> <td id="billing-td" colspan="2"> <x-select id="billing-select" disabled="disabled"> <x-menu> <x-menuitem value="monthly"> <x-label><x-message href="#billing.monthly"></x-message></x-label> </x-menuitem> <x-menuitem value="yearly" toggled> <x-label><x-message href="#billing.yearly"></x-message></x-label> </x-menuitem> </x-menu> </x-select> </td> </tr> <tr id="quantity-row"> <td> <x-box> <span><x-message href="#users"></x-message></span> <x-button id="quantity-help-button" class="help-button" skin="circular" size="small"> <x-icon href="#help"></x-icon> <x-popover modal> <main> <x-message href="#users-count-hint"></x-message> </main> </x-popover> </x-button> </x-box> </td> <td id="quantity-td" colspan="2"> <x-numberinput id="quantity-input" value="1" min="1" condensed> <x-stepper></x-stepper> </x-numberinput> </td> </tr> <tr id="discount-row"> <td> <x-box> <span><x-message href="#volume-discount"></x-message></span> <x-button id="discount-help-button" class="help-button" skin="circular" size="small"> <x-icon href="#help"></x-icon> <x-popover modal> <main> <x-message href="#volume-discount-hint"></x-message> </main> </x-popover> </x-button> </x-box> </td> <td id="discount-td" colspan="2"> <span id="discount-span"></span> </td> </tr> <tr id="region-row"> <td><x-message href="#region"></x-message></td> <td id="region-td" colspan="2"> <x-select id="region-select"> <x-menu id="region-menu"></x-menu> </x-select> </td> </tr> <tr id="price-row"> <td> <x-box> <span><x-message href="price"></x-message></span> <x-button id="price-help-button" class="help-button" skin="circular" size="small"> <x-icon href="#help"></x-icon> <x-popover modal> <main> <p><x-message href="price-proration-hint"></x-message></p> </main> </x-popover> </x-button> </x-box> </td> <td id="price-td" colspan="2"></td> </tr> </tfoot> </table> </section> <section id="buttons-section"> <x-box id="subscription-buttons"> <x-button id="billing-button" condensed disabled="disabled"> <x-icon href="#credit-card"></x-icon> <x-label><x-message href="#update-billing" ellipsis></x-message></x-label> </x-button> <x-button id="cancel-button" condensed disabled="disabled"> <x-icon href="#cancel"></x-icon> <x-label><x-message href="#cancel-subscription" ellipsis></x-message></x-label> </x-button> <x-button id="subscribe-button" condensed toggled disabled="disabled"> <x-icon href="#credit-card"></x-icon> <x-label id="subscribe-button-label"></x-label> </x-button> </x-box> </section> </main> <x-progressbar id="progress-bar" hidden></x-progressbar> </template>
  `;
  static _shadowStyleSheet = se`#info-section>p{line-height:1.4;margin:3px}#table-section{margin:18px 0 26px 0}table{width:100%;border-collapse:collapse;font-size:13px;overflow:visible}table tr{height:35px;border-radius:inherit}table td{padding:0 10px;box-sizing:border-box}table p:first-child{margin-top:0}table p:last-child{margin-bottom:0}thead{border-radius:inherit}thead td:nth-child(2){padding:0 6px}thead td:nth-child(3){padding:0 6px;border-top-right-radius:inherit}thead td x-radio{margin:0 auto}thead td x-radio x-label{font-weight:700;font-size:15px}tbody x-icon[part=no-icon],tbody x-icon[part=yes-icon]{margin:0 auto}tbody #cloud-button{width:100%;height:100%}tbody #cloud-button[disabled]{opacity:1}tbody #cloud-button::part(arrow){display:none}tbody #cloud-button x-icon{width:17px;height:17px}tbody #cloud-button[size=large] x-icon{width:21px;height:21px}tbody #cloud-button x-popover{width:300px;user-select:none;-webkit-user-select:none}tbody #cloud-button x-popover p{margin:0}tfoot td:nth-child(2){padding:0}tfoot .help-button{margin-left:auto}tfoot .help-button::part(arrow){display:none}tfoot x-popover p:not(:first-child){margin-top:8px}tfoot x-popover ul{margin:8px 0 0 5px;padding:0;list-style:none}tfoot x-popover li{position:relative;margin:0;padding-left:13px}tfoot x-popover li:before{position:absolute;left:0;content:"•";font-weight:700}#quantity-td{position:relative}#quantity-help-button x-popover{width:360px}#quantity-input{position:absolute;top:0;left:0;width:100%;height:100%;max-width:none;padding-left:4px;background:0 0;border:none}#quantity-input[disabled]{background:0 0;opacity:1}#quantity-input[disabled] x-stepper{visibility:hidden}#discount-td{padding:0 10px}#discount-help-button x-popover{width:320px}#billing-td{position:relative}#billing-select{position:absolute;top:0;left:0;width:100%;height:100%;background:0 0;border:none;text-align:start}#billing-select[disabled]{opacity:1}#billing-select[disabled]::before{display:none}#billing-select[disabled]::part(arrow){display:none}#region-td{position:relative}#region-select{position:absolute;top:0;left:0;width:100%;height:100%;background:0 0;border:none;text-align:start}#region-select[disabled]{opacity:1}#region-select[disabled]::before{display:none}#region-select[disabled]::part(arrow){display:none}#price-td{font-weight:700;padding:0 10px}#price-help-button x-popover{width:310px}#subscription-buttons{margin-top:10px}#subscription-buttons>x-button{flex:1;min-width:fit-content;margin-left:10px}#subscription-buttons>x-button:first-child{margin-left:0}#progress-bar{margin-top:30px}`;
  #ft;
  #F;
  #wt = null;
  #vt = null;
  #yt = null;
  constructor() {
    super();
    this["#table"].addEventListener("click", (af) => this.#kt(af));
    this["#quantity-input"].addEventListener("changeend", (af) => this.#Ct(af));
    this["#billing-select"].addEventListener("change", () => this.#St(event));
    this["#region-select"].addEventListener("change", () => this.#Tt());
    this["#billing-button"].addEventListener("click", () => this.#$t());
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#subscribe-button"].addEventListener("click", () => this.#Et());
  }
  async l() {
    this.#A();
    Bi.auth.addEventListener(
      "usersubscriptionchange",
      (this.#ft = () => {
        this.#A();
      })
    );
    a2.addEventListener(
      "localeschange",
      (this.#F = () => {
        this.#Lt();
      })
    );
  }
  h() {
    Bi.auth.removeEventListener("usersubscriptionchange", this.#ft);
    a2.removeEventListener("localeschange", this.#F);
  }
  #kt(af) {
    let ag = af.target.closest("a");
    let ah = af.target.closest("td");
    if (ag) {
      af.preventDefault();
      this.o.navigate(ag.href, true);
    } else if (
      ah?.cellIndex > 0 &&
      ah.closest("thead, tbody") &&
      this["#table"].hasAttribute("data-disabled") === false
    ) {
      let aj;
      if (ah.cellIndex === 1) {
        aj = vi;
      } else if (ah.cellIndex === 2) {
        if (this["#billing-select"].value === "monthly") {
          aj = ki;
        } else if (this["#billing-select"].value === "yearly") {
          aj = yi;
        }
      }
      if (this.#wt !== aj) {
        this.#wt = aj;
        this.#Lt();
        this.#Ut();
      }
    }
  }
  #Ct(af) {
    this.#vt = this["#quantity-input"].value;
    this.#Lt();
    this.#Ut();
  }
  #St() {
    if (this["#billing-select"].value === "yearly") {
      this.#wt = yi;
    } else if (this["#billing-select"].value === "monthly") {
      this.#wt = ki;
    }
    this.#Lt();
    this.#Ut();
  }
  #Tt() {
    this.#yt = this["#region-select"].value;
    this.#Lt();
    this.#Ut();
  }
  #$t() {
    window.open(this["#billing-button"].value);
  }
  #Pt() {
    window.open(this["#cancel-button"].value);
  }
  async #Et() {
    let af = Bi.auth.userSubscription;
    if (af === null) {
      let ag = null;
      let ah = null;
      try {
        ag = await Bi.database.getDocument("subscriptions", Bi.auth.userID);
      } catch (aj) {
        ah = aj;
      }
      if (ag !== null || ah !== null) {
        this.o.openMessageDialog({
          title: {
            href: "#network-error",
          },
          detail: ah
            ? bi(ah)
            : "To resolve this problem please contact Boxy SVG support.",
          buttons: [
            {
              href: "#close",
            },
          ],
        });
        return;
      }
    }
    if (
      af === null ||
      af.status === "deleted" ||
      (af.status === "past_due" && af.cancellationEffectiveDate !== null)
    ) {
      this.o.navigate(
        qi(
          location.href,
          "dialog",
          "checkout→" + this.#wt + "×" + this.#vt + "×" + this.#yt
        )
      );
    } else if (af.status === "active") {
      if (await this.o.openPasswordConfirmDialog()) {
        this["#main"].hidden = true;
        this["#progress-bar"].hidden = false;
        this.o.lockInput();
        let ak = null;
        let al = this.#wt;
        let am = this.#vt;
        try {
          await Bi.functions.postMessage("changeUserSubscriptionPlan", {
            userID: Bi.auth.userID,
            subscriptionID: af.subscriptionID,
            planID: al,
            quantity: am,
          });
        } catch (an) {
          ak = an;
        }
        this["#main"].hidden = false;
        this["#progress-bar"].hidden = true;
        this.o.unlockInput();
        if (ak) {
          this.o.openMessageDialog({
            title: {
              href: "#failed-to-change-subscription-plan",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else {
          let ap = this.#Dt(al, am);
          this.o.openMessageDialog({
            title: {
              href: "#changed-subscription-plan",
            },
            detail: {
              href: "#changed-subscription-plan.detail",
              args: {
                planName: ap,
              },
            },
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      }
    }
  }
  #Dt(af, ag = 1) {
    let ah;
    let aj;
    aj = ag === 1 ? "1 user" : ag + " users";
    if (af === vi) {
      ah = "Standard (yearly billing, " + aj + ")";
    } else if (af === ki) {
      ah = "Premium (monthly billing, " + aj + ")";
    } else if (af === yi) {
      ah = "Premium (yearly billing, " + aj + ")";
    }
    return ah;
  }
  #A() {
    this.#zt();
    this.#Lt();
    this.#Ut();
  }
  #zt() {
    if (Bi.auth.userID === null) {
      this["#info-section"].hidden = true;
    } else {
      this["#info-section"].hidden = false;
      let af = Bi.auth.userSubscription;
      let [ag, ah] = Bi.checkout.getEffectiveSubscriptionPlanID(af);
      if (af === null) {
        this["#subscription-plan-span"].innerHTML =
          '<x-message href="#subscription-plan.standard"></x-message>';
        let aj = Bi.auth.userRegisteredTime + 1296000000;
        if (st(Date.now() - aj) < 15) {
          this["#subscription-status-span"].innerHTML =
            '<x-message href="#subscription-status.active-trial" args="date:' +
            aj +
            '"></x-message>';
        } else {
          this["#subscription-status-span"].innerHTML =
            '<x-message href="#subscription-status.expired-trial" args="date:' +
            aj +
            '"></x-message>';
        }
      } else if (ah === true) {
        this["#subscription-plan-span"].innerHTML =
          ag === vi ? "Standard" : "Premium";
        this["#subscription-status-span"].innerHTML =
          '<x-message href="#subscription-status.active-org"></x-message>';
      } else {
        this["#subscription-plan-span"].innerHTML = this.#Dt(ag, af.quantity);
        if (af.status === "active") {
          let ak = new Date(af.nextBillDate).getTime();
          this["#subscription-status-span"].innerHTML =
            '<x-message href="#subscription-status.active" args="date:' +
            ak +
            '"></x-message>';
        } else if (af.status === "deleted") {
          let al = new Date(af.cancellationEffectiveDate).getTime();
          this["#subscription-status-span"].innerHTML =
            '<x-message href="#subscription-status.cancelled" args="date:' +
            al +
            '"></x-message>';
        } else if (af.status === "past_due") {
          if (af.cancellationEffectiveDate === null) {
            this["#subscription-status-span"].innerHTML =
              '<x-message href="#subscription-status.past-due"></x-message>';
          } else {
            let am = new Date(af.cancellationEffectiveDate).getTime();
            this["#subscription-status-span"].innerHTML =
              '<x-message href="#subscription-status.cancelled" args="date:' +
              am +
              '"></x-message>';
          }
        }
      }
    }
  }
  async #Lt() {
    if (Bi.auth.userID === null) {
      this["#table-section"].hidden = true;
    } else {
      let af = Bi.auth.userSubscription;
      let [ag, ah] = Bi.checkout.getEffectiveSubscriptionPlanID(af);
      if (this.#wt === null) {
        this.#wt = ag || vi;
      }
      if (this.#vt === null) {
        this.#vt = af ? af.quantity : 1;
      }
      if (this.#yt === null) {
        if (af && af.region) {
          this.#yt = af.region;
        } else {
          this.#yt = await Bi.checkout.getDefaultRegion();
        }
      }
      this["#table-section"].hidden = false;
      if (this.#wt === null) {
        for (let aj of this["#table-head"].querySelectorAll("td")) {
          aj.part.remove("selected-cell");
        }
        for (let ak of this["#table-body"].querySelectorAll("td")) {
          ak.part.remove("selected-cell");
        }
        this["#quantity-td"].part.remove("selected-cell");
        this["#discount-td"].part.remove("selected-cell");
        this["#billing-td"].part.remove("selected-cell");
        this["#region-td"].part.remove("selected-cell");
        this["#price-td"].part.remove("selected-cell");
        this["#cloud-button"].disabled = true;
      } else if (this.#wt === vi) {
        for (let al of this["#table-head"].querySelectorAll("td")) {
          if (al.cellIndex === 1) {
            al.part.add("selected-cell");
          } else {
            al.part.remove("selected-cell");
          }
        }
        for (let am of this["#table-body"].querySelectorAll("td")) {
          if (am.cellIndex === 1) {
            am.part.add("selected-cell");
          } else {
            am.part.remove("selected-cell");
          }
        }
        this["#quantity-td"].part.add("selected-cell");
        this["#discount-td"].part.add("selected-cell");
        this["#billing-td"].part.add("selected-cell");
        this["#region-td"].part.add("selected-cell");
        this["#price-td"].part.add("selected-cell");
        this["#cloud-button"].disabled = true;
      } else if (this.#wt === ki || this.#wt === yi) {
        for (let an of this["#table-head"].querySelectorAll("td")) {
          if (an.cellIndex === 2) {
            an.part.add("selected-cell");
          } else {
            an.part.remove("selected-cell");
          }
        }
        for (let ap of this["#table-body"].querySelectorAll("td")) {
          if (ap.cellIndex === 2) {
            ap.part.add("selected-cell");
          } else {
            ap.part.remove("selected-cell");
          }
        }
        this["#quantity-td"].part.add("selected-cell");
        this["#discount-td"].part.add("selected-cell");
        this["#billing-td"].part.add("selected-cell");
        this["#region-td"].part.add("selected-cell");
        this["#price-td"].part.add("selected-cell");
        this["#cloud-button"].disabled = false;
      }
      if (ah) {
        this["#table"].setAttribute("data-disabled", "");
        this["#standard-plan-radio"].disabled = true;
        this["#premium-plan-radio"].disabled = true;
      } else {
        this["#table"].removeAttribute("data-disabled");
        this["#standard-plan-radio"].disabled = false;
        this["#premium-plan-radio"].disabled = false;
      }
      this["#standard-plan-radio"].toggled = this.#wt === vi;
      this["#premium-plan-radio"].toggled = this.#wt === ki || this.#wt === yi;
      if (ah) {
        this["#billing-row"].hidden = true;
      } else {
        this["#billing-row"].hidden = false;
        if (this.#wt === vi) {
          this["#billing-select"].disabled = true;
          this["#billing-select"].value = "yearly";
        } else if (this.#wt === ki || this.#wt === yi) {
          this["#billing-select"].disabled = ah;
          this["#billing-select"].value =
            this.#wt === ki ? "monthly" : "yearly";
        }
      }
      if (ah) {
        this["#quantity-row"].hidden = true;
      } else {
        this["#quantity-row"].hidden = false;
        this["#quantity-input"].value = this.#vt;
      }
      if (ah) {
        this["#region-row"].hidden = true;
      } else {
        this["#region-row"].hidden = false;
        if (af && af.status === "active") {
          this["#region-row"].hidden = true;
        } else {
          if (this["#region-menu"].lang !== a2.locale) {
            let aq = new Intl.Collator(a2.locale);
            let ar = new Intl.DisplayNames([a2.locale], {
              type: "region",
            });
            let au = $i
              .map((aw) => [aw, ar.of(aw)])
              .sort((aw, ax) => aq.compare(aw[1], ax[1]));
            let av = "";
            for (let [aw, ax] of au) {
              av +=
                '<x-menuitem value="' +
                aw +
                '"><x-label>' +
                ax +
                "</x-label></x-menuitem>";
            }
            this["#region-menu"].lang = a2.locale;
            this["#region-menu"].innerHTML = av;
          }
          this["#region-select"].value = this.#yt;
        }
      }
      if (ah) {
        this["#discount-row"].hidden = true;
        this["#price-row"].hidden = true;
      } else {
        let ay;
        let az = 0;
        if (
          af &&
          af.status === "active" &&
          af.subscriptionPlanID === this.#wt &&
          af.quantity === this.#vt
        ) {
          let aB = z(af.unitPrice * af.quantity, 2);
          let aC = {
            style: "currency",
            currency: af.currency,
            currencyDisplay: "symbol",
          };
          ay = new Intl.NumberFormat(a2.locale, aC).format(aB);
          if (af.quantity >= 100) {
            az = 0.3;
          } else if (af.quantity >= 30) {
            az = 0.2;
          } else if (af.quantity >= 10) {
            az = 0.1;
          }
        } else {
          this["#price-td"].innerHTML =
            '<x-message href="#fetching" ellipsis></x-message>';
          let aD = await Bi.checkout.getListSubscription(
            this.#wt,
            this.#vt,
            this.#yt
          );
          let aE = {
            style: "currency",
            currency: aD.currency,
            currencyDisplay: "symbol",
          };
          ay = new Intl.NumberFormat(a2.locale, aE).format(aD.amount);
          if (aD.tax !== null) {
            ay += " + " + aD.tax;
          }
          az = aD.volumeDiscount;
        }
        let aA =
          az === 0
            ? '<x-message href="#volume-discount.none"></x-message>'
            : az * 100 + "%";
        this["#discount-row"].hidden = false;
        this["#discount-span"].innerHTML = aA;
        this["#price-row"].hidden = false;
        this["#price-td"].innerHTML = ay;
      }
    }
  }
  #Ut() {
    if (Bi.auth.userID === null) {
      this["#buttons-section"].hidden = true;
    } else {
      this["#buttons-section"].hidden = false;
      let af = Bi.auth.userSubscription;
      let [ag, ah] = Bi.checkout.getEffectiveSubscriptionPlanID(af);
      if (ah) {
        this["#billing-button"].disabled = true;
        this["#billing-button"].value = "";
        this["#cancel-button"].disabled = true;
        this["#cancel-button"].value = "";
        this["#subscribe-button"].disabled = true;
        this["#subscribe-button-label"].innerHTML =
          '<x-message href="#subscribe"></x-message>';
      } else if (af === null || af.status === "deleted") {
        this["#billing-button"].disabled = true;
        this["#billing-button"].value = "";
        this["#cancel-button"].disabled = true;
        this["#cancel-button"].value = "";
        this["#subscribe-button"].disabled = false;
        this["#subscribe-button-label"].innerHTML =
          '<x-message href="#subscribe"></x-message>';
      } else if (af.status === "active") {
        this["#billing-button"].disabled = false;
        this["#billing-button"].value = af.updateURL;
        this["#cancel-button"].disabled = false;
        this["#cancel-button"].value = af.cancelURL;
        this["#subscribe-button"].disabled =
          this.#wt === af.subscriptionPlanID && this.#vt === af.quantity;
        this["#subscribe-button-label"].innerHTML =
          '<x-message href="#change-plan"></x-message>';
      } else if (af.status === "past_due") {
        if (af.cancellationEffectiveDate === null) {
          this["#billing-button"].disabled = false;
          this["#billing-button"].value = af.updateURL;
          this["#cancel-button"].disabled = false;
          this["#cancel-button"].value = af.cancelURL;
          this["#subscribe-button"].disabled = true;
          this["#subscribe-button-label"].innerHTML =
            '<x-message href="#change-plan"></x-message>';
        } else {
          this["#billing-button"].disabled = true;
          this["#billing-button"].value = "";
          this["#cancel-button"].disabled = true;
          this["#cancel-button"].value = "";
          this["#subscribe-button"].disabled = false;
          this["#subscribe-button-label"].innerHTML =
            '<x-message href="#subscribe"></x-message>';
        }
      }
    }
  }
}
customElements.define("bx-subscriptionsettings", Gi);
class Hi extends ni {
  static _shadowTemplate = ie` <template> <h2><x-message href="#delete-account"></x-message></h2> <div id="default-view"> <section id="delete-account-section"> <h3><x-message href="#warning"></x-message></h3> <p><x-message href="#delete-account-hint"></x-message></p> <x-box> <x-input id="password-input" type="password"> <x-label id="password-placeholder"><x-message href="#enter-your-password-here"></x-message></x-label> </x-input> <x-button id="delete-account-button" disabled="disabled"> <x-label><x-message href="#delete-account"></x-message></x-label> </x-button> </x-box> </section> </div> <div id="progress-view" hidden> <x-progressbar id="progress-bar"></x-progressbar> <x-label id="progress-label">Connecting to server…</x-label> </div> </template>
  `;
  static _shadowStyleSheet = se`#default-view{width:100%;height:100%}#password-input{flex:1;max-width:none;margin-right:8px}#progress-view{display:flex;flex-flow:column;align-items:center;justify-content:center;margin-top:30px}#progress-view[hidden]{display:none}#progress-label{margin-top:14px}`;
  #at;
  constructor() {
    super();
    this["#password-input"].addEventListener("input", () => this.#A());
    this["#delete-account-button"].addEventListener("click", () => this.#Mt());
  }
  l() {
    Bi.auth.addEventListener("userchange", (this.#at = () => this.#A()));
    this.#A();
  }
  h() {
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  #A() {
    if (this["#password-input"].value.length === 0) {
      this["#delete-account-button"].disabled = true;
      this["#delete-account-button"].toggled = false;
      this["#delete-account-button"].part.remove("delete-button");
    } else {
      this["#delete-account-button"].disabled = false;
      this["#delete-account-button"].toggled = true;
      this["#delete-account-button"].part.add("delete-button");
    }
  }
  async #Mt() {
    this["#default-view"].hidden = true;
    this["#progress-view"].hidden = false;
    this.o.lockInput();
    {
      this["#progress-label"].textContent = "Validating password…";
      let af = this["#password-input"].value;
      let ag = null;
      try {
        await Bi.auth.reauthenticate(af);
      } catch (ah) {
        ag = ah;
      }
      if (ag) {
        this["#default-view"].hidden = false;
        this["#progress-view"].hidden = true;
        this.o.unlockInput();
        if (ag.code === "auth/wrong-password") {
          this["#password-input"].setCustomValidity("Wrong password");
          this["#delete-account-button"].disabled = true;
        } else {
          this.o.openMessageDialog({
            title: {
              href: "#failed-to-delete-account",
            },
            detail: ag.message + " (" + ag.code + ")",
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        return;
      }
    }
    {
      this["#progress-label"].textContent = "Deleting account…";
      let aj = null;
      try {
        await Bi.functions.postMessage("deleteUser", Bi.auth.userID);
      } catch (ak) {
        aj = ak;
      }
      if (aj) {
        this["#default-view"].hidden = false;
        this["#progress-view"].hidden = true;
        this.o.unlockInput();
        this.o.openMessageDialog({
          title: {
            href: "#failed-to-delete-account",
          },
          detail: bi(aj),
          buttons: [
            {
              href: "#close",
            },
          ],
        });
        return;
      }
    }
    this["#progress-label"].textContent = "Logging out…";
    await it(1000);
    Bi.auth.logOut();
    {
      this.o.unlockInput();
      let al = si(this, "dialog");
      if (al) {
        al.close();
      }
    }
  }
}
customElements.define("bx-deleteaccountsettings", Hi);
class Wi extends HTMLElement {
  static observedAttributes = ["value"];
  static #C = ie` <template> <x-box id="container"> <sidebar id="sidebar" part="sidebar"> <x-buttons id="sidebar-buttons" tracking="1" vertical> <x-button skin="nav" value="general" id="general-button" toggled> <x-icon href="#settings"></x-icon> <x-label><x-message href="#general" autocapitalize></x-message></x-label> <x-tooltip><x-message href="#general"></x-message></x-tooltip> </x-button> <x-button skin="nav" value="ui"> <x-icon href="#settings-ui"></x-icon> <x-label><x-message href="#ui" autocapitalize></x-message></x-label> <x-tooltip><x-message href="#ui"></x-message></x-tooltip> </x-button> <x-button skin="nav" value="markup"> <x-icon href="#settings-markup"></x-icon> <x-label><x-message href="#markup" autocapitalize></x-message></x-label> <x-tooltip><x-message href="#markup"></x-message></x-tooltip> </x-button> <x-button skin="nav" value="garbage-collector"> <x-icon href="#settings-garbage-collector"></x-icon> <x-label><x-message href="#garbage-collector" autocapitalize></x-message></x-label> <x-tooltip><x-message href="#garbage-collector"></x-message></x-tooltip> </x-button> <x-button skin="nav" value="keyboard"> <x-icon href="#settings-keyboard"></x-icon> <x-label><x-message href="#keyboard" autocapitalize></x-message></x-label> <x-tooltip><x-message href="#keyboard"></x-message></x-tooltip> </x-button> <hr id="sidebar-separator-1"> <x-button skin="nav" value="profile" id="profile-button"> <x-icon href="#settings-profile"></x-icon> <x-label><x-message href="#public-profile"></x-message></x-label> <x-tooltip><x-message href="#public-profile"></x-message></x-tooltip> </x-button> <x-button skin="nav" value="auth" id="auth-button"> <x-icon href="#settings-auth"></x-icon> <x-label><x-message href="#authentication"></x-message></x-label> <x-tooltip><x-message href="#authentication"></x-message></x-tooltip> </x-button> <x-button skin="nav" value="subscription" id="subscription-button"> <x-icon href="#settings-subscription"></x-icon> <x-label><x-message href="#subscription"></x-message></x-label> <x-tooltip><x-message href="#subscription"></x-message></x-tooltip> </x-button> <x-button skin="nav" value="delete-account" id="delete-account-button"> <x-icon href="#settings-delete-account"></x-icon> <x-label><x-message href="#delete-account"></x-message></x-label> <x-tooltip><x-message href="#delete-account"></x-message></x-tooltip> </x-button> </x-buttons> <hr id="sidebar-separator-2"> <x-button id="logout-button" condensed> <x-icon href="#logout"></x-icon> <x-label><x-message href="#log-out"></x-message></x-label> <x-tooltip><x-message href="#log-out"></x-message></x-tooltip> </x-button> </sidebar> <main id="main"> <bx-generalsettings id="general-settings" data-name="general"></bx-generalsettings> <bx-uisettings id="ui-settings" data-name="ui"></bx-uisettings> <bx-markupsettings id="markup-settings" data-name="markup"></bx-markupsettings> <bx-garbagecollectorsettings id="garbage-collector-settings" data-name="garbage-collector"> </bx-garbagecollectorsettings> <bx-keyboardsettings id="keyboard-settings" data-name="keyboard"></bx-keyboardsettings> <bx-profilesettings id="profile-settings" data-name="profile"></bx-profilesettings> <bx-authsettings id="auth-settings" data-name="auth"></bx-authsettings> <bx-subscriptionsettings id="subscription-settings" data-name="subscription"></bx-subscriptionsettings> <bx-deleteaccountsettings id="delete-account-settings" data-name="delete-account"></bx-deleteaccountsettings> </main> </x-box> <div id="titlebar"></div> </template>
  `;
  static #S = se`
    :host {
      display: block;
      width: 100%;
      height: 100%;
    }
    :host(:focus) {
      outline: none;
    }

    #container {
      width: 100%;
      height: 100%;
    }

    /* Titlebar */

    #titlebar {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 28px;
      display: none;
    }
    :host-context(bx-macapp) #titlebar {
      display: block;
      -webkit-app-region: drag;
    }

    /* Sidebar */

    #sidebar {
      display: flex;
      flex-flow: column;
      height: 100%;
      border-right: 1px solid transparent;
      box-sizing: border-box;
    }
    :host-context(bx-macapp) #sidebar {
      padding-top: 28px;
    }

    #sidebar-separator-2 {
      margin: auto 0 0 0;
    }

    #sidebar-buttons {
      min-width: 190px;
      padding: 6px;
    }
    @media all and (max-width: 770px) {
      #sidebar-buttons {
        min-width: 0px;
      }
    }

    #sidebar-buttons x-button x-icon {
      margin: 0;
    }

    #sidebar-buttons x-button x-label {
      margin-left: 12px;
    }
    @media all and (max-width: 770px) {
      #sidebar-buttons x-button x-label {
        display: none;
      }
    }

    #sidebar x-button x-tooltip {
      --align: right;
    }
    #sidebar x-button[toggled] x-tooltip {
      display: none;
    }
    @media all and (min-width: 771px) {
      #sidebar x-button x-tooltip {
        display: none;
      }
    }

    #sidebar #logout-button {
      margin: 6px;
      width: calc(100% - 12px);
    }
    @media all and (max-width: 770px) {
      #sidebar #logout-button x-icon {
        margin: 0;
      }

      #sidebar #logout-button x-label {
        display: none;
      }
    }

    /* Main */

    #main {
      width: 100%;
      height: 100%;
      padding: 30px 30px;
      box-sizing: border-box;
      overflow: auto;
    }
  `;
  get value() {
    if (this.hasAttribute("value")) {
      return this.getAttribute("value");
    } else {
      return "general";
    }
  }
  set value(af) {
    if (af === null) {
      this.removeAttribute("value");
    } else {
      this.setAttribute("value", af);
    }
  }
  commands = {
    copy: {
      exec: () => document.execCommand("copy"),
    },
    cut: {
      exec: () => document.execCommand("cut"),
    },
    paste: {
      exec: () => document.execCommand("paste"),
    },
    selectAll: {
      exec: () => document.execCommand("selectAll"),
    },
    undo: {
      exec: () => document.execCommand("undo"),
    },
    redo: {
      exec: () => document.execCommand("redo"),
    },
  };
  #T;
  #$;
  #P;
  #at;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "open",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Wi.#S];
    this.#P.append(document.importNode(Wi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.setAttribute("tabindex", "0");
    this["#sidebar-buttons"].addEventListener("toggle", () => {
      this.value = this["#sidebar-buttons"].value;
      this.dispatchEvent(new CustomEvent("valuechange"));
    });
    this["#logout-button"].addEventListener("click", async () => {
      await Bi.auth.logOut();
      if (this.#$) {
        this.#$.close();
      }
    });
    this.addEventListener("keydown", (ag) => {
      if (ag.code === "Escape" && ag.defaultPrevented === false && this.#$) {
        this.#$.close();
      }
    });
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#$ = si(this, "dialog");
    Bi.auth.addEventListener("userchange", (this.#at = () => this.#A()));
    this.#A();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userchange", this.#at);
    for (let af of this["#main"].children) {
      af.enabled = false;
    }
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "value") {
      this.#At();
    }
  }
  #At() {
    if (this.isConnected) {
      this.#A();
    }
  }
  #A() {
    let af =
      ["bx-progressivewebapp", "bx-portalwebapp"].includes(this.#T.localName) &&
      Bi.auth.userID !== null;
    let ag = this.value;
    if (
      ["profile", "auth", "subscription", "delete-account"].includes(ag) &&
      af === false
    ) {
      ag = "general";
    }
    if (this.#T.localName === "bx-embeddedwebapp" && ag === "general") {
      ag = "ui";
    }
    this["#sidebar-buttons"].value = ag;
    this["#general-button"].hidden = this.#T.localName === "bx-embeddedwebapp";
    this["#profile-button"].hidden = af === false;
    this["#auth-button"].hidden = af === false;
    this["#subscription-button"].hidden = af === false;
    this["#delete-account-button"].hidden = af === false;
    this["#logout-button"].hidden = af === false;
    this["#sidebar-separator-1"].hidden = af === false;
    this["#sidebar-separator-2"].hidden = af === false;
    for (let ah of this["#main"].children) {
      ah.enabled = ah.getAttribute("data-name") === ag;
    }
  }
}
customElements.define("bx-settings", Wi);
class Ki extends HTMLElement {
  static observedAttributes = ["enabled"];
  static #C = ie` <template> <main id="main"> <section id="locale-section"> <h4><x-message href="#language" autocapitalize></x-message></h4> <x-select id="locale-select"> <x-menu id="locale-select-menu"></x-menu> </x-select> </section> <section id="theme-section"> <h4><x-message href="#theme" autocapitalize></x-message></h4> <x-buttons id="theme-buttons" tracking="1"> <x-button value="fluent" condensed> <x-icon href="#windows"></x-icon> <x-tooltip><x-label>Windows</x-label></x-tooltip> </x-button> <x-button value="cupertino" condensed> <x-icon href="#macos"></x-icon> <x-tooltip><x-label>macOS</x-label></x-tooltip> </x-button> <x-button value="adwaita" condensed toggled> <x-icon href="#gnome"></x-icon> <x-tooltip><x-label>GNOME</x-label></x-tooltip> </x-button> </x-buttons> </section> <section id="color-scheme-section"> <h4><x-message href="#color-scheme" autocapitalize></x-message></h4> <x-buttons id="color-scheme-buttons" tracking="1"> <x-button value="light" condensed toggled> <x-label><x-message href="#color-scheme.light" autocapitalize></x-message></x-label> </x-button> <x-button value="dark" condensed> <x-label><x-message href="#color-scheme.dark" autocapitalize></x-message></x-label> </x-button> </x-buttons> </section> <section id="accent-color-section"> <h4><x-message href="#accent-color" autocapitalize></x-message></h4> <x-buttons id="accent-color-buttons" tracking="1"> <x-button value="blue" skin="flat" toggled> <x-swatch></x-swatch> </x-button> <x-button value="purple" skin="flat"> <x-swatch></x-swatch> </x-button> <x-button value="pink" skin="flat"> <x-swatch></x-swatch> </x-button> <x-button value="red" skin="flat" toggled> <x-swatch></x-swatch> </x-button> <x-button value="orange" skin="flat"> <x-swatch></x-swatch> </x-button> <x-button value="yellow" skin="flat"> <x-swatch></x-swatch> </x-button> <x-button value="green" skin="flat" toggled> <x-swatch></x-swatch> </x-button> <x-button value="graphite" skin="flat"> <x-swatch></x-swatch> </x-button> </x-buttons> </section> </main> <footer id="footer" part="footer"> <x-button id="all-settings-button"> <x-icon href="#settings"></x-icon> <x-label><x-message href="#all-settings" autocapitalize ellipsis></x-message></x-label> </x-button>  </footer></template>
  `;
  static #S = se`
    :host {
      width: 240px;
      min-height: 100px;
      border-radius: inherit;
    }

    h4 {
      margin-top: 0;
    }

    /**
     * Main
     */

    #main {
      padding: 10px;
    }

    /**
     * Locale section
     */

    #locale-section {
      margin-bottom: 10px;
    }
    :host-context(bx-navbar:not([collapsed])) #locale-section {
      display: none;
    }

    #locale-section h4 {
      margin-top: 0;
    }

    #locale-select {
      width: 100%;
    }

    /* Theme */

    #theme-section {
      margin-bottom: 10px;
    }

    #theme-buttons {
      width: 100%;
    }

    #theme-buttons > x-button {
      flex: 1;
    }

    /* Color scheme */

    #color-scheme-section {
      margin-bottom: 10px;
    }

    #color-scheme-buttons {
      width: 100%;
    }

    #color-scheme-buttons > x-button {
      flex: 1;
    }

    /* Accent color */

    #accent-color-section {
    }

    #accent-color-buttons {
      width: 100%;
    }

    #accent-color-buttons x-button {
      flex: 1;
      min-height: 22px;
      margin-left: 0px;
    }
    #accent-color-buttons x-button[toggled] x-swatch {
      outline: 3px solid var(--light-accent-color);
      outline-offset: 1px;
    }

    /**
     * Footer
     */

    #footer {
      padding: 10px;
      border-top: 1px solid transparent;
      border-bottom-left-radius: inherit;
      border-bottom-right-radius: inherit;
    }

    #all-settings-button {
      width: 100%;
    }
  `;
  get enabled() {
    return this.hasAttribute("enabled");
  }
  set enabled(af) {
    if (af) {
      this.setAttribute("enabled", "");
    } else {
      this.removeAttribute("enabled");
    }
  }
  #T;
  #Bt;
  #P;
  #at;
  #N;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ki.#S];
    this.#P.append(document.importNode(Ki.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#locale-select"].addEventListener("change", () => this.#_());
    this["#theme-buttons"].addEventListener("toggle", () => this.#Rt());
    this["#color-scheme-buttons"].addEventListener("toggle", () => this.#It());
    this["#accent-color-buttons"].addEventListener("toggle", () => this.#Ft());
    this["#all-settings-button"].addEventListener("click", () => this.#Nt());
    {
      let ag = "";
      for (let ah of He) {
        ag +=
          '\n          <x-menuitem value="' +
          ah +
          '">\n            <x-label>' +
          Pe(ah) +
          "</x-label>\n          </x-menuitem>\n        ";
      }
      this["#locale-select-menu"].innerHTML = ag;
    }
    {
      let aj = Ye();
      let ak = this["#theme-buttons"].querySelector(
        'x-button[value="' + aj + '"]'
      );
      this["#theme-buttons"].prepend(ak);
    }
    if (le === false) {
      this["#theme-buttons"]
        .querySelector("x-button[value=cupertino]")
        .remove();
    }
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#Bt = si(this, "x-button");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "enabled") {
      if (this.enabled) {
        this.#Ot();
      } else {
        this.#_t();
      }
    }
  }
  #Ot() {
    Bi.auth.addEventListener("userchange", (this.#at = () => this.#A()));
    a2.addEventListener("themechange", (this.#N = () => this.#A()));
    this.#A();
  }
  #_t() {
    Bi.auth.removeEventListener("userchange", this.#at);
    a2.removeEventListener("themechange", this.#N);
  }
  #_() {
    a2.setConfig("bx-uisettings:locale", this["#locale-select"].value);
  }
  #Rt() {
    a2.setConfig("bx-uisettings:theme", this["#theme-buttons"].value);
  }
  #It() {
    let af = this["#color-scheme-buttons"].value;
    if (this.#T.localName === "bx-macapp") {
      this.#T.setColorScheme(af);
    } else {
      a2.setConfig("bx-uisettings:colorScheme", af);
    }
  }
  #Ft() {
    a2.setConfig(
      "bx-uisettings:accentColor",
      this["#accent-color-buttons"].value
    );
  }
  async #Nt() {
    await this.#Bt.collapse();
    this.#T.navigate(qi(location.href, "dialog", "settings"));
  }
  #A() {
    {
      let af = a2.getConfig("bx-uisettings:locale", "auto");
      this["#locale-select"].value =
        af === "auto" ? Ze() : He.includes(af) ? af : "en";
    }
    {
      let ag = a2.getConfig("bx-uisettings:theme", "auto");
      if (ag === "cupertino" && le === false) {
        ag = "auto";
      }
      this["#theme-buttons"].value = ag === "auto" ? Ye() : ag;
    }
    {
      let ah = a2.getConfig("bx-uisettings:colorScheme", "auto");
      let aj = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
      this["#color-scheme-buttons"].value = ah === "auto" ? aj : ah;
    }
    {
      let { presetAccentColors } = a2;
      let al = a2.getConfig("bx-uisettings:accentColor", "auto");
      let am = this.#T.getSystemAccentColorName();
      presetAccentColors[am];
      if (al === "auto") {
        this["#accent-color-buttons"].value = am;
      } else {
        let an = !!presetAccentColors[al];
        this["#accent-color-buttons"].value = an ? al : null;
      }
      for (let ap of [
        ...this["#accent-color-buttons"].querySelectorAll("x-swatch"),
      ]) {
        let aq = ap.parentElement;
        ap.value = presetAccentColors[aq.value];
      }
    }
  }
}
customElements.define("bx-quickuisettings", Ki);
class Zi extends HTMLElement {
  static observedAttributes = ["enabled"];
  static #C = ie` <template> <x-throbber id="throbber"></x-throbber> <main id="main" hidden> <bx-avatar id="avatar"></bx-avatar> <h3 id="name"></h3> <h4 id="email"></h4> <div id="anchors"> <a id="posts-anchor" href="/profile" target="_blank"><x-message href="#posts" autocapitalize></x-message></a> </div> </main> <footer id="footer" part="footer" hidden> <x-button id="profile-button"> <x-icon href="#login"></x-icon> <x-label><x-message href="#edit-profile" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="logout-button"> <x-icon href="#logout"></x-icon> <x-label><x-message href="#log-out" autocapitalize></x-message></x-label> </x-button>  </footer></template>
  `;
  static #S = se`
    :host {
      display: block flex;
      align-items: center;
      justify-content: center;
      flex-flow: column;
      width: 200px;
      min-height: 200px;
      border-radius: inherit;
    }

    /**
     * Main
     */

    #main {
      padding: 10px;
      width: 100%;
      box-sizing: border-box;
    }

    /* Avatar */

    #avatar {
      margin: 0 auto;
      width: 120px;
      height: 120px;
    }

    /* Name */

    #name {
      margin: 7px auto 0px;
      text-align: center;
    }

    /* Email */

    #email {
      margin: 3px auto;
      text-align: center;
      opacity: 0.5;
      font-weight: 500;
    }

    /* Anchors */

    #anchors {
      font-size: 12px;
      text-align: center;
    }

    #anchors a {
      margin: 0 3px;
    }
    #anchors a:hover {
      cursor: pointer;
    }

    /**
     * Footer
     */

    #footer {
      width: 100%;
      padding: 10px;
      box-sizing: border-box;
      border-top: 1px solid transparent;
      border-bottom-left-radius: inherit;
      border-bottom-right-radius: inherit;
    }

    #profile-button {
      width: 100%;
    }

    #logout-button {
      width: 100%;
      margin-top: 8px;
    }
  `;
  get enabled() {
    return this.hasAttribute("enabled");
  }
  set enabled(af) {
    if (af) {
      this.setAttribute("enabled", "");
    } else {
      this.removeAttribute("enabled");
    }
  }
  #T;
  #Bt;
  #P;
  #at;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Zi.#S];
    this.#P.append(document.importNode(Zi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#logout-button"].addEventListener("click", () => this.#qt());
    this["#profile-button"].addEventListener("click", () => this.#jt());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#Bt = si(this, "x-button");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "enabled") {
      if (this.enabled) {
        this.#Ot();
      } else {
        this.#_t();
      }
    }
  }
  #Ot() {
    Bi.auth.addEventListener("userchange", (this.#at = () => this.#A()));
    this.#A();
  }
  #_t() {
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  async #qt() {
    await this.#Bt.collapse();
    Bi.auth.logOut();
  }
  async #jt() {
    await this.#Bt.collapse();
    this.#T.navigate(qi(location.href, "dialog", "settings→profile"));
  }
  #A() {
    if (Bi.auth.isReady) {
      this["#main"].hidden = false;
      this["#footer"].hidden = false;
      this["#throbber"].hidden = true;
      let af = Bi.auth.userProfile;
      if (af) {
        this["#avatar"].hidden = false;
        this["#avatar"].type = af.avatar || "random";
        this["#avatar"].value = Bi.auth.userID;
      } else {
        this["#avatar"].hidden = true;
      }
      if (af) {
        this["#name"].hidden = false;
        this["#name"].textContent = af.name;
      } else {
        this["#name"].hidden = true;
      }
      if (af) {
        this["#email"].hidden = false;
        this["#email"].textContent = Bi.auth.userEmail;
      } else {
        this["#email"].hidden = true;
      }
      if (af) {
        let ag = Bi.auth.userID;
        let ah = $e(af.name);
        this["#anchors"].hidden = false;
        this["#posts-anchor"].href = "/profiles/" + ag + "/" + ah;
      } else {
        this["#anchors"].hidden = true;
      }
      this["#profile-button"].hidden = !af;
      this["#logout-button"].hidden = !af;
      this["#footer"].hidden =
        this["#profile-button"].hidden && this["#logout-button"].hidden;
    } else {
      this["#main"].hidden = true;
      this["#footer"].hidden = true;
      this["#throbber"].hidden = false;
    }
  }
}
customElements.define("bx-quickprofilesettings", Zi);
class Yi extends HTMLElement {
  static #C = ie` <template> <x-button id="install-button" skin="flat" condensed hidden> <x-icon href="#install"></x-icon> <x-label><x-message href="#install"></x-message></x-label> </x-button> <x-button id="settings-button" skin="flat" condensed> <x-icon href="#settings"></x-icon> <x-label><x-message href="#settings"></x-message></x-label> <x-tooltip><x-label><x-message href="#settings"></x-message></x-label></x-tooltip> <x-popover id="settings-popover" modal> <bx-quickuisettings id="quick-ui-settings"></bx-quickuisettings> </x-popover> </x-button> <x-button id="login-button" skin="flat" condensed hidden> <x-icon id="login-icon" href="#login"></x-icon> <x-label><x-message href="#log-in" autocapitalize></x-message></x-label> <x-tooltip><x-label><x-message href="#log-in"></x-message></x-label></x-tooltip> </x-button> <x-button id="profile-button" skin="flat" condensed hidden> <bx-avatar id="profile-avatar"></bx-avatar> <x-popover id="profile-popover" modal> <bx-quickprofilesettings id="quick-profile-settings"></bx-quickprofilesettings> </x-popover> </x-button> </template>
  `;
  static #S = se`
    :host {
      display: block flex;
      align-items: center;
      justify-content: space-evenly;
      height: 100%;
      gap: 16px;
    }
    :host([collapsed]) {
      justify-content: center;
      flex-flow: column;
      gap: 6px;
    }

    :host > x-button {
      color: var(--text-color);
    }
    :host > x-button::part(arrow) {
      display: none;
    }
    :host([collapsed]) > x-button {
      width: 100%;
    }

    :host > x-button > x-label {
      color: var(--text-color);
      font-weight: 500;
      margin-left: 8px;
    }

    :host([collapsed]) > x-button > x-label {
      display: none;
    }

    :host > x-button > x-icon {
      color: var(--text-color);
    }

    x-button > x-popover {
      cursor: initial;
    }

    x-button > x-tooltip {
      --align: right;
    }
    :host(:not([collapsed])) x-button > x-tooltip {
      display: none;
    }

    /* "Install" button */

    #install-button {
      overflow: hidden;
    }

    #install-button x-icon {
      flex: 1;
      width: 18px;
      min-width: 18px;
      height: 18px;
    }

    /* "Settings" button */

    #settings-button {
      overflow: hidden;
    }

    #settings-button x-icon {
      width: 18px;
      min-width: 18px;
      height: 18px;
    }

    :host([collapsed]) #settings-popover {
      --align: right;
    }

    /* "Log in" button */

    #login-button {
      overflow: hidden;
    }

    #login-button x-icon {
      width: 18px;
      min-width: 18px;
      height: 18px;
    }

    /* "Profile" button */

    #profile-avatar {
      width: 30px;
      min-width: 30px;
      height: 30px;
    }

    :host([collapsed]) #profile-popover {
      --align: right;
    }
  `;
  get collapsed() {
    return this.hasAttribute("collapsed");
  }
  set collapsed(af) {
    if (af) {
      this.setAttribute("collapsed", "");
    } else {
      this.removeAttribute("collapsed");
    }
  }
  #P;
  #T;
  #N;
  #Vt;
  #Gt;
  #ft;
  #R;
  #Ht;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Yi.#S];
    this.#P.append(document.importNode(Yi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#install-button"].addEventListener("click", () => this.#Wt());
    this["#login-button"].addEventListener("click", () => this.#Kt());
    this["#settings-popover"].addEventListener(
      "open",
      () => (this["#quick-ui-settings"].enabled = true)
    );
    this["#settings-popover"].addEventListener(
      "close",
      () => (this["#quick-ui-settings"].enabled = false)
    );
    this["#profile-popover"].addEventListener(
      "open",
      () => (this["#quick-profile-settings"].enabled = true)
    );
    this["#profile-popover"].addEventListener(
      "close",
      () => (this["#quick-profile-settings"].enabled = false)
    );
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#A();
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#A();
      })
    );
    a2.addEventListener(
      "themechange",
      (this.#N = () => {
        this.#A();
      })
    );
    a2.addEventListener(
      "configchange",
      (this.#Vt = (af) => {
        this.#Zt(af);
      })
    );
    window.addEventListener(
      "installprompt",
      (this.#Ht = (af) => {
        this.#A();
      })
    );
    this.#T.addEventListener(
      "installedchange",
      (this.#R = () => {
        this.#A();
      })
    );
  }
  disconnectedCallback() {
    Bi.auth.rermoveEventListener("userprofilechange", this.#Gt);
    a2.removeEventListener("themechange", this.#N);
    a2.rermoveEventListener("configchange", this.#Vt);
    window.addEventListener("installprompt", this.#Ht);
    this.#T.removeEventListener("installedchange", this.#R);
  }
  #Zt(af) {
    let { key, value, origin } = af.detail;
    if (key === "bx-uisettings:showInstallButton") {
      this.#A();
    }
  }
  #Wt() {
    this.#T.navigate(qi(location.href, "dialog", "install"));
  }
  #Kt() {
    this.#T.navigate(qi(location.href, "dialog", "login"));
  }
  #A() {
    if (
      a2.getConfig("bx-uisettings:showInstallButton", true) === false ||
      this.#T.isInstalled === true ||
      this.#T.localName !== "bx-progressivewebapp"
    ) {
      this["#install-button"].hidden = true;
    } else {
      this["#install-button"].hidden = (!re || !le) && !window.install;
    }
    if (Bi.auth.isReady === false || Bi.auth.userID !== null) {
      this["#login-button"].hidden = true;
    } else {
      this["#login-button"].hidden = false;
    }
    if (Bi.auth.userID === null) {
      this["#profile-button"].hidden = true;
    } else {
      this["#profile-button"].hidden = false;
      this["#profile-avatar"].type = Bi.auth.userProfile?.avatar || "random";
      this["#profile-avatar"].value = Bi.auth.userID;
    }
  }
}
customElements.define("bx-metabar", Yi);
class Xi extends HTMLElement {
  static observedAttributes = ["collapsed"];
  static #C = ie` <template> <div id="resize-grippie"></div> <main id="main"> <section id="branding-section"> <a id="logo-anchor" href="/" tabindex="-1"> <img id="logo" src="./images/boxy-svg.svg" alt="Boxy SVG logo" width="50px" height="50px" fetchpriority="high"> </a> <a id="heading-anchor" href="/" tabindex="-1"> <h1 part="heading">Boxy SVG</h1> </a> </section> <hr> <section id="locale-section"> <x-icon href="#locale"></x-icon> <x-select id="locale-select"> <x-menu id="locale-select-menu"></x-menu> </x-select> </section> <hr> <section id="nav-section"> <x-buttons id="nav-buttons" tracking="1"> <a id="home-anchor"> <x-button id="home-button" skin="nav" data-context="home"> <x-icon href="#home"></x-icon> <x-label><x-message href="#home"></x-message></x-label> <x-tooltip><x-label><x-message href="#home"></x-message></x-label></x-tooltip> </x-button> </a> <a id="blog-anchor"> <x-button id="blog-button" skin="nav" data-context="blog"> <x-icon href="#blog"></x-icon> <x-label><x-message href="#blog"></x-message></x-label> <x-tooltip><x-label><x-message href="#blog"></x-message></x-label></x-tooltip> </x-button> </a> <a id="ideas-anchor"> <x-button id="ideas-button" skin="nav" data-context="ideas"> <x-icon href="#ideas"></x-icon> <x-label class="label"><x-message href="#ideas"></x-message></x-label> <x-tooltip><x-label><x-message href="#ideas"></x-message></x-label></x-tooltip> </x-button> </a> <a id="bugs-anchor"> <x-button id="bugs-button" skin="nav" data-context="bugs"> <x-icon href="#bugs"></x-icon> <x-label class="label"><x-message href="#bugs"></x-message></x-label> <x-tooltip><x-label><x-message href="#bugs"></x-message></x-label></x-tooltip> </x-button> </a> <a id="questions-anchor"> <x-button id="questions-button" skin="nav" data-context="questions"> <x-icon href="#questions"></x-icon> <x-label class="label"><x-message href="#questions"></x-message></x-label> <x-tooltip><x-label><x-message href="#questions"></x-message></x-label></x-tooltip> </x-button> </a> <a id="tutorials-anchor"> <x-button id="tutorials-button" skin="nav" data-context="tutorials"> <x-icon href="#tutorials"></x-icon> <x-label class="label"><x-message href="#tutorials"></x-message></x-label> <x-tooltip><x-label><x-message href="#tutorials"></x-message></x-label></x-tooltip> </x-button> </a> <a id="changelog-anchor"> <x-button id="changelog-button" skin="nav" data-context="changelog"> <x-icon href="#document"></x-icon> <x-label class="label"><x-message href="#changelog"></x-message></x-label> <x-tooltip><x-label><x-message href="#changelog"></x-message></x-label></x-tooltip> </x-button> </a> <a id="embed-anchor"> <x-button id="embed-button" skin="nav" data-context="embed"> <x-icon href="#settings-markup"></x-icon> <x-label class="label"><x-message href="#embed"></x-message></x-label> <x-tooltip><x-label><x-message href="#embed"></x-message></x-label></x-tooltip> </x-button> </a> <a id="search-anchor"> <x-button id="search-button" skin="nav" data-context="search"> <x-icon href="#search"></x-icon> <x-label class="label"><x-message href="#search"></x-message></x-label> <x-tooltip><x-label><x-message href="#search"></x-message></x-label></x-tooltip> </x-button> </a> </x-buttons> </section> <section id="launch-section"> <a id="launch-anchor" href="./app" target="_blank"> <x-button id="launch-button" skin="header" size="large" toggled> <x-icon href="#open"></x-icon> <x-label><x-message href="#launch-app"></x-message></x-label> <x-tooltip><x-label><x-message href="#launch-app"></x-message></x-label></x-tooltip> </x-button> </a> </section> <hr> <section id="settings-section"> <bx-metabar id="metabar"></bx-metabar> </section> <hr> <section id="footer-section"> <span><a id="about-anchor" href="?dialog=about"><x-message href="#about"></x-message></a></span> <span><a id="contact-anchor" href="?dialog=contact"><x-message href="#contact"></x-message></a></span> <span><a href="/press"><x-message href="#press"></x-message></a></span> <span><a href="/legal"><x-message href="#legal"></x-message></a></span> </section> </main> </template>
  `;
  static #S = se`
    :host {
      width: 250px;
      height: 100%;
      position: relative;
      border-right: 1px solid transparent;
    }
    :host([collapsed]) {
      width: 58px !important;
    }

    #main {
      display: flex;
      height: 100%;
      flex-flow: column;
      overflow: auto;
    }

    a {
      font-weight: 400;
    }

    hr {
      margin: 0;
    }

    /**
     * Resize grippie
     */

    #resize-grippie {
      position: absolute;
      width: 8px;
      height: 100%;
      background: transparent;
      top: 0;
      right: -8px;
      cursor: col-resize;
      z-index: 2;
      touch-action: pan-y;
    }

    /**
     * Branding section
     */

    #branding-section {
      display: flex;
      flex-flow: row;
      align-items: center;
      justify-content: center;
      padding: 8px 0px;
      background: var(--background-color);
    }

    /* Logo */

    #branding-section a {
      user-drag: none;
    }

    #branding-section img {
      display: block;
      pointer-events: none;
      user-select: none;
    }
    :host([collapsed]) #branding-section img {
      width: 40px;
      height: 40px;
    }

    /* Heading */

    #branding-section h1 {
      margin: 0px 0px 0px 6px;
      padding: 0px;
      font-size: 17px;
      font-weight: 900;
      text-transform: uppercase;
      line-height: 1;
      user-select: none;
    }

    #heading-anchor {
      color: inherit;
      text-decoration: none;
    }
    :host([collapsed]) #heading-anchor {
      display: none;
    }

    /**
     * Locale section
     */

    #locale-section {
      display: flex;
      align-items: center;
      padding: 5px 10px;
      background: var(--background-color);
    }
    :host([collapsed]) #locale-section {
      display: none;
    }

    #locale-section > x-icon {
      min-width: 20px;
      min-height: 20px;
      margin: 0px 8px 0px 16px;
    }

    #locale-select {
      width: 100%;
      min-width: 0px;
    }

    :host([collapsed]) #locale-section + hr {
      display: none;
    }

    /**
     * Nav section
     */

    #nav-section {
      flex: 1;
    }

    #nav-buttons {
      padding: 5px 10px;
      width: 100%;
      display: flex;
      flex-flow: column;
    }
    :host([collapsed]) #nav-buttons {
      padding: 4px;
    }

    #nav-buttons a {
      width: 100%;
      text-decoration: none;
    }
    #nav-buttons a:hover {
      filter: none;
    }
    #nav-buttons a:not([href]) {
      pointer-events: none;
    }

    #nav-buttons x-button {
      width: 100%;
    }

    #nav-buttons x-button > x-tooltip {
      --align: right;
    }
    :host(:not([collapsed])) #nav-buttons x-button > x-tooltip {
      display: none;
    }

    #nav-buttons x-icon {
    }
    :host([collapsed]) #nav-buttons x-icon {
      margin: 0;
    }

    :host([collapsed]) #nav-buttons x-button > x-label {
      display: none;
    }

    /**
     * Launch section
     */

    #launch-section {
      padding: 0 14px 12px 14px;
    }
    :host([collapsed]) #launch-section {
      padding: 0 4px 4px 4px;
    }

    #launch-button {
      width: 100%;
    }

    #launch-button x-tooltip {
      --align: right;
    }
    :host(:not([collapsed])) #launch-button x-tooltip {
      display: none;
    }

    #launch-anchor {
      text-decoration: none;
    }
    #launch-anchor:hover {
      filter: none;
    }

    :host([collapsed]) #launch-button > x-label {
      display: none;
    }

    /**
     * Settings section
     */

    #settings-section {
      padding: 4px 14px;
      background: var(--background-color);
    }

    /**
     * Footer section
     */

    #footer-section {
      padding: 8px 14px;
      font-size: 10px;
      background: var(--dark-background-color);
    }
    :host([collapsed]) #footer-section {
      display: none;
    }

    #footer-section span::after {
      content: " /";
      letter-spacing: 2px;
    }
    #footer-section span:last-child::after {
      display: none;
    }

    #footer-section a {
      color: inherit;
      text-decoration: none;
      font-weight: 500;
    }
    #footer-section a:hover {
      text-decoration: underline;
    }
  `;
  get collapsed() {
    return this.hasAttribute("collapsed");
  }
  set collapsed(af) {
    if (af) {
      this.setAttribute("collapsed", "");
    } else {
      this.removeAttribute("collapsed");
    }
  }
  #P;
  #T;
  #Yt;
  #Gt;
  #Xt;
  #Jt = null;
  #Qt = false;
  #ei = null;
  constructor() {
    super();
    this.#Jt = a2.getConfig("bx-navbar:width", null);
    this.#Qt = a2.getConfig("bx-navbar:forceCollapsed", false);
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Xi.#S];
    this.#P.append(document.importNode(Xi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this["#locale-select"].addEventListener("change", () => this.#_());
    this["#resize-grippie"].addEventListener("pointerdown", (ag) =>
      this.#ti(ag)
    );
    {
      let ag = "";
      for (let ah of He) {
        ag +=
          '\n          <x-menuitem value="' +
          ah +
          '">\n            <x-label>' +
          Pe(ah) +
          "</x-label>\n          </x-menuitem>\n        ";
      }
      this["#locale-select-menu"].innerHTML = ag;
      this["#locale-select"].value = "en";
    }
    {
      let aj = window.matchMedia("(min-width: 880px )");
      if (this.#Qt === false) {
        this.collapsed = !aj.matches;
      }
      aj.addEventListener("change", (ak) => {
        if (this.#Qt === false) {
          this.collapsed = !ak.matches;
        }
      });
    }
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#T.addEventListener(
      "locationchange",
      (this.#Yt = (af) => {
        this.#ii(af);
      })
    );
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#A();
      })
    );
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    this.#T.removeEventListener("locationchange", this.#Yt);
    Bi.auth.rermoveEventListener("userprofilechange", this.#Gt);
    a2.removeEventListener("localeschange", this.#Xt);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "collapsed") {
      this["#metabar"].collapsed = this.collapsed;
    }
  }
  #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
    let al = new URLSearchParams(toLocation.search);
    let am =
      fromLocation === null || fromLocation.pathname !== toLocation.pathname;
    let an = fromLocation === null || fromLocation.search !== toLocation.search;
    let ap = ak.get("page") !== al.get("page");
    let aq = ak.get("year") !== al.get("year");
    if (am || an || ap || aq) {
      this.#A();
    }
    if (method === "push" || method === "replace") {
      this.#ei = af.detail.state.index;
      if (am || ap || aq) {
        this.#ai();
      }
    } else if (method === "pop") {
      if ((am || ap || aq) && this.#ei !== null) {
        this.#ai(af.detail.state.index < this.#ei);
      }
      this.#ei = af.detail.state.index;
    }
  }
  #si() {
    this.#A();
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (ag) {
      let { origin, pathname } = ag;
      if (
        origin === location.origin &&
        pathname.startsWith("/") &&
        pathname !== "./app"
      ) {
        af.preventDefault();
        this.#T.navigate(ag.href);
      }
    }
  }
  #_() {
    let af = this["#locale-select"].value;
    a2.setConfig("bx-uisettings:locale", af);
  }
  #ti(af) {
    if (af.buttons > 1) {
      return;
    }
    let ag;
    let ah;
    let aj = this.clientWidth;
    let ak = aj;
    this["#resize-grippie"].setPointerCapture(af.pointerId);
    af.preventDefault();
    this["#resize-grippie"].addEventListener(
      "pointermove",
      (ag = (al) => {
        ak = aj - (af.clientX - al.clientX);
        ak = M(ak, 170, Math.min(350, window.innerWidth - 200));
        if (ak === 170) {
          if (this.#Qt === false) {
            this.collapsed = true;
          }
        } else {
          this.collapsed = false;
          this.#Qt = false;
        }
        this.style.width = ak + "px";
        this.dispatchEvent(new CustomEvent("resize"));
      })
    );
    this["#resize-grippie"].addEventListener(
      "pointerup",
      (ah = () => {
        this["#resize-grippie"].removeEventListener("pointermove", ag);
        this["#resize-grippie"].removeEventListener("pointerup", ah);
        this["#resize-grippie"].removeEventListener("pointercancel", ah);
        if (this.collapsed) {
          this.style.width = null;
          this.#Jt = null;
          this.#Qt = true;
          a2.setConfig("bx-navbar:width", null);
          a2.setConfig("bx-navbar:forceCollapsed", true);
        } else {
          this.#Jt = ak;
          this.#Qt = false;
          a2.setConfig("bx-navbar:width", ak);
          a2.setConfig("bx-navbar:forceCollapsed", null);
        }
      })
    );
    this["#resize-grippie"].addEventListener("pointercancel", ah);
  }
  #ai(af = false) {
    let ag;
    ag =
      af === false
        ? this["#logo"].animate(
            {
              transform: ["rotate(0deg)", "rotate(359deg)"],
            },
            {
              duration: 700,
              easing: "cubic-bezier(.36,.07,.19,.97)",
            }
          )
        : this["#logo"].animate(
            {
              transform: ["rotate(359deg)", "rotate(0deg)"],
            },
            {
              duration: 700,
              easing: "cubic-bezier(.36,.07,.19,.97)",
            }
          );
    return ag.finished;
  }
  #A() {
    if (this.#Qt) {
      this.collapsed = true;
    }
    if (this.#Jt === null) {
      this.style.width = null;
    } else {
      this.style.width = this.#Jt + "px";
    }
    {
      let af = a2.getConfig("bx-uisettings:locale", "auto");
      if (af === "auto") {
        af = Ze();
      }
      if (He.includes(af) === false) {
        af = "en";
      }
      this["#locale-select"].value = af;
    }
    if (location.pathname === "/") {
      this["#home-button"].setAttribute("toggled", "");
      this["#home-anchor"].removeAttribute("href");
    } else {
      this["#home-button"].removeAttribute("toggled");
      this["#home-anchor"].setAttribute("href", "/");
    }
    for (let ag of [
      "blog",
      "ideas",
      "bugs",
      "questions",
      "tutorials",
      "changelog",
      "embed",
      "search",
    ]) {
      if (location.pathname.startsWith("/" + ag)) {
        this["#" + ag + "-button"].setAttribute("toggled", "");
        if (location.pathname + location.search === "/" + ag) {
          this["#" + ag + "-anchor"].removeAttribute("href");
        } else {
          this["#" + ag + "-anchor"].setAttribute("href", "/" + ag);
        }
      } else {
        this["#" + ag + "-button"].removeAttribute("toggled");
        this["#" + ag + "-anchor"].setAttribute("href", "/" + ag);
      }
    }
    this["#metabar"].collapsed = this.collapsed;
    this["#contact-anchor"].href = qi(location.href, "dialog", "contact");
    this["#about-anchor"].href = qi(location.href, "dialog", "about");
  }
}
customElements.define("bx-navbar", Xi);
class Ji extends HTMLElement {
  static #C = ie` <template> <img src="./images/boxy-svg.svg" alt="Boxy SVG logo" width="120px" height="120px" fetchpriority="high"> <h1 part="heading">Boxy SVG</h1> <h2 part="subheading"><x-message href="#scalable-vector-graphics-editor"></x-message></h2> </template>
  `;
  static #S = se`
    :host {
      z-index: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-flow: column;
      margin: 14px 0px 50px;
    }

    img {
      display: block;
      pointer-events: none;
      user-select: none;
      -webkit-user-select: none;
    }

    h1 {
      margin: 7px 0 0 0;
      font-size: 40px;
      font-weight: 900;
      text-transform: uppercase;
      text-align: center;
      line-height: 1.2;
    }

    h2 {
      margin: 0px;
      padding: 7px 10px;
      font-weight: 700;
      font-size: 14px;
      line-height: 1;
      text-transform: uppercase;
      border-width: 1px;
      border-style: solid;
    }
  `;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ji.#S];
    this.#P.append(document.importNode(Ji.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
}
customElements.define("bx-headerblock", Ji);
class Qi extends HTMLElement {
  static #C = ie` <template> <div id="intro-text"> <x-message href="#app-description-short"></x-message> </div> <a href="./app" target="_blank" id="launch-app-anchor"> <x-button id="launch-app-button" skin="header" toggled> <x-icon href="#open"></x-icon> <x-label><x-message href="#launch-app"></x-message></x-label> </x-button> </a> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      padding: 15px 0 40px;
    }

    :host::before {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 1000%;
      height: 100%;
      transform: translateX(-50%);
      content: " ";
      z-index: -1;
      border-top: 1px solid transparent;
      border-bottom: 1px solid transparent;
    }

    /* Intro text */

    #intro-text {
      position: relative;
      padding: 10px 0 23px;
      font-size: 17px;
      text-align: center;
      line-height: 1.25;
    }

    #intro-text p {
      margin: 8px 0 0 0;
    }
    #intro-text p:first-child {
      margin: 0;
    }

    /* "Launch app" button */

    #launch-app-anchor {
      display: block;
      margin-top: 15px;
      width: 100%;
      filter: none;
      text-decoration: none;
    }

    #launch-app-button {
      width: 100%;
      height: 45px;
    }

    #launch-app-button x-icon {
      width: 19px;
      height: 19px;
    }

    #launch-app-button x-label {
      margin-left: 10px;
      font-size: 18px;
    }
  `;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Qi.#S];
    this.#P.append(document.importNode(Qi.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
}
customElements.define("bx-introblock", Qi);
class es extends HTMLElement {
  static observedAttributes = ["value", "name", "throbber"];
  static #C = ie` <template> <main id="main" part="main"> <img id="thumbnail" part="thumbnail" width="120" height="120"> <x-throbber id="throbber" hidden></x-throbber> <x-icon id="library-icon" href="#library-panel"></x-icon> </main> <footer id="footer" part="footer"> <div id="name" part="name"></div> </footer> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      flex-flow: column;
      user-select: none;
      -webkit-user-select: none;
      pointer-events: none;
    }
    :host([hidden]) {
      display: none;
    }
    :host([highlighted]) {
      filter: brightness(1.3);
    }

    /**
     * Main
     */

    #main {
      display: flex;
      align-items: center;
      justify-content: center;
      flex: 1;
      padding: 12px;
      position: relative;
      box-sizing: border-box;
      pointer-events: all;
      border-width: 1px;
      border-style: solid;
    }

    /* Thubmnail */

    #thumbnail {
      width: 100%;
      height: auto;
      display: block;
      background: var(--checkboard-background);
      border-width: 1px;
      border-style: solid;
      box-sizing: border-box;
      -webkit-user-drag: none;
    }
    #thumbnail[hidden] {
      display: none;
    }
    :host([disabled]) #thumbnail {
      opacity: 0.5;
    }

    /* Library icon */

    #library-icon {
      display: none;
      position: absolute;
      width: 14px;
      height: 14px;
      padding: 5px;
      bottom: 17px;
      right: 17px;
      background: var(--background-color);
      border: 1px solid currentColor;
    }
    :host([library]) #library-icon {
      display: flex;
    }

    /**
     * Footer
     */

    #footer {
      height: 35px;
      font-size: 14.5px;
    }
    :host([disabled]) #footer > *  {
      opacity: 0.5;
    }

    /* Name */

    #name {
      overflow: hidden;
      display: -webkit-box;
      width: fit-content;
      padding: 3px 9px;
      margin: 7px auto 0 auto;
      line-height: 1.25;
      font-weight: 500;
      font-size: 13px;
      text-align: center;
      pointer-events: all;
      -webkit-box-orient: vertical;
      -webkit-line-clamp: 2;
    }
    #name[hidden] {
      display: none;
    }

    #name-input {
      width: 100%;
      height: 23px;
      max-width: none;
      margin-top: 6px;
      font-weight: 500;
      text-align: center;
      pointer-events: all;
    }
  `;
  get value() {
    if (this.hasAttribute("value")) {
      return this.getAttribute("value");
    } else {
      return null;
    }
  }
  set value(af) {
    if (af === null) {
      this.removeAttribute("value");
    } else {
      this.setAttribute("value", af);
    }
  }
  get name() {
    if (this.hasAttribute("name")) {
      return this.getAttribute("name");
    } else {
      return "";
    }
  }
  set name(af) {
    this.setAttribute("name", af);
  }
  get selected() {
    return this.hasAttribute("selected");
  }
  set selected(af) {
    if (af) {
      this.setAttribute("selected", "");
    } else {
      this.removeAttribute("selected");
    }
  }
  get highlighted() {
    return this.hasAttribute("highlighted");
  }
  set highlighted(af) {
    if (af) {
      this.setAttribute("highlighted", "");
    } else {
      this.removeAttribute("highlighted");
    }
  }
  get library() {
    return this.hasAttribute("library");
  }
  set library(af) {
    if (af) {
      this.setAttribute("library", "");
    } else {
      this.removeAttribute("library");
    }
  }
  get disabled() {
    return this.hasAttribute("disabled");
  }
  set disabled(af) {
    if (af) {
      this.setAttribute("disabled", "");
    } else {
      this.removeAttribute("disabled");
    }
  }
  get editable() {
    return this.hasAttribute("editable");
  }
  set editable(af) {
    if (af) {
      this.setAttribute("editable", "");
    } else {
      this.removeAttribute("editable");
    }
  }
  get throbber() {
    return this.hasAttribute("throbber");
  }
  set throbber(af) {
    if (af) {
      this.setAttribute("throbber", "");
    } else {
      this.removeAttribute("throbber");
    }
  }
  #P;
  #oi;
  constructor() {
    super();
    this.setAttribute("draggable", "true");
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, es.#S];
    this.#P.append(document.importNode(es.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#name"].addEventListener("dblclick", () => this.#ni());
    this["#thumbnail"].addEventListener("dblclick", () => this.#li());
  }
  connectedCallback() {
    this.#oi = new ResizeObserver(et(this.#ri, 400, this));
    this.#oi.observe(this, {
      box: "border-box",
    });
    this.#A();
  }
  disconnectedCallback() {
    this.#oi.unobserve(this);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah) {
      if (af === "value") {
        this.#hi();
      } else if (af === "name") {
        this.#ci();
      } else if (af === "throbber") {
        this.#hi();
      }
    }
  }
  #ni() {
    this.editName();
  }
  #li() {
    this.dispatchEvent(
      new CustomEvent("thumbnaildblclick", {
        bubbles: true,
      })
    );
  }
  editName() {
    if (this.hasAttribute("editing")) {
      return;
    }
    this.setAttribute("editing", "");
    let af;
    let ag;
    let ah = this["#name"].textContent;
    let aj = ie`<x-input id="name-input" value="${ah}" validation="instant"></x-input>`;
    this["#name"].before(aj);
    aj.selectAll();
    this["#name"].hidden = true;
    let ak = (al = false) => {
      this.removeAttribute("editing", "");
      aj.removeEventListener("keydown", af);
      aj.removeEventListener("focusout", ag);
      aj.remove();
      this["#name"].hidden = false;
      let am = al === true ? ah : aj.value;
      if (ah === am) {
        this["#name"].textContent = ah;
      } else {
        if (am === "") {
          this["#name"].textContent = "Untitled";
          this["#name"].setAttribute("data-untitled", "");
        } else {
          this["#name"].textContent = Te(am);
          this["#name"].removeAttribute("data-untitled");
        }
        this.dispatchEvent(
          new CustomEvent("namechange", {
            bubbles: true,
            detail: {
              oldName: ah,
              newName: am,
            },
          })
        );
      }
      si(this, "[tabindex]").focus();
    };
    aj.addEventListener(
      "keydown",
      (af = (al) => {
        if (al.key === "Enter") {
          al.stopPropagation();
          ak();
        } else if (al.key === "Escape") {
          al.preventDefault();
          al.stopPropagation();
          ak(true);
        }
      })
    );
    aj.addEventListener(
      "focusout",
      (ag = () => {
        ak();
      })
    );
  }
  hitTest(af) {
    let ag = this["#main"].getBoundingClientRect();
    let ah = this["#name"].getBoundingClientRect();
    if (af instanceof DOMRect) {
      return Ot(ag, af) || Ot(ah, af);
    } else if (af instanceof DOMPoint) {
      return Nt(ag, af) || Nt(ah, af);
    } else {
      return undefined;
    }
  }
  #A() {
    this.#hi();
    this.#ci();
  }
  #hi() {
    if (this.throbber === false) {
      this["#thumbnail"].hidden = false;
      this["#thumbnail"].src =
        "./storage/artworks/" + this.value + ".png";
      this["#throbber"].hidden = true;
    } else {
      this["#thumbnail"].hidden = true;
      this["#throbber"].hidden = false;
    }
    this.#ri();
  }
  #ri() {
    this["#main"].style.minHeight = this["#main"].clientWidth + 2 + "px";
  }
  #ci() {
    if (this.name === "") {
      this["#name"].textContent = "Untitled";
      this["#name"].setAttribute("data-untitled", "");
    } else {
      this["#name"].textContent = Te(this.name);
      this["#name"].removeAttribute("data-untitled");
    }
  }
}
if (customElements.get("bx-cloudfilepreview") === undefined) {
  customElements.define("bx-cloudfilepreview", es);
}
class ts extends HTMLElement {
  static #C = ie` <template> <main id="main"> <h3><x-message href="#live-demo"></x-message></h3> <p><x-message href="#live-demo-hint"></x-message></p> <div id="items"> <a href="./app//app/-LYzdDlq8VjMN2Bl9HUD" target="_blank"> <bx-cloudfilepreview value="-LYzdDlq8VjMN2Bl9HUD" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LYgyzb88SCpJUl7gX90" target="_blank"> <bx-cloudfilepreview value="-LYgyzb88SCpJUl7gX90" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTc2une_8JtTkYo-5f" target="_blank"> <bx-cloudfilepreview value="-LZTc2une_8JtTkYo-5f" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LYgzGKeBXA-G2mfb7WG" target="_blank"> <bx-cloudfilepreview value="-LYgzGKeBXA-G2mfb7WG" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LYgz5nLXlz4Ao0RgrPq" target="_blank"> <bx-cloudfilepreview value="-LYgz5nLXlz4Ao0RgrPq" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTa9ZcpvUBMChd1-jc" target="_blank"> <bx-cloudfilepreview value="-LZTa9ZcpvUBMChd1-jc" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTcQ2XxWmLFiMHIif_" target="_blank"> <bx-cloudfilepreview value="-LZTcQ2XxWmLFiMHIif_" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTce0ULMNZW_iGGi0_" target="_blank"> <bx-cloudfilepreview value="-LZTce0ULMNZW_iGGi0_" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZT_kgM3DaZxqKRPPwy" target="_blank"> <bx-cloudfilepreview value="-LZT_kgM3DaZxqKRPPwy" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTaT_p33ZVSikjDgrn" target="_blank"> <bx-cloudfilepreview value="-LZTaT_p33ZVSikjDgrn" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTbRDkQe2L2kWYhety" target="_blank"> <bx-cloudfilepreview value="-LZTbRDkQe2L2kWYhety" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTd3leeSFbl_73Unfv" target="_blank"> <bx-cloudfilepreview value="-LZTd3leeSFbl_73Unfv" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZT_IJcQVKTJ6OK_ar8" target="_blank"> <bx-cloudfilepreview value="-LZT_IJcQVKTJ6OK_ar8" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTahHRSRXnFr1RaHZC" target="_blank"> <bx-cloudfilepreview value="-LZTahHRSRXnFr1RaHZC" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTb4z9OwCTNhQaxnEx" target="_blank"> <bx-cloudfilepreview value="-LZTb4z9OwCTNhQaxnEx" part="preview"></bx-cloudfilepreview> </a> <a href="./app//app/-LZTfGP2359sW4GS4dxb" target="_blank"> <bx-cloudfilepreview value="-LZTfGP2359sW4GS4dxb" part="preview"></bx-cloudfilepreview> </a> </div> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      padding: 40px 0;
    }

    :host::before {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 1000%;
      height: 100%;
      box-sizing: border-box;
      transform: translateX(-50%);
      content: " ";
      z-index: -1;
      border-top-width: 1px;
      border-top-style: solid;
    }

    h3 {
      margin: 0 0 16px 0;
      font-size: 40px;
      font-weight: 700;
      line-height: 1.2;
    }

    p {
      margin: 0 0 24px 0;
    }

    #items {
      display: flex;
      flex-wrap: wrap;
    }

    #items a {
      display: block;
      width: calc(25% - 14px * (3/4));
      margin: 0 14px 14px 0;
      user-select: none;
      -webkit-user-select: none;
      filter: none;
    }
    #items a:nth-child(4n) {
      margin: 0 0 14px 0;
    }

    #items bx-cloudfilepreview::part(footer) {
      display: none;
    }
  `;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, ts.#S];
    this.#P.append(document.importNode(ts.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
}
customElements.define("bx-demoblock", ts);
let is = {
  ui: "./storage/artworks/-M538anEpEaHc8nctPwz.svg",
  svg: "./storage/artworks/-M52fICO8STo3jd7f3h-.svg",
  filters: "./storage/artworks/-M53G22SpckyLLTDWdKC.svg",
  typography: "./storage/artworks/-M538swplS6o-0WSX9gT.svg",
  developer: "./storage/artworks/-M539HDvYB3OU3xq88gc.svg",
  export: "./storage/artworks/-M53A7hg2lfqGOxkFpyD.svg",
  library: "./storage/artworks/-M539obL12yiuWowe01C.svg",
  tracing: "./storage/artworks/-MIbjeYwL8MnSm_Eq0if.svg",
  symbols: "./storage/artworks/-MIbjhwuFbRk_NV2Xuy-.svg",
  thumbnails: "./storage/artworks/-Mfmib4taXaHpujTANsc.svg",
};
class ss extends HTMLElement {
  static observedAttributes = ["value"];
  static #C = ie` <template> <main> <nav id="thumbs"> <a class="thumb" part="thumb" href="/" data-value="ui"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-ui.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-svg" data-value="svg"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-svg.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-filters" data-value="filters"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-filters.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-typography" data-value="typography"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-typography.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-developer" data-value="developer"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-developer.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-export" data-value="export"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-export.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-library" data-value="library"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-library.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-tracing" data-value="tracing"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-tracing.title"></x-message></x-tooltip> </x-button> </a> <a class="thumb" part="thumb" href="#tour-symbols" data-value="symbols"> <x-button class="thumb-button"> <x-tooltip><x-message href="#tour-symbols.title"></x-message></x-tooltip> </x-button> </a> </nav> <h4 id="title"></h4> <div id="image-wrapper"> <img id="image" part="image" loading="lazy" width="1818" height="1200" src="${is.ui}" alt="Boxy SVG screenshot"> <div id="buttons"> <x-button id="prev-button" part="button" value="prev" skin="circular" size="large"> <x-icon href="#chevron-left"></x-icon> </x-button> <x-button id="next-button" part="button" value="next" skin="circular" size="large"> <x-icon href="#chevron-right"></x-icon> </x-button> </div> </div> <div id="text"> <section id="tour-ui"> <h4><x-message href="#tour-ui.title"></x-message></h4> <x-message href="#tour-ui.description"></x-message> </section> <section id="tour-svg" hidden> <h4><x-message href="#tour-svg.title"></x-message></h4> <x-message href="#tour-svg.description"></x-message> </section> <section id="tour-filters" hidden> <h4><x-message href="#tour-filters.title"></x-message></h4> <x-message href="#tour-filters.description"></x-message> </section> <section id="tour-typography" hidden> <h4><x-message href="#tour-typography.title"></x-message></h4> <x-message href="#tour-typography.description"></x-message> </section> <section id="tour-developer" hidden> <h4><x-message href="#tour-developer.title"></x-message></h4> <x-message href="#tour-developer.description"></x-message> </section> <section id="tour-export" hidden> <h4><x-message href="#tour-export.title"></x-message></h4> <x-message href="#tour-export.description"></x-message> </section> <section id="tour-library" hidden> <h4><x-message href="#tour-library.title"></x-message></h4> <x-message href="#tour-library.description"></x-message> </section> <section id="tour-tracing" hidden> <h4><x-message href="#tour-tracing.title"></x-message></h4> <x-message href="#tour-tracing.description"></x-message> </section> <section id="tour-symbols" hidden> <h4><x-message href="#tour-symbols.title"></x-message></h4> <x-message href="#tour-symbols.description"></x-message> </section> </div> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      padding: 20px 0 50px 0;
    }

    :host::before {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 1000%;
      height: 100%;
      transform: translateX(-50%);
      content: " ";
      z-index: -1;
    }

    /* Thumbs */

    #thumbs {
      margin: 20px 0;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #thumbs .thumb {
      width: 52px;
      height: 52px;
      margin-left: 12px;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
      background: url("${is.thumbnails}");
      background-size: cover;
      background-repeat: no-repeat;
      background-position: 0px 0px;
    }
    #thumbs .thumb:nth-child(1) {
      margin-left: 0;
    }
    #thumbs .thumb:nth-child(2) {
      background-position-x: -50px;
    }
    #thumbs .thumb:nth-child(3) {
      background-position-x: -100px;
    }
    #thumbs .thumb:nth-child(4) {
      background-position-x: -150px;
    }
    #thumbs .thumb:nth-child(5) {
      background-position-x: -200px;
    }
    #thumbs .thumb:nth-child(6) {
      background-position-x: -250px;
    }
    #thumbs .thumb:nth-child(7) {
      background-position-x: -300px;
    }
    #thumbs .thumb:nth-child(8) {
      background-position-x: -350px;
    }
    #thumbs .thumb:nth-child(9) {
      background-position-x: -400px;
    }
    #thumbs .thumb[data-toggled] {
      pointer-events: none;
    }
    #thumbs .thumb:focus {
      outline-color: var(--accent-color);
    }
    #thumbs .thumb:hover {
      filter: none;
    }

    #thumbs .thumb x-button {
      background: none;
      border: none;
      width: 100%;
      height: 100%;
    }

    /* Buttons */

    @media all and (max-width: 830px) {
      #buttons {
        display: none;
      }
    }

    #buttons x-button {
      cursor: pointer;
      margin-top: -16px;
    }

    #prev-button {
      position: absolute;
      left: -50px;
      top: 50%;
    }
    #prev-button x-icon {
      margin-right: 3px;
    }

    #next-button {
      position: absolute;
      right: -50px;
      top: 50%;
    }
    #next-button x-icon {
      margin-left: 3px;
    }

    /* Image */

    #image-wrapper {
      position: relative;
    }

    #image {
      min-height: 100px;
      width: 100%;
      height: auto;
      border-width: 1px;
      border-style: solid;
      box-sizing: border-box;
      cursor: zoom-in;
      user-select: none;
      -webkit-user-select: none;
      user-drag: none;
      -webkit-user-drag: none;
    }
    #image[src="./storage/artworks/-M539obL12yiuWowe01C.svg"] {
      background: none;
      border: none;
    }

    /* Texts */

    #text {
      margin-top: 10px;
    }

    #text section h4 {
      margin: 30px 0 0 0;
      font-size: 24px;
      font-weight: 700;
      line-height: 1.2;
      padding: 0;
      opacity: 1;
      color: inherit;
    }
  `;
  get value() {
    if (this.hasAttribute("value")) {
      return this.getAttribute("value");
    } else {
      return "ui";
    }
  }
  set value(af) {
    this.setAttribute("value", af);
  }
  #P;
  #T;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, ss.#S];
    this.#P.append(document.importNode(ss.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this["#thumbs"].addEventListener("click", (ag) => this.#di(ag));
    this["#buttons"].addEventListener("click", (ag) => this.#ui(ag));
    this["#image"].addEventListener("click", (ag) => this.#pi());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#A();
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "value") {
      this.#A();
    }
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #di(af) {
    let ag = af.target.closest("a");
    if (ag && ag.dataset.value !== this.value) {
      af.preventDefault();
      this.value = ag.dataset.value;
      this.dispatchEvent(new CustomEvent("change"));
    }
  }
  #ui(af) {
    let ag = af.target.closest("x-button");
    let ah = this["#thumbs"].querySelector(":scope > .thumb[data-toggled]");
    af.preventDefault();
    if (ag.value === "next") {
      let aj = ah ? ah.nextElementSibling : null;
      if (aj) {
        this.value = aj.dataset.value;
        this.dispatchEvent(new CustomEvent("change"));
      }
    } else if (ag.value === "prev") {
      let ak = ah ? ah.previousElementSibling : null;
      if (ak) {
        this.value = ak.dataset.value;
        this.dispatchEvent(new CustomEvent("change"));
      }
    }
  }
  #pi() {
    this.#T.imageViewer.showModal(this["#image"]);
  }
  #A() {
    for (let af of this["#thumbs"].children) {
      if (af.dataset.value === this.value) {
        af.setAttribute("data-toggled", "");
        af.setAttribute("tabindex", "-1");
        af.part.add("toggled-thumb");
      } else {
        af.removeAttribute("data-toggled");
        af.removeAttribute("tabindex");
        af.part.remove("toggled-thumb");
      }
    }
    this["#prev-button"].disabled = this.value === "ui";
    this["#next-button"].disabled = this.value === "symbols";
    this["#image"].style.opacity = 0.5;
    this["#image"].src = is[this.value];
    this["#image"].addEventListener(
      "load",
      () => (this["#image"].style.opacity = null),
      {
        once: true,
      }
    );
    for (let ag of this["#text"].children) {
      ag.hidden = ag.id !== "tour-" + this.value;
    }
  }
}
customElements.define("bx-tourblock", ss);
class as extends HTMLElement {
  static observedAttributes = ["type", "value"];
  static #C = ie` <template> <a id="anchor" rel="noopener"> <x-icon id="icon"></x-icon> <x-message id="message"></x-message> </a> </template>
  `;
  static #S = se`
    :host {
      display: block;
      width: 100%;
      height: 138px;
      background: red;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
      user-select: none;
      -webkit-user-select: none;
      overflow: hidden;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Anchor
     */

    #anchor {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      text-decoration: none;
      color: inherit;
      -webkit-user-drag: none;
    }
    #anchor:hover {
      filter: none;
    }

    /**
     * Icon
     */

    #icon {
      width: 85px;
      height: 85px;
      margin-right: 18px;
      color: white;
    }
    #icon[href="#macos"] {
      width: 75px;
      height: 75px;
      margin-right: 18px;
    }
    #icon[href="#flathub"] {
      width: 95px;
      height: 95px;
      margin-right: 28px;
    }

    /**
     * Message
     */

    #message {
      font-size: 26px;
      line-height: 1;
    }
    #message strong {
      display: block;
      color: white;
      font-size: 45px;
      font-weight: 500;
    }
  `;
  get value() {
    return this.getAttribute("value") || "pwa";
  }
  set value(af) {
    if (af === null) {
      this.removeAttribute("value");
    } else {
      this.setAttribute("value", af);
    }
  }
  #P;
  #T;
  #at;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [as.#S];
    this.#P.append(document.importNode(as.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#A();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && this.#P && af === "value") {
      this.#A();
    }
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (ag && ag.origin === location.origin && ag.pathname.startsWith("/")) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  async #A() {
    if (this.value === "pwa") {
      this["#icon"].href = "#boxy-svg-medium";
      this["#anchor"].target = "";
      if (Bi.auth.userID === null) {
        this["#anchor"].href = "/?dialog=register";
        this["#message"].href = "#register-to-start-15-day-free-trial";
      } else {
        this["#anchor"].href = "/?dialog=settings→subscription";
        this["#message"].href = "#manage-your-subscription";
      }
    } else if (this.value === "mas") {
      let af =
        Bi.auth.userSubscription?.region ||
        (await Bi.checkout.getDefaultRegion());
      this["#anchor"].target = "_blank";
      this["#anchor"].href =
        "https://itunes.apple.com/us/app/boxy-svg/id611658502".replace(
          "/us/",
          "/" + af.toLowerCase() + "/"
        );
      this["#icon"].href = "#macos";
      this["#message"].href = "#download-on-mac-app-store";
    } else if (this.value === "flathub") {
      this["#anchor"].target = "_blank";
      this["#anchor"].href = "https://flathub.org/apps/com.boxy_svg.BoxySVG";
      this["#icon"].href = "#flathub";
      this["#message"].href = "#download-on-flathub";
    }
  }
}
customElements.define("bx-downloadbutton", as);
class os extends HTMLElement {
  static #C = ie` <template> <h3 part="heading"><x-message href="#get-boxy-svg"></x-message></h3> <div id="nav-buttons"> <x-button skin="footer" value="pwa" size="large" condensed toggled> <x-icon href="#windows"></x-icon> <x-icon href="#macos"></x-icon> <x-icon href="#linux"></x-icon> <x-label>PWA</x-label> </x-button> <x-button skin="footer" value="mas" size="large" part="nav-button" condensed> <x-icon href="#macos"></x-icon> <x-label>Mac App Store</x-label> </x-button> <x-button skin="footer" value="flathub" size="large" part="nav-button" condensed> <x-icon href="#linux"></x-icon> <x-label>Flathub</x-label> </x-button> </div> <div id="views"> <div class="view" data-value="pwa"> <table part="table"> <thead> <tr> <th part="cell header-cell"></th> <th part="cell header-cell"><x-message href="subscription-plan.premium"></x-message></th> <th part="cell header-cell"><x-message href="subscription-plan.standard"></x-message></th> </tr> </thead> <tbody> <tr> <td part="cell"><x-message href="desktop-app"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="web-app"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="save-svg-files-to-disk"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="save-and-host-svg-files-in-cloud"></x-message></td> <td part="cell" data-value="true"> <x-button skin="flat" id="cloud-button"> <x-icon part="true-icon" href="#feature-supported-asterisk"></x-icon> <x-popover modal> <main> <p><x-message href="#cloud-storage-hint" args="email:${Vi}"></x-message></p> </main> </x-popover> </x-button> </td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="sync-settings-between-devices"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> </tbody> <tfoot> <tr> <td part="cell footer-cell"> <x-box> <span> <x-message href="price"></x-message> (<x-message href="price.yearly-subscription"></x-message>) </span> <x-button class="price-help-button" skin="circular" size="small" part="help-button"> <x-icon href="#help"></x-icon> <x-popover modal> <main> <p><x-message href="price-tax-hint"></x-message></p> <p><x-message href="volume-discount-hint"></x-message></p> </main> </x-popover> </x-button> </x-box> </td> <td part="cell footer-cell"> <span id="pwa-premium-price-span"></span> </td> <td part="cell footer-cell"> <span id="pwa-standard-price-span"></span> </td> </tr> </tfoot> </table> </div> <div class="view" data-value="mas" hidden> <table part="table"> <thead> <tr> <th part="cell header-cell"></th> <th part="cell header-cell"><x-message href="subscription-plan.standard"></x-message></th> </tr> </thead> <tbody> <tr> <td part="cell"><x-message href="desktop-app"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="web-app"></x-message></td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="save-svg-files-to-disk"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="save-and-host-svg-files-in-cloud"></x-message></td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="sync-settings-between-devices"></x-message></td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> </tbody> <tfoot> <tr> <td part="cell footer-cell"> <x-box> <span> <x-message href="price"></x-message> (<x-message href="price.one-time-payment"></x-message>) </span> </x-box> </td> <td part="cell footer-cell"> <span id="mas-price-span"></span> </td> </tr> </tfoot> </table> </div> <div class="view" data-value="flathub" hidden> <table part="table"> <thead> <tr> <th part="cell header-cell"></th> <th part="cell header-cell"><x-message href="subscription-plan.standard"></x-message></th> </tr> </thead> <tbody> <tr> <td part="cell"><x-message href="desktop-app"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="web-app"></x-message></td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="save-svg-files-to-disk"></x-message></td> <td part="cell" data-value="true"><x-icon part="true-icon" href="#feature-supported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="save-and-host-svg-files-in-cloud"></x-message></td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> <tr> <td part="cell"><x-message href="sync-settings-between-devices"></x-message></td> <td part="cell" data-value="false"><x-icon part="false-icon" href="#feature-unsupported"></x-icon></td> </tr> </tbody> <tfoot> <tr> <td part="cell footer-cell"><x-message href="price"></x-message></td> <td part="cell footer-cell"><x-message href="price.free"></x-message></td> </tr> </tfoot> </table> </div> </div> <bx-downloadbutton id="download-button"></bx-downloadbutton> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      padding: 20px  0;
    }

    :host::before {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 1000%;
      height: 100%;
      transform: translateX(-50%);
      content: " ";
      z-index: -1;
      border-top-width: 1px;
      border-top-style: solid;
    }

    ::selection {
      color: var(--selection-color);
      background: var(--selection-background-color);
    }

    h3 {
      margin: 0 0 26px 0;
      font-size: 40px;
      font-weight: 700;
      line-height: 1.2;
    }

    /**
     * Nav buttons
     */

    #nav-buttons {
      display: flex;
      flex-wrap: wrap;
      width: calc(100% + 8px);
      margin: 14px 0 0 -4px;
      z-index: 0;
      font-size: 14px;
    }

    #nav-buttons x-button {
      flex: 1;
      margin: 4px;
    }
    #nav-buttons x-button:hover {
      cursor: pointer;
    }
    #nav-buttons x-button[toggled]:hover {
      cursor: default;
    }

    #nav-buttons x-icon {
      width: 19px;
      height: 19px;
      min-width: 19px;
    }
    #nav-buttons x-button[value="pwa"] x-icon[href="#macos"] {
      margin: 0px 2px 3px 4px;
    }

    #nav-buttons x-label {
      margin-left: 8px;
    }

    /**
     * Views
     */

    /* Tables */

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 24px;
    }

    table thead {
      background: none;
    }

    table thead th {
      padding: 10px 10px;
      border-width: 1px;
      border-style: solid;
      text-align: center;
      text-transform: uppercase;
    }
    table thead th:not(:first-child) {
      width: 110px;
    }
    @media all and (max-width: 600px) {
      table thead th:not(:first-child) {
        width: 70px;
      }
    }

    table tbody td {
      padding: 8px 20px;
      border-width: 1px;
      border-style: solid;
      text-align: center;
    }
    table tbody td:first-child {
      text-align: start;
    }
    table tbody td[data-value] {
      padding-top: 0;
      padding-bottom: 0;
    }
    table tbody td[data-value] x-icon {
      width: 15px;
      height: 15px;
    }
    table tbody td[data-value] > * {
      margin: 0 auto;
    }

    table tbody #cloud-button {
      width: 100%;
      height: 100%;
    }
    table tbody #cloud-button::part(arrow) {
      display: none;
    }
    table tbody #cloud-button[size="large"] x-icon {
      width: 15px;
      height: 15px;
    }
    table tbody #cloud-button x-popover {
      width: 300px;
      font-weight: 400;
      font-size: 14px;
      text-align: left;
      user-select: none;
      -webkit-user-select: none;
    }
    table tbody #cloud-button x-popover p {
      margin: 0;
    }

    table tfoot td {
      padding: 8px 10px;
      border-width: 1px;
      border-style: solid;
      text-align: center;
      font-weight: 700;
    }
    table tfoot td:first-child {
      padding: 8px 20px;
      text-align: start;
    }

    table .price-help-button {
      margin-left: auto;
    }
    table .price-help-button::part(arrow) {
      display: none;
    }
    table .price-help-button x-popover {
      width: 390px;
      font-weight: 400;
      font-size: 14px;
      user-select: none;
      -webkit-user-select: none;
    }
    table .price-help-button x-popover p {
      margin: 8px 0 0 0;
    }
    table .price-help-button x-popover p:first-child {
      margin: 0;
    }
    table .price-help-button x-popover ul {
      margin: 8px 0 0 8px;
      list-style: none;
      padding: 0;
    }
    table .price-help-button x-popover li {
      position: relative;
      padding-left: 13px;
      margin: 0;
    }
    table .price-help-button x-popover li:before {
      content: "•";
      font-weight: 700;
      position: absolute;
      left: 0;
    }

    /**
     * Download button
     */

    #download-button {
      margin-top: 28px;
    }
  `;
  #T;
  #P;
  #F;
  #at;
  #mi = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, os.#S];
    this.#P.append(document.importNode(os.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#xi("pwa");
    a2.addEventListener(
      "localeschange",
      (this.#F = () => {
        this.#gi();
      })
    );
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#gi();
      })
    );
    this.#gi();
  }
  disconnectedCallback() {
    a2.removeEventListener("localeschange", this.#F);
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    let ah = af.target.closest("x-button");
    if (ag) {
      if (ag.origin === location.origin && ag.pathname.startsWith("/")) {
        af.preventDefault();
        this.#T.navigate(ag.href);
      }
    } else if (ah && this["#nav-buttons"].contains(ah)) {
      this.#bi(ah);
    }
  }
  #bi(af) {
    if (af.toggled === false) {
      this.#xi(af.value);
    }
  }
  #fi(af, ag, ah) {
    return new Promise(async (aj) => {
      let ak = await Bi.checkout.getListSubscription(af, 1, ag);
      let al = {
        style: "currency",
        currency: ak.currency,
        currencyDisplay: "symbol",
      };
      aj(new Intl.NumberFormat(ah, al).format(ak.amount));
    });
  }
  #wi(af, ag) {
    return new Promise(async (ah) => {
      if (this.#mi === null) {
        this.#mi = Bi.index.getMacAppStorePrices(20);
        this.#mi = await this.#mi;
      } else if (this.#mi instanceof Promise) {
        await this.#mi;
      }
      let aj = this.#mi[af] || this.#mi.US;
      let [ak, al] = aj;
      let am = {
        style: "currency",
        currency: al,
        currencyDisplay: "symbol",
      };
      ah(new Intl.NumberFormat(ag, am).format(ak));
    });
  }
  #xi(af) {
    if (
      af !== [...this["#nav-buttons"].children].find((ag) => ag.toggled).value
    ) {
      for (let ag of this["#nav-buttons"].children) {
        ag.toggled = ag.value === af;
        ag.tabIndex = ag.value === af ? -1 : 0;
        if (ag.toggled) {
          ag.removeAttribute("part");
        } else {
          ag.setAttribute("part", "nav-button");
        }
      }
      for (let ah of this["#views"].children) {
        ah.hidden = ah.dataset.value !== af;
      }
      this["#download-button"].value = af;
      this.#gi();
    }
  }
  async #gi() {
    let af = [...this["#nav-buttons"].children].find((ah) => ah.toggled).value;
    let ag =
      Bi.auth.userSubscription?.region ||
      (await Bi.checkout.getDefaultRegion());
    if (af === "pwa") {
      this["#pwa-standard-price-span"].innerHTML = await this.#fi(
        vi,
        ag,
        a2.locale
      );
      this["#pwa-premium-price-span"].innerHTML = await this.#fi(
        yi,
        ag,
        a2.locale
      );
    } else if (af === "mas") {
      this["#mas-price-span"].innerHTML = await this.#wi(ag, a2.locale);
    }
  }
}
customElements.define("bx-purchaseblock", os);
class ns extends HTMLElement {
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
    }
  `;
  get whenReady() {
    return new Promise((af) => {
      if (this.#vi === null) {
        af();
      } else {
        this.#vi.push(af);
      }
    });
  }
  #vi = [];
  #P = null;
  o = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "open",
    });
    if (this.constructor._shadowTemplate) {
      this.#P.append(
        document.importNode(this.constructor._shadowTemplate.content, true)
      );
    }
    if (this.constructor._shadowStyleSheet) {
      this.#P.adoptedStyleSheets = [
        a2.themeStyleSheet,
        ns.#S,
        this.constructor._shadowStyleSheet,
      ];
    } else {
      this.#P.adoptedStyleSheets = [a2.themeStyleSheet, ns.#S];
    }
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag), true);
    this.setAttribute("extends", "bx-page");
  }
  connectedCallback() {
    this.o = si(this, "#app");
  }
  async scrollElementIntoView(af) {
    await this.whenReady;
    let ag = this.#P.querySelector("#" + CSS.escape(af));
    if (ag) {
      ag.scrollIntoView();
    }
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    {
      let ag = af.target.closest("a");
      if (ag) {
        let ah = new URL(ag.href);
        if (ah.origin === location.origin) {
          af.preventDefault();
          this.o.navigate(ah.href);
        }
      }
    }
    if (af.target.localName === "dialog") {
      let aj = af.target;
      let ak = null;
      if (aj.firstElementChild?.getAttribute("extends") === "bx-form") {
        ak = aj.firstElementChild;
      }
      if (ak) {
        if (ak.dirty) {
          ak.focus();
          ak.blinkFooter();
          af.preventDefault();
          af.stopImmediatePropagation();
        } else if (ak.throbber) {
          af.preventDefault();
          af.stopImmediatePropagation();
        }
      }
    }
  }
  u() {
    if (this.#vi !== null) {
      for (let af of this.#vi) {
        af();
      }
      this.#vi = null;
    }
  }
}
class ls extends ns {
  static _shadowTemplate = ie` <template> <bx-headerblock id="header-block"></bx-headerblock> <bx-introblock id="intro-block"></bx-introblock> <bx-tourblock id="tour-block"></bx-tourblock> <bx-demoblock id="demo-block"></bx-demoblock> <bx-purchaseblock id="purchase-block"></bx-purchaseblock> </template>
  `;
  get canonicalURL() {
    return location.origin;
  }
  #Yt;
  #yi;
  connectedCallback() {
    super.connectedCallback();
    this.o.addEventListener(
      "locationchange",
      (this.#Yt = (af) => {
        this.#ii(af);
      })
    );
    this["#tour-block"].addEventListener(
      "change",
      (this.#yi = () => {
        this.o.navigate("#tour-" + this["#tour-block"].value);
      })
    );
    this.#ki();
    this.u();
  }
  disconnectedCallback() {
    this.o.removeEventListener("locationchange", this.#Yt);
    this["#tour-block"].removeEventListener("change", this.#yi);
  }
  #ii(af) {
    let { fromLocation, toLocation } = af.detail;
    if (
      toLocation.pathname === "/" &&
      fromLocation?.pathname === "/" &&
      fromLocation.hash !== toLocation.hash
    ) {
      this.#ki();
    }
  }
  #ki() {
    if (location.hash.startsWith("#tour-")) {
      this["#tour-block"].value = location.hash.substring(6);
    } else {
      this["#tour-block"].value = "ui";
    }
  }
}
customElements.define("bx-homepage", ls);
class rs extends HTMLElement {
  static #C = ie` <template> <main id="main"> <h3 id="title"></h3> <p id="description"></p> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      padding: 12px 14px;
      border-width: 1px;
      border-style: solid;
    }
    :host([hidden]) {
      display: none;
    }

    #main {
      display: flex;
      flex-flow: column;
      align-items: center;
      justify-content: center;
    }

    #title {
      margin: 0;
      font-size: 18px;
      font-weight: 900;
    }

    #description {
      margin: 6px 0 0 0;
      font-size: 15px;
      line-height: 1.1;
      opacity: 0.8;
    }
    #title:empty + #description {
      margin-top: 0;
    }
    #description:empty {
      display: none;
    }
  `;
  get title() {
    if (this["#title"].firstElementChild) {
      return this["#title"].firstElementChild.href;
    } else {
      return this["#title"].textContent;
    }
  }
  set title(af) {
    if (af.startsWith("#")) {
      this["#title"].innerHTML = '<x-message href="' + af + '"></x-message>';
    } else {
      this["#title"].textContent = af;
    }
  }
  get description() {
    if (this["#description"].firstElementChild) {
      return this["#description"].firstElementChild.href;
    } else {
      return this["#description"].textContent;
    }
  }
  set description(af) {
    if (af.startsWith("#")) {
      this["#description"].innerHTML =
        '<x-message href="' + af + '"></x-message>';
    } else {
      this["#description"].textContent = af;
    }
  }
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, rs.#S];
    this.#P.append(document.importNode(rs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
}
customElements.define("bx-placeholderblock", rs);
class hs extends HTMLElement {
  static #C = ie` <template> <main id="main"> <x-input id="search-input" type="search"> <x-icon href="#search"></x-icon> <x-label><x-message href="#search" autocapitalize ellipsis></x-message></x-label> </x-input> <x-button id="advanced-filters-button"> <x-icon id="advanced-filters-icon" href="#switch"></x-icon> <x-popover id="advanced-filters-popover" modal> <main> <x-switch id="watched-by-me-switch"> <x-label><x-message href="#watched-by-me"></x-message></x-label> </x-switch> <x-switch id="created-by-me-switch"> <x-label><x-message href="#created-by-me"></x-message></x-label> </x-switch> </main> </x-popover> </x-button> <x-select id="sort-select"> <x-menu> <x-menuitem value="createdTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="createdTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="threadUpdatedTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="threadUpdatedTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="commentsCount:desc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="commentsCount:asc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="relevance"> <x-icon href="#search"></x-icon> <x-label><x-message href="#relevance"></x-message></x-label> </x-menuitem> </x-menu> </x-select> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Main
     */

    #main {
      display: flex;
      padding: 8px;
    }

    /* Search input */

    #search-input {
      flex: 1;
      min-width: 60px;
      max-width: none;
    }

    /* Advanced filters button */

    #advanced-filters-button {
      margin-left: 8px;
      padding: 2px 9px;
    }

    #advanced-filters-button::part(arrow) {
      display: none;
    }

    #advanced-filters-icon {
      width: 19px;
      height: 19px;
    }

    #advanced-filters-popover > main {
      padding: 12px;
    }

    #advanced-filters-popover #created-by-me-switch {
      margin-top: 12px;
    }

    /* Sort select */

    #sort-select {
      min-width: 186px;
      margin-left: 8px;
    }
    #sort-select:focus {
      z-index: 1;
    }
    @media all and (max-width: 650px) {
      #sort-select {
        width: 120px;
        min-width: 0px;
      }
    }
    @media all and (max-width: 539px) {
      #sort-select {
        width: 100px;
      }
    }
  `;
  get search() {
    let [af] = this["#search-input"].value.split("#");
    return af.trim();
  }
  set search(af) {
    let [, ag] = this["#search-input"].value.split("#");
    af = af.trim();
    ag = ag === undefined ? null : ag.trim();
    let ah = af;
    if (ag !== null) {
      if (af.length > 0) {
        ah += " #" + ag;
      } else {
        ah += "#" + ag;
      }
    }
    this["#search-input"].value = ah;
  }
  get tag() {
    let [af, ag] = this["#search-input"].value.split("#");
    if (ag === undefined) {
      return null;
    } else {
      return ag.trim();
    }
  }
  set tag(af) {
    let [ag] = this["#search-input"].value.split("#");
    ag = ag.trim();
    let ah = ag;
    if ((af = af === null ? null : af.trim()) !== null) {
      if (ag.length > 0) {
        ah += " #" + af;
      } else {
        ah += "#" + af;
      }
    }
    this["#search-input"].value = ah;
  }
  get watchedBy() {
    return this.#Ci;
  }
  set watchedBy(af) {
    this.#Ci = af;
    this["#watched-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get createdBy() {
    return this.#Ti;
  }
  set createdBy(af) {
    this.#Ti = af;
    this["#created-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get sort() {
    return this["#sort-select"].value;
  }
  set sort(af) {
    this["#sort-select"].value = af;
  }
  #P;
  #Ci = null;
  #Ti = null;
  #Gt;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, hs.#S];
    this.#P.append(document.importNode(hs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#search-input"].addEventListener("change", () => this.#$i());
    this["#watched-by-me-switch"].addEventListener("toggle", () => this.#Pi());
    this["#created-by-me-switch"].addEventListener("toggle", () => this.#Ei());
    this["#sort-select"].addEventListener("change", () => this.#Li());
  }
  connectedCallback() {
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#Si();
      })
    );
    this.#Si();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  #$i() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "search",
      })
    );
  }
  #Pi() {
    this.#Ci = this["#watched-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "watchedBy",
      })
    );
    this.#Si();
  }
  #Ei() {
    this.#Ti = this["#created-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "createdBy",
      })
    );
    this.#Si();
  }
  #Li() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "sort",
      })
    );
  }
  async #Si() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this["#advanced-filters-button"].hidden = true;
    } else {
      this["#advanced-filters-button"].hidden = false;
      if (this.watchedBy || this.createdBy) {
        this["#advanced-filters-icon"].style.color = "var(--accent-color)";
        this["#advanced-filters-icon"].style.transform = "scaleX(-1)";
      } else {
        this["#advanced-filters-icon"].style.color = null;
        this["#advanced-filters-icon"].style.transform = null;
      }
    }
  }
}
customElements.define("bx-blogfilterblock", hs);
class cs extends HTMLElement {
  static observedAttributes = ["details"];
  static #C = ie` <template> <div id="container"> <aside id="sidebar"> <a id="banner-anchor"> <img id="banner-image" width="245px" height="140px"> </a> <div class="skeleton"> <div id="skeleton-image" part="skeleton-item"></div> </div> </aside> <main id="main"> <hgroup> <div id="title" part="title"> <a id="title-anchor"></a> <span id="hashtag-span" part="hashtag"></span> </div> <div id="details" part="details"> <span id="created-detail"> <a id="created-author-anchor"></a> <span id="created-time-span"></span> </span> <span id="updated-detail"> <a id="updated-author-anchor"></a> <span id="updated-time-span"></span> </span> <div id="comments-detail"> <x-icon id="comments-icon" href="#comment-outline"></x-icon> <div id="comments-label"></div> </div> </div> </hgroup> <x-button id="translate-button" size="small" condensed togglable hidden> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <div class="skeleton"> <div id="skeleton-title" part="skeleton-item"></div> <div class="skeleton-details" part="skeleton-item"></div> <div class="skeleton-details" part="skeleton-item"></div> </div> </main> </div> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      align-items: stretch;
      box-sizing: border-box;
      width: 100%;
      padding: 12px 15px;
      position: relative;
    }

    #container {
      display: flex;
      width: 100%;
    }

    #main {
      display: flex;
      justify-content: center;
      flex-flow: column;
      width: 100%;
      padding-left: 16px;
    }

    #sidebar {
      display: flex;
    }

    a {
      color: inherit;
      text-decoration: none;
      font-weight: inherit;
    }
    a:hover {
      text-decoration: underline;
    }

    a x-label {
      cursor: inherit;
    }

    /**
     * Banner image
     */

    #banner-anchor {
      display: flex;
    }
    :host([skeleton]) #banner-anchor {
      display: none;
    }

    #banner-image {
      background: var(--background-color);
      border: 1px solid var(--border-color);
    }

    /**
     * Title
     */

    #title {
      font-weight: 700;
      font-size: 22px;
      line-height: 1.2;
    }
    :host([skeleton]) #title {
      display: none;
    }

    #title a {
      color: inherit;
      filter: none;
    }

    #title #hashtag-span {
      position: relative;
      bottom: 1px;
      margin-left: 4px;
      vertical-align: middle;
      font-size: 15px;
      text-transform: lowercase;
    }

    /**
     * Details
     */

    #details {
      display: flex;
      flex-flow: wrap;
      align-items: center;
      margin-top: 3px;
      font-size: 13.5px;
      line-height: 1.2;
    }
    #details[hidden] {
      display: none;
    }
    :host([skeleton]) #details {
      display: none;
    }

    /* Created */

    #created-detail {
      width: 100%;
      margin: 3px 0px 6px 0px;
    }
    #created-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #created-author-anchor {
      display: inline;
    }

    /* Updated */

    #updated-detail {
      margin: 2px 12px 2px 0px;
    }

    #updated-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #updated-author-anchor {
      display: inline;
    }

    /* Tags */

    a.tag-anchor {
      display: inline-block;
      margin: 2px 6px 2px 0;
      text-decoration: none;
      vertical-align: middle;
    }
    a.tag-anchor:last-of-type {
      margin-right: 12px;
    }

    x-tag {
      vertical-align: middle;
    }

    /* Comments */

    #comments-detail {
      display: flex;
      align-items: center;
    }
    #comments-detail[hidden] {
      display: none;
    }

    #comments-icon {
      margin-left: 2px;
      transform: translateY(1px);
    }

    #comments-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /**
     * "Translate" button
     */

    #translate-button {
      position: absolute;
      bottom: 10px;
      right: 10px;
    }
    :host([skeleton]) #translate-button {
      display: none;
    }

    /**
     * Skeleton
     */

    #skeleton-title {
      display: none;
      height: 26px;
      width: 50%;
    }
    :host([skeleton]) #skeleton-title {
      display: block;
    }

    .skeleton-details {
      display: none;
      height: 13px;
      width: 50%;
      margin-top: 12px;
      opacity: 0.7;
    }
    .skeleton-details + .skeleton-details {
      width: 20%;
    }
    :host([skeleton]) .skeleton-details {
      display: block;
    }

    #skeleton-image {
      display: none;
      width: 245px;
      height: 140px;
    }
    :host([skeleton]) #skeleton-image {
      display: block;
    }
  `;
  get details() {
    if (this.hasAttribute("details")) {
      return this.getAttribute("details")
        .split(" ")
        .filter((af) => af.trim() !== "");
    } else {
      return ["created", "tags"];
    }
  }
  set details(af) {
    this.setAttribute("details", af.join(""));
  }
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    this.#A();
  }
  get skeleton() {
    return this.hasAttribute("skeleton");
  }
  set skeleton(af) {
    if (af) {
      this.setAttribute("skeleton", "");
    } else {
      this.removeAttribute("skeleton");
    }
  }
  #T;
  #P;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, cs.#S];
    this.#P.append(document.importNode(cs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#skeleton-title"].style.width = Ht(50, 90) + "%";
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "details") {
      this.#A();
    }
  }
  blink() {
    return new Promise(async (af) => {
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      await it(200);
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      af();
    });
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (
      ag?.origin === location.origin &&
      (ag.pathname.startsWith("/blog") || ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  #A() {
    if (this.#Ui === null) {
      return;
    }
    let af = this.#Ui;
    let ag = this.details;
    let ah = this.data.id.split("-")[1];
    this["#details"].hidden = ag.length === 0;
    this["#banner-anchor"].href = "/blog/" + ah + "/" + af.threadSlug;
    this["#banner-image"].src = af.banner;
    {
      let aj = Te(af.title);
      this["#title-anchor"].href = "/blog/" + ah + "/" + af.threadSlug;
      this["#title-anchor"].innerHTML = aj;
      if (ag.includes("hashtag")) {
        this["#hashtag-span"].textContent = "#" + ah;
      } else {
        this["#hashtag-span"].textContent = "";
      }
      if (CSS.highlights && af.keywords) {
        let ak = ai(af.keywords, [this["#title"]]);
        let al = CSS.highlights.get("mark") || new Highlight();
        for (let am of ak) {
          al.add(am);
        }
        CSS.highlights.set("mark", al);
      }
    }
    if (ag.includes("created")) {
      let an = af.createdTime;
      this["#created-detail"].hidden = false;
      this["#created-detail"].style.order = ag.indexOf("created");
      this["#created-author-anchor"].href =
        "/profiles/" + af.authorID + "/" + $e(af.authorName);
      this["#created-author-anchor"].textContent = af.authorName;
      if (this.details.includes("author")) {
        this["#created-time-span"].innerHTML =
          '<x-message href="#date-created" args="date: ' +
          an +
          '}"></x-message>';
      } else {
        this["#created-time-span"].innerHTML =
          '<x-message href="#date-rel" args="date:' + an + '}"></x-message>';
      }
    } else {
      this["#created-detail"].hidden = true;
    }
    if (ag.includes("updated")) {
      let ap;
      let aq;
      let ar;
      this["#updated-detail"].hidden = false;
      this["#updated-detail"].style.order = ag.indexOf("updated");
      if (af.commentsCount === 0) {
        ap = af.createdTime;
        aq = "/profiles/" + af.authorID + "/" + $e(af.authorName);
        ar = af.authorName;
      } else {
        ap = af.threadUpdatedTime;
        aq =
          "/profiles/" +
          af.threadUpdatedAuthorID +
          "/" +
          $e(af.threadUpdatedAuthorName);
        ar = af.threadUpdatedAuthorName;
      }
      this["#updated-author-anchor"].href = aq;
      this["#updated-author-anchor"].textContent = ar;
      if (this.details.includes("author")) {
        this["#updated-time-span"].innerHTML =
          '<x-message href="#date-wrote" args="date:' + ap + '}"></x-message>';
      } else {
        this["#updated-time-span"].innerHTML =
          '<x-message href="#date-rel" args="date:' + ap + '}"></x-message>';
      }
    } else {
      this["#updated-detail"].hidden = true;
    }
    if (ag.includes("comments")) {
      this["#comments-detail"].hidden = af.commentsCount === 0;
      this["#comments-detail"].style.order = ag.indexOf("comments");
      this["#comments-label"].textContent = af.commentsCount;
    } else {
      this["#comments-detail"].hidden = true;
    }
    for (let au of this["#details"].querySelectorAll("a.tag-anchor")) {
      au.remove();
    }
    if (ag.includes("tags") && af.tags.length > 0) {
      let av = "";
      let aw = ag.indexOf("tags");
      for (let ax of af.tags) {
        let ay = "/blog?tag=" + ye(ax, " ", "+");
        let az = Vt(ax);
        if (ax.includes(":")) {
          let [aA, aB] = ax.split(":").map((aC) => aC.trim());
          av +=
            '\n              <a class="tag-anchor" href="' +
            ay +
            '" style="order: ' +
            aw +
            ';">\n                <x-tag value="' +
            ax +
            '" skin="colored" style="background: ' +
            az +
            ';">\n                  <x-label slot="scope">' +
            aA +
            "</x-label>\n                  <x-label>" +
            aB +
            "</x-label>\n                </x-tag>\n              </a>\n            ";
        } else {
          av +=
            '\n              <a class="tag-anchor" href="' +
            ay +
            '" style="order: ' +
            aw +
            ';">\n                <x-tag value="' +
            ax +
            '" skin="colored" style="background: ' +
            az +
            ';">\n                  <x-label>' +
            ax +
            "</x-label>\n                </x-tag>\n              </a>\n            ";
        }
      }
      this["#details"].insertAdjacentHTML("beforeend", av);
    }
    if (af.locale === af.srcLocale && af.locale === a2.locale) {
      this["#translate-button"].hidden = true;
    } else {
      this["#translate-button"].toggled = af.locale === a2.locale;
      this["#translate-button"].hidden = false;
      this["#src-locale-message"].href =
        "#language." + (af.srcLocale || af.locale || "en");
      this["#locale-message"].href = "#language." + a2.locale;
    }
  }
}
customElements.define("bx-blogpreviewblock", cs);
let ds = (af, ag = "svg", ah = true) => {
  let aj;
  let ak;
  let al = [];
  aj =
    ag === "html"
      ? ad.Languages.HTML.htmlLanguage
      : ag === "svg"
      ? ad.Languages.XML.xmlLanguage
      : ag === "css"
      ? ad.Languages.CSS.cssLanguage
      : ag === "js"
      ? ad.Languages.JS.javascriptLanguage
      : ad.Languages.XML.xmlLanguage;
  {
    let am = aj.parser.parse(af);
    let an = Object.create(null);
    let ap = new ad.State.RangeSetBuilder();
    ad.Lezer.Highlight.highlightTree(
      am,
      ad.Lezer.Highlight.classHighlighter,
      (aq, ar, au) => {
        ap.add(
          aq,
          ar,
          (an[au] ||= ad.View.Decoration.mark({
            class: au,
          }))
        );
      }
    );
    ak = ap.finish();
  }
  {
    let aq = ad.State.Text.of([af]);
    let ar = aq.line(1);
    let au = ar.from;
    let av = ak.iter(ar.from);
    while (av.value && av.from < ar.to) {
      if (av.from > au) {
        al.push({
          text: aq.sliceString(au, av.from),
          classes: [],
        });
      }
      al.push({
        text: aq.sliceString(av.from, Math.min(ar.to, av.to)),
        classes: [av.value.spec.class],
      });
      au = av.to;
      av.next();
    }
    if (au < ar.to) {
      al.push({
        text: aq.sliceString(au, ar.to),
        classes: [],
      });
    }
  }
  if (ah === false) {
    return al;
  }
  {
    let aw = "";
    for (let ax of al) {
      if (ax.classes.length === 0) {
        aw += Ce(ax.text);
      } else {
        aw +=
          '<span class="' +
          ax.classes.join(" ") +
          '">' +
          Ce(ax.text) +
          "</span>";
      }
    }
    return aw;
  }
};
let us = Symbol();
class ps extends HTMLElement {
  static observedAttributes = ["spellcheck", "readonly", "disabled"];
  static #C = ie` <template> <link rel="stylesheet" href="../../libs/prose-mirror/prose-mirror.css"> <div id="toolbar"> <x-buttons id="inline-buttons" tracking="2"> <x-button id="bold-button" value="bold" condensed> <x-icon href="#bold"></x-icon> <x-tooltip> <x-message href="#bold"></x-message> <x-shortcut value="Control+B"></x-shortcut> </x-tooltip> </x-button> <x-button id="italic-button" value="italic" condensed> <x-icon href="#italic"></x-icon> <x-tooltip> <x-message href="#italic"></x-message> <x-shortcut value="Control+I"></x-shortcut> </x-tooltip> </x-button> <x-button id="underline-button" value="underline" condensed> <x-icon href="#underline"></x-icon> <x-tooltip> <x-message href="#underline"></x-message> <x-shortcut value="Control+U"></x-shortcut> </x-tooltip> </x-button> <x-button id="strikethrough-button" value="strikethrough" condensed> <x-icon href="#strikethrough"></x-icon> <x-tooltip> <x-message href="#strikethrough"></x-message> <x-shortcut value="Control+Shift+X"></x-shortcut> </x-tooltip> </x-button> <x-button id="highlight-button" value="highlight" condensed> <x-icon href="#highlight"></x-icon> <x-tooltip> <x-message href="#highlight"></x-message> <x-shortcut value="Control+Shift+H"></x-shortcut> </x-tooltip> </x-button> <x-button id="code-button" value="code" condensed> <x-icon href="#code"></x-icon> <x-tooltip> <x-message href="#code"></x-message> <x-shortcut value="Control+E"></x-shortcut> </x-tooltip> </x-button> </x-buttons> <x-buttons id="block-buttons" tracking="1"> <x-button id="heading-button" value="heading" condensed> <x-icon href="#heading"></x-icon> <x-tooltip> <x-message href="#heading"></x-message> </x-tooltip> </x-button> <x-button id="subheading-button" value="subheading" condensed> <x-icon href="#subheading"></x-icon> <x-tooltip> <x-message href="#subheading"></x-message> </x-tooltip> </x-button> <x-button id="paragraph-button" value="paragraph" condensed> <x-icon href="#paragraph"></x-icon> <x-tooltip> <x-message href="#paragraph"></x-message> </x-tooltip> </x-button> <x-button id="unordered-list-button" value="unordered-list" condensed> <x-icon href="#unordered-list"></x-icon> <x-tooltip> <x-message href="#unordered-list"></x-message> </x-tooltip> </x-button> <x-button id="ordered-list-button" value="ordered-list" condensed> <x-icon href="#ordered-list"></x-icon> <x-tooltip> <x-message href="#ordered-list"></x-message> </x-tooltip> </x-button> </x-buttons> <x-buttons id="language-buttons" tracking="0"> <x-button value="svg" condensed> <x-icon href="#logo-svg"></x-icon> <x-tooltip>SVG</x-tooltip> </x-button> <x-button value="html" condensed> <x-icon href="#logo-html"></x-icon> <x-tooltip>HTML</x-tooltip> </x-button> <x-button value="css" condensed> <x-icon href="#logo-css"></x-icon> <x-tooltip>CSS</x-tooltip> </x-button> <x-button value="js" condensed> <x-icon href="#logo-js"></x-icon> <x-tooltip>JavaScript</x-tooltip> </x-button> </x-buttons> <x-input id="alt-input"> <x-label><x-message href="#none"></x-message></x-label> <x-tooltip><x-message href="#alternative-text"></x-message></x-tooltip> </x-input> <x-numberinput id="size-input" suffix="%" min="10" max="100" condensed> <x-label><x-message href="#size.auto"></x-message></x-label> <x-stepper></x-stepper> <x-tooltip><x-message href="#size"></x-message></x-tooltip> </x-numberinput> <x-buttons id="nesting-buttons" tracking="-1"> <x-button id="decrease-indent-button" value="decrease-indent" condensed> <x-icon href="#decrease-indent"></x-icon> <x-tooltip> <x-message href="#decrease-indent"></x-message> <x-shortcut value="Control+["></x-shortcut> </x-tooltip> </x-button> <x-button id="increase-indent-button" value="increase-indent" condensed> <x-icon href="#increase-indent"></x-icon> <x-tooltip> <x-message href="#increase-indent"></x-message> <x-shortcut value="Control+]"></x-shortcut> </x-tooltip> </x-button> </x-buttons> <x-box id="link-box"> <x-button id="link-button" value="link" condensed> <x-icon href="#link"></x-icon> <x-tooltip> <x-message href="#link"></x-message> <x-shortcut value="Control+K"></x-shortcut> </x-tooltip> </x-button> <x-input id="link-input"> <x-label><x-message href="#url"></x-message></x-label> </x-input> </x-box> <x-button id="insert-button" condensed> <x-icon href="#plus"></x-icon> <x-tooltip> <x-message href="#add"></x-message> </x-tooltip> <x-menu id="insert-menu"> <x-menuitem id="image-menuitem" value="image"> <x-icon href="#image"></x-icon> <x-label><x-message href="#image"></x-message></x-label> </x-menuitem> <x-menuitem id="code-block-menuitem" value="code-block"> <x-icon href="#code-block"></x-icon> <x-label><x-message href="#code-block"></x-message></x-label> </x-menuitem> <x-menuitem id="separator-menuitem" value="separator"> <x-icon href="#separator"></x-icon> <x-label><x-message href="#separator"></x-message></x-label> </x-menuitem> </x-menu> </x-button> </div> <article id="editor-wrapper"></article> <input id="image-input" type="file" accept=".svg,.svgz,.jpg,.jpeg,.png,.webp,.gif" hidden> <slot></slot> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      flex-flow: column;
      position: relative;
      width: 100%;
      height: 260px;
      box-sizing: border-box;
      font-size: 14.5px;
      line-height: 1.5;
      border-width: 1px;
      border-style: solid;
    }
    :host([readonly]) {
      opacity: 0.8;
    }
    :host([disabled]) {
      pointer-events: none;
      opacity: 0.5;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Toolbar
     */

    #toolbar {
      border-bottom: 1px solid transparent;
      padding: 6px;
      display: flex;
      flex-wrap: wrap;
      gap: 6px 6px;
      background: var(--background-color);
      border-color: var(--border-color);
    }

    #toolbar x-button {
      flex: 1;
      min-width: 32px;
      min-height: 26px;
      padding: 0;
    }

    #toolbar x-button > x-icon {
      width: 11px;
      height: 11px;
    }
    #toolbar x-button > x-icon[href="#highlight"],
    #toolbar x-button > x-icon[href="#link"] {
      width: 12px;
      height: 12px;
    }
    #toolbar x-button > x-icon[href$="indent"],
    #toolbar x-button > x-icon[href="#image"],
    #toolbar x-button > x-icon[href="#logo-css"],
    #toolbar x-button > x-icon[href="#logo-js"] {
      width: 13px;
      height: 13px;
    }
    #toolbar x-button > x-icon[href="#logo-svg"],
    #toolbar x-button > x-icon[href="#logo-html"] {
      width: 14px;
      height: 14px;
    }

    #toolbar #insert-button {
      flex: 0;
      margin-left: auto;
    }
    #toolbar #insert-button::part(arrow) {
      display: none;
    }
    #toolbar #insert-button x-menu {
      --align: end;
    }

    #toolbar #alt-input {
      height: 26px;
    }

    #toolbar #size-input {
      width: 65px;
      height: 26px;
    }

    /* "Link" button and input */

    #toolbar #link-box {
      flex: 1;
    }

    #toolbar #link-button {
      flex: 0;
    }
    #toolbar #link-button[toggled] {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
    #toolbar #link-button::part(arrow) {
      display: none;
    }

    #toolbar #link-input {
      flex: 1;
      min-width: 60px;
      height: 26px;
    }

    /**
     * Editor
     */

    #editor-wrapper {
      width: 100%;
      height: 100%;
      overflow: auto;
      flex: 1;
      display: flex;
      flex-flow: column;
    }

    #editor {
      flex: 1;
      width: 100%;
      height: 100%;
      padding: 4px 6px;
      box-sizing: border-box;
      overflow: auto;
      outline: none;
    }

    /* Selection */

    #editor ::selection {
      color: inherit;
      background: rgba(0, 0, 0, 0.1);
    }
    #editor:focus ::selection {
      color: var(--selection-color);
      background: var(--selection-background-color);
    }
    :host([error]) #editor:focus ::selection {
      background: hsla(0, 77%, 50%, 0.19);
    }

    :host(:focus) #editor .ProseMirror-selectednode {
      border-color: var(--accent-color);
      outline: 3px solid var(--light-accent-color);
    }

    /* Image resize grippie */

    #editor .image-resize-grippie {
      display: flex;
      visibility: hidden;
      pointer-events: none;
      align-items: center;
      justify-content: center;
      position: relative;
      width: 30px;
      height: 30px;
      margin: -50px auto 24px;
      z-index: 1;
      background: rgba(0, 0, 0, 0.5);
      cursor: ns-resize;
    }
    #editor img.focused + .image-resize-grippie {
      visibility: visible;
      pointer-events: all;
    }

    #editor .image-resize-grippie x-icon {
      width: 16px;
      height: 16px;
      color: rgba(255, 255, 255, 0.8);
      pointer-events: none;
    }

    /**
     * Typography adjustments
     */

    /* Heading */

    article h3 {
      margin: 12px 0;
    }

    /* Subheading */

    article h4 {
      margin: 8px 0;
    }

    /* Paragraph */

    article p:first-child {
      margin-top: 0;
    }
    article p:last-child {
      margin-bottom: 0;
    }

    /* List */

    article ul,
    article ol {
      margin: 12px 0;
    }
    article p + ul {
      margin: -10px 0 0 0;
    }
    article li > ul,
    article li > ol {
      margin: 0;
    }

    /* Horizontal rule */

    article hr {
      margin: 22px 0;
    }

    /* Image */

    article img {
      cursor: initial;
    }
  `;
  get value() {
    let af = this.#zi.getHTML();
    if (af === "<p></p>") {
      af = "";
    }
    return af;
  }
  set value(af) {
    this.#zi.commands.loadContent(af);
    this.#Mi();
  }
  get blobUrls() {
    let af = [];
    for (let ag of this["#editor-wrapper"].querySelectorAll("img")) {
      if (ag.src.startsWith("blob:")) {
        af.push(ag.src);
      }
    }
    return af;
  }
  get spellcheck() {
    return this.hasAttribute("spellcheck");
  }
  set spellcheck(af) {
    if (af) {
      this.setAttribute("spellcheck", "");
    } else {
      this.removeAttribute("spellcheck");
    }
  }
  get readOnly() {
    return this.hasAttribute("readonly");
  }
  set readOnly(af) {
    if (af) {
      this.setAttribute("readonly", "");
    } else {
      this.removeAttribute("readonly");
    }
  }
  get disabled() {
    return this.hasAttribute("disabled");
  }
  set disabled(af) {
    if (af) {
      this.setAttribute("disabled", "");
    } else {
      this.removeAttribute("disabled");
    }
  }
  get error() {
    return this.hasAttribute("error");
  }
  #P;
  #zi;
  #Ai;
  #Bi;
  #Ri = null;
  #Ii = false;
  constructor() {
    super();
    this.tabIndex = 0;
    this.#P = this.attachShadow({
      mode: "open",
      delegatesFocus: true,
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, ps.#S];
    this.#P.append(document.importNode(ps.#C.content, true));
    for (let ag of this.#P.querySelectorAll("[id]")) {
      this["#" + ag.id] = ag;
    }
    this.#Ai = this["#toolbar"].querySelectorAll("x-shortcut");
    let af = {
      content: "",
      editable: this.readOnly === false && this.disabled === false,
      editorProps: {
        attributes: {
          id: "editor",
        },
      },
      element: this["#editor-wrapper"],
      extensions: [
        ms,
        xs,
        gs,
        ac.Tiptap.Extensions.Blockquote,
        ac.Tiptap.Extensions.Bold.extend({
          addKeyboardShortcuts: () => ({}),
        }),
        ac.Tiptap.Extensions.BulletList,
        ac.Tiptap.Extensions.CharacterCount.configure({
          limit: 999999999,
        }),
        ac.Tiptap.Extensions.Code.extend({
          addKeyboardShortcuts: () => ({}),
        }).configure({
          HTMLAttributes: {
            translate: "no",
          },
        }),
        ac.Tiptap.Extensions.Document,
        ac.Tiptap.Extensions.Dropcursor,
        ac.Tiptap.Extensions.Gapcursor,
        ac.Tiptap.Extensions.HardBreak,
        ac.Tiptap.Extensions.Heading.configure({
          levels: [3, 4],
        }),
        ac.Tiptap.Extensions.Highlight.extend({
          addKeyboardShortcuts: () => ({}),
        }),
        ac.Tiptap.Extensions.History,
        ac.Tiptap.Extensions.HorizontalRule,
        ac.Tiptap.Extensions.Italic.extend({
          addKeyboardShortcuts: () => ({}),
        }),
        ac.Tiptap.Extensions.Link.extend({
          addKeyboardShortcuts: () => ({}),
        }).configure({
          openOnClick: false,
        }),
        ac.Tiptap.Extensions.ListItem,
        ac.Tiptap.Extensions.Mention,
        ac.Tiptap.Extensions.OrderedList,
        ac.Tiptap.Extensions.Paragraph,
        ac.Tiptap.Extensions.Strike.extend({
          addKeyboardShortcuts: () => ({}),
          renderHTML({ HTMLAttributes }) {
            return [
              "del",
              ac.Tiptap.Core.mergeAttributes(
                this.options.HTMLAttributes,
                HTMLAttributes
              ),
              0,
            ];
          },
        }),
        ac.Tiptap.Extensions.Text,
        ac.Tiptap.Extensions.Underline.extend({
          addKeyboardShortcuts: () => ({}),
        }),
      ],
    };
    if (re === false) {
      af.extensions.push(
        ac.Tiptap.Extensions.Focus.configure({
          className: "focused",
        })
      );
    }
    this.#zi = new ac.Tiptap.Core.Editor(af);
    this.#zi.on("update", () => this.#Fi());
    this.#zi.on("selectionUpdate", () => this.#Ni());
    this.addEventListener("focusin", (ah) => this.#Oi(ah));
    this.addEventListener("focusout", (ah) => this.#_i(ah));
    this.addEventListener("keydown", (ah) => this.#ie(ah));
    this.#P.addEventListener("pointerdown", (ah) => this.#Ye(ah));
    this["#inline-buttons"].addEventListener("click", (ah) => this.#qi(ah));
    this["#block-buttons"].addEventListener("click", (ah) => this.#qi(ah));
    this["#nesting-buttons"].addEventListener("click", (ah) => this.#qi(ah));
    this["#insert-menu"].addEventListener("click", (ah) => this.#ji(ah));
    this["#language-buttons"].addEventListener("toggle", (ah) => this.#Vi());
    this["#alt-input"].addEventListener("change", (ah) => this.#Gi(ah));
    this["#size-input"].addEventListener("changestart", (ah) => this.#Hi());
    this["#image-input"].addEventListener("change", (ah) => this.#Wi(ah));
    this["#link-button"].addEventListener("click", (ah) => this.#Ki(ah));
    this["#link-input"].addEventListener("change", () => this.#Zi());
  }
  connectedCallback() {
    this.#Mi();
    this.#Yi();
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah) {
      if (af === "spellcheck") {
        this.#Xi();
      } else if (af === "readonly") {
        this.#Ji();
      } else if (af === "disabled") {
        this.#Qi();
      }
    }
  }
  setCustomValidity(af) {
    this.#Ri = af === "" ? null : af;
    this.#es();
  }
  focus() {
    this.#zi.view.focus();
  }
  #Xi() {
    this["#editor-wrapper"].spellcheck = this.spellcheck;
  }
  #Ji() {
    this.#zi.setEditable(this.disabled === false && this.readOnly === false);
  }
  #Qi() {
    this.#zi.setEditable(this.disabled === false && this.readOnly === false);
    this.#Yi();
  }
  #Oi() {
    this.#Bi = this.value;
    this.#Mi();
    this.#es();
    this.dispatchEvent(
      new CustomEvent("textinputmodestart", {
        bubbles: true,
        composed: true,
      })
    );
  }
  #_i() {
    this.dispatchEvent(
      new CustomEvent("textinputmodeend", {
        bubbles: true,
        composed: true,
      })
    );
    this.#Mi();
    this.#es();
    if (this.error === false && this.value !== this.#Bi) {
      this.dispatchEvent(
        new CustomEvent("change", {
          bubbles: true,
        })
      );
    }
  }
  #ie(af) {
    let ag = ui.fromEvent(af);
    for (let ah of this.#Ai) {
      if (ag.matches(...ah.value)) {
        let aj = ah.closest("x-button");
        if (aj.disabled === false) {
          af.preventDefault();
          aj.click();
        }
        break;
      }
    }
  }
  #Ye(af) {
    if (af.target.matches(".image-resize-grippie")) {
      this.#ts(af);
    }
  }
  #ts(af) {
    let ag;
    let ah;
    let aj = af.target;
    let ak = aj.previousElementSibling;
    let al = ak.getBoundingClientRect();
    let am = al.width / al.height;
    let an = ak.closest("#editor").clientWidth;
    af.preventDefault();
    aj.setPointerCapture(af.pointerId);
    window.addEventListener(
      "pointermove",
      (ag = (ap) => {
        let aq = ap.clientY - af.clientY;
        let ar = al.height + aq;
        let au = M(((ar * am) / an) * 100, 10, 100, 0);
        this.#zi.commands.updateAttributes("image", {
          style: "width: " + au + "%;",
        });
      })
    );
    window.addEventListener(
      "pointerup",
      (ah = () => {
        window.removeEventListener("pointermove", ag);
        window.removeEventListener("pointerup", ah);
      })
    );
  }
  #Fi() {
    this.#Mi();
  }
  #Ni() {
    this.#Mi();
  }
  #qi(af) {
    let ag = af.target.closest("x-button");
    if (ag) {
      if (ag.value === "bold") {
        this.#is();
      } else if (ag.value === "italic") {
        this.#ss();
      } else if (ag.value === "underline") {
        this.#as();
      } else if (ag.value === "strikethrough") {
        this.#os();
      } else if (ag.value === "highlight") {
        this.#ns();
      } else if (ag.value === "code") {
        this.#ls();
      } else if (ag.value === "heading") {
        this.#rs("heading");
      } else if (ag.value === "subheading") {
        this.#rs("subheading");
      } else if (ag.value === "paragraph") {
        this.#rs("paragraph");
      } else if (ag.value === "unordered-list") {
        this.#rs("unorderedList");
      } else if (ag.value === "ordered-list") {
        this.#rs("orderedList");
      } else if (ag.value === "decrease-indent") {
        if (!this.#zi.chain().focus().liftListItem("listItem").run()) {
          this.#zi.chain().focus().lift().run();
        }
      } else if (ag.value === "increase-indent") {
        if (this.#zi.can().sinkListItem("listItem")) {
          this.#zi.chain().focus().sinkListItem("listItem").run();
        } else if (this.#zi.can().setBlockquote()) {
          this.#zi.chain().focus().setBlockquote().run();
        }
      }
    }
  }
  #Vi(af) {
    let ag = this["#language-buttons"].value;
    this.#zi.commands.updateAttributes("codeBlock", {
      language: ag,
    });
  }
  #ji(af) {
    let ag = af.target.closest("x-menuitem");
    if (ag) {
      if (ag.value === "image") {
        this["#image-input"].click();
      } else if (ag.value === "code-block") {
        this.#zi
          .chain()
          .focus()
          .selectTextblockEnd()
          .insertContent({
            type: "codeBlock",
          })
          .run();
      } else if (ag.value === "separator") {
        this.#zi
          .chain()
          .focus()
          .selectTextblockEnd()
          .insertContent({
            type: "horizontalRule",
          })
          .run();
      }
    }
  }
  #Hi() {
    let af;
    let ag;
    this.#Ii = true;
    this["#size-input"].value;
    this["#size-input"].addEventListener(
      "change",
      (af = (ah) => {
        let aj = this["#size-input"].value;
        this.#zi.commands.updateAttributes("image", {
          style: aj === null ? null : "width: " + aj + "%;",
        });
      })
    );
    this["#size-input"].addEventListener(
      "changeend",
      (ag = (ah) => {
        this["#size-input"].removeEventListener("change", af);
        this["#size-input"].removeEventListener("changeend", ag);
        this.#Ii = false;
      })
    );
  }
  #Gi() {
    let af = this["#alt-input"].value;
    this.#zi.commands.updateAttributes("image", {
      alt: af,
    });
  }
  async #Wi(af) {
    let ag = af.target.files[0];
    let ah = ge(ag);
    let aj = null;
    this["#image-input"].value = null;
    if (ah === "svgz") {
      let al = await pe(ag, "arrayBuffer");
      aj = de(al, "blob");
    } else {
      aj = ag;
    }
    let ak = URL.createObjectURL(aj);
    this.#zi
      .chain()
      .focus()
      .selectTextblockEnd()
      .insertContent({
        type: "image",
        attrs: {
          src: ak,
        },
      })
      .run();
  }
  #Ki(af) {
    if (this["#link-button"].toggled) {
      this.#zi
        .chain()
        .focus()
        .unsetCode()
        .extendMarkRange("link")
        .unsetLink()
        .run();
    } else {
      this.#zi
        .chain()
        .focus()
        .unsetCode()
        .extendMarkRange("link")
        .setLink({
          href: "",
        })
        .run();
    }
  }
  #Zi() {
    let af = this["#link-input"].value;
    this.#zi
      .chain()
      .focus()
      .unsetCode()
      .extendMarkRange("link")
      .setLink({
        href: af,
      })
      .run();
  }
  #is() {
    this.#zi.chain().focus().unsetCode().toggleBold().run();
  }
  #ss() {
    this.#zi.chain().focus().unsetCode().toggleItalic().run();
  }
  #as() {
    this.#zi.chain().focus().unsetCode().toggleUnderline().run();
  }
  #os() {
    this.#zi.chain().focus().unsetCode().toggleStrike().run();
  }
  #ns() {
    this.#zi.chain().focus().unsetCode().toggleHighlight().run();
  }
  #ls() {
    this.#zi.chain().focus().toggleCode().run();
  }
  #rs(af = "heading") {
    let ag = this.#hs();
    if (af === "heading") {
      if (ag !== "heading") {
        if (ag === "orderedList") {
          this.#zi
            .chain()
            .focus()
            .toggleOrderedList()
            .setHeading({
              level: 3,
            })
            .run();
        } else if (ag === "unorderedList") {
          this.#zi
            .chain()
            .focus()
            .toggleBulletList()
            .setHeading({
              level: 3,
            })
            .run();
        } else {
          this.#zi
            .chain()
            .focus()
            .setHeading({
              level: 3,
            })
            .run();
        }
      }
    } else if (af === "subheading") {
      if (ag !== "subheading") {
        if (ag === "orderedList") {
          this.#zi
            .chain()
            .focus()
            .toggleOrderedList()
            .setHeading({
              level: 4,
            })
            .run();
        } else if (ag === "unorderedList") {
          this.#zi
            .chain()
            .focus()
            .toggleBulletList()
            .setHeading({
              level: 4,
            })
            .run();
        } else {
          this.#zi
            .chain()
            .focus()
            .setHeading({
              level: 4,
            })
            .run();
        }
      }
    } else if (af === "paragraph") {
      if (ag !== "paragraph") {
        if (ag === "orderedList") {
          this.#zi.chain().focus().toggleOrderedList().run();
        } else if (ag === "unorderedList") {
          this.#zi.chain().focus().toggleBulletList().run();
        } else {
          this.#zi.chain().focus().setParagraph().run();
        }
      }
    } else if (af === "orderedList") {
      if (ag !== "orderedList") {
        if (ag === "heading" || ag === "subheading") {
          this.#zi.chain().focus().setParagraph().toggleOrderedList().run();
        } else {
          this.#zi.chain().focus().toggleOrderedList().run();
        }
      }
    } else if (af === "unorderedList" && ag !== "unorderedList") {
      if (ag === "heading" || ag === "subheading") {
        this.#zi.chain().focus().setParagraph().toggleBulletList().run();
      } else {
        this.#zi.chain().focus().toggleBulletList().run();
      }
    }
  }
  #hs() {
    if (
      this.#zi.isActive("heading", {
        level: 3,
      })
    ) {
      return "heading";
    } else if (
      this.#zi.isActive("heading", {
        level: 4,
      })
    ) {
      return "subheading";
    } else if (this.#cs("bulletList")) {
      return "unorderedList";
    } else if (this.#cs("orderedList")) {
      return "orderedList";
    } else if (this.#zi.isActive("codeBlock")) {
      return "code";
    } else if (this.#zi.isActive("image")) {
      return "image";
    } else if (this.#zi.isActive("paragraph")) {
      return "paragraph";
    } else if (this.#zi.state.selection.node?.type.name === "horizontalRule") {
      return "separator";
    } else if (this.#zi.state.selection.node?.type.name === "blockquote") {
      return "blockquote";
    } else {
      return "other";
    }
  }
  #cs(af = "bulletList") {
    let ag = ac.Tiptap.Core.findParentNode((ah) =>
      ac.Tiptap.Core.isList(ah.type.name, this.#zi.extensionManager.extensions)
    )(this.#zi.state.selection);
    return ag !== undefined && ag.node.type.name === af;
  }
  #Mi() {
    let af = this.#hs();
    if (af === "code" || af === "image" || af === "separator") {
      this["#inline-buttons"].hidden = true;
      for (let ag of this["#inline-buttons"].children) {
        ag.disabled = true;
        ag.toggled = false;
      }
    } else {
      this["#inline-buttons"].hidden = false;
      this["#bold-button"].toggled = this.#zi.isActive("bold");
      this["#bold-button"].disabled = this.#zi.can().toggleBold() === false;
      this["#italic-button"].toggled = this.#zi.isActive("italic");
      this["#italic-button"].disabled = this.#zi.can().toggleItalic() === false;
      this["#underline-button"].toggled = this.#zi.isActive("underline");
      this["#underline-button"].disabled =
        this.#zi.can().toggleUnderline() === false;
      this["#strikethrough-button"].toggled = this.#zi.isActive("strike");
      this["#strikethrough-button"].disabled =
        this.#zi.can().toggleStrike() === false;
      this["#highlight-button"].toggled = this.#zi.isActive("highlight");
      this["#highlight-button"].disabled =
        this.#zi.can().toggleHighlight() === false;
      this["#code-button"].toggled = this.#zi.isActive("code");
      this["#code-button"].disabled = this.#zi.can().toggleCode() === false;
    }
    {
      let ah = this.#zi.getAttributes("link");
      if (
        af === "code" ||
        af === "image" ||
        af === "separator" ||
        (ah.href === undefined && this.#zi.view.state.selection.empty) ||
        this.#zi.can().toggleLink() === false
      ) {
        this["#link-box"].hidden = true;
        this["#link-button"].hidden = true;
        this["#link-input"].hidden = true;
      } else {
        this["#link-box"].hidden = false;
        this["#link-button"].hidden = false;
        if (ah.href !== undefined) {
          this["#link-button"].toggled = true;
          this["#link-input"].value = ah.href;
          this["#link-input"].hidden = false;
        } else {
          this["#link-button"].toggled = false;
          this["#link-input"].value = "";
          this["#link-input"].hidden = true;
        }
      }
    }
    if (af === "code" || af === "image" || af === "separator") {
      this["#block-buttons"].hidden = true;
      for (let aj of this["#block-buttons"].children) {
        aj.disabled = true;
        aj.toggled = false;
      }
    } else {
      this["#block-buttons"].hidden = false;
      this["#heading-button"].toggled = af === "heading";
      this["#heading-button"].disabled =
        this.#zi.can().toggleHeading({
          level: 3,
        }) === false;
      this["#subheading-button"].toggled = af === "subheading";
      this["#subheading-button"].disabled =
        this.#zi.can().toggleHeading({
          level: 4,
        }) === false;
      this["#paragraph-button"].toggled = af === "paragraph";
      this["#paragraph-button"].disabled = this["#heading-button"].disabled;
      this["#unordered-list-button"].toggled = af === "unorderedList";
      this["#unordered-list-button"].disabled =
        this.#zi.can().toggleBulletList() === false;
      this["#ordered-list-button"].toggled = af === "orderedList";
      this["#ordered-list-button"].disabled =
        this.#zi.can().toggleOrderedList() === false;
      this["#image-menuitem"].disabled =
        this.#zi.can().insertContent({
          type: "image",
        }) === false;
      this["#code-block-menuitem"].disabled =
        this.#zi.can().insertContent({
          type: "codeBlock",
        }) === false;
      this["#separator-menuitem"].disabled =
        this.#zi.can().insertContent({
          type: "horizontalRule",
        }) === false;
    }
    this["#decrease-indent-button"].disabled =
      this.#zi.can().liftListItem("listItem") === false &&
      this.#zi.can().lift() === false;
    this["#increase-indent-button"].disabled =
      this.#zi.can().sinkListItem("listItem") === false &&
      this.#zi.can().setBlockquote() === false;
    if (af === "code") {
      let ak = [];
      if (this.#zi.view.state.selection.empty === true) {
        let an = ac.Tiptap.Core.findParentNode(
          (ap) => ap.type.name === "codeBlock"
        )(this.#zi.state.selection);
        ak.push(an.node);
      } else {
        ak = this.#zi.view.state.selection
          .content()
          .content.content.filter((ap) => ap.type.name === "codeBlock");
      }
      let al = ak.map((ap) => ap.attrs.language);
      let am = false;
      if (al.length > 0) {
        al[0];
        am = G(al, al[0]) === false;
      }
      this["#language-buttons"].hidden = false;
      for (let ap of this["#language-buttons"].children) {
        ap.toggled = al.includes(ap.value);
        ap.mixed = am;
      }
    } else {
      this["#language-buttons"].hidden = true;
    }
    if (this.#Ii === false) {
      if (af === "image") {
        let aq = this.#zi.view.state.selection
          .content()
          .content.content.find((au) => au.type.name === "image");
        let ar = null;
        if (aq.attrs.style && aq.attrs.style.includes("width")) {
          ar = parseInt(aq.attrs.style.split(":")[1]);
        }
        this["#alt-input"].hidden = false;
        this["#alt-input"].value = aq.attrs.alt;
        this["#size-input"].hidden = false;
        this["#size-input"].value = ar;
      } else {
        this["#alt-input"].hidden = true;
        this["#size-input"].hidden = true;
      }
    }
  }
  #Yi() {
    this.setAttribute("role", "input");
    this.setAttribute("aria-disabled", this.disabled);
    if (this.disabled) {
      this[us] = this.tabIndex > 0 ? this.tabIndex : 0;
      this.tabIndex = -1;
    } else {
      if (this.tabIndex < 0) {
        this.tabIndex = this[us] > 0 ? this[us] : 0;
      }
      delete this[us];
    }
  }
  #es() {
    if (this.#Ri) {
      this.setAttribute("error", "");
    } else {
      this.removeAttribute("error");
    }
  }
}
customElements.define("bx-richtextarea", ps);
let ms = ac.Tiptap.Core.Extension.create({
  name: "loadContent",
  addCommands: () => ({
    loadContent:
      (af) =>
      ({ tr: ag, dispatch, commands }) => {
        commands.setContent(af, false, {
          preserveWhitespace: true,
        });
        if (dispatch) {
          ag.setMeta("addToHistory", false);
        }
        return true;
      },
  }),
});
let xs = ac.Tiptap.Extensions.CodeBlock.extend({
  addOptions() {
    return {
      ...this.parent?.(),
    };
  },
  addAttributes: () => ({
    language: {
      default: null,
      rendered: false,
      parseHTML: (af) => {
        let ag = af.querySelector("code");
        if (ag && ag.hasAttribute("data-language")) {
          return ag.getAttribute("data-language");
        } else {
          return null;
        }
      },
    },
  }),
  renderHTML({ node, HTMLAttributes }) {
    return [
      "pre",
      ac.Tiptap.Core.mergeAttributes(
        this.options.HTMLAttributes,
        HTMLAttributes
      ),
      [
        "code",
        {
          "data-language": node.attrs.language,
          translate: "no",
          spellcheck: false,
        },
        0,
      ],
    ];
  },
  addProseMirrorPlugins() {
    return [
      ...(this.parent?.() || []),
      (() => {
        let af = (ag) => {
          let ah = ac.Tiptap.Core.findChildren(
            ag,
            (ak) => ak.type.name === "codeBlock"
          );
          let aj = [];
          for (let ak of ah) {
            let al = ak.pos + 1;
            let am = ak.node.textContent;
            let an = ak.node.attrs.language || "svg";
            let ap = ds(am, an, false);
            for (let aq of ap) {
              let ar = al + aq.text.length;
              if (aq.classes.length) {
                let au = ac.View.Decoration.inline(al, ar, {
                  class: aq.classes.join(" "),
                });
                aj.push(au);
              }
              al = ar;
            }
          }
          return ac.View.DecorationSet.create(ag, aj);
        };
        return new ac.State.Plugin({
          key: new ac.State.PluginKey("codeBlockSyntaxHighlighter"),
          state: {
            init: (ag, { doc }) => af(doc),
            apply: (ag, ah, aj, ak) => {
              let al = aj.selection.$head.parent.type.name;
              let am = ak.selection.$head.parent.type.name;
              let an = ac.Tiptap.Core.findChildren(
                aj.doc,
                (aq) => aq.type.name === "codeBlock"
              );
              let ap = ac.Tiptap.Core.findChildren(
                ak.doc,
                (aq) => aq.type.name === "codeBlock"
              );
              if (
                ag.docChanged &&
                ([al, am].includes("codeBlock") ||
                  ap.length !== an.length ||
                  ag.steps.some(
                    (aq) =>
                      aq.from !== undefined &&
                      aq.to !== undefined &&
                      an.some(
                        (ar) =>
                          ar.pos >= aq.from &&
                          ar.pos + ar.node.nodeSize <= aq.to
                      )
                  ))
              ) {
                return af(ag.doc);
              } else {
                return ah.map(ag.mapping, ag.doc);
              }
            },
          },
          props: {
            decorations(ag) {
              return this.getState(ag);
            },
          },
        });
      })(),
    ];
  },
});
let gs = ac.Tiptap.Extensions.Image.extend({
  addOptions() {
    return {
      ...this.parent?.(),
    };
  },
  addAttributes() {
    return {
      ...this.parent?.(),
      style: {
        default: null,
        renderHTML: (af) => ({
          style: af.style,
        }),
      },
      width: {
        default: null,
        renderHTML: (af) => ({
          width: af.width,
        }),
      },
      height: {
        default: null,
        renderHTML: (af) => ({
          height: af.height,
        }),
      },
    };
  },
  addProseMirrorPlugins() {
    let af = this.editor;
    return [
      ...(this.parent?.() || []),
      (() => {
        let ag = null;
        let ah = ac.View.DecorationSet.empty;
        let aj = ie` <div class="image-resize-grippie" draggable="false"> <x-icon href="#chevron-down"></x-icon> </div>
        `;
        return new ac.State.Plugin({
          props: {
            decorations(ak) {
              if (ag?.doc.eq(ak.doc)) {
                return ah;
              }
              {
                ag = ak;
                ah = ac.View.DecorationSet.empty;
                let al = ac.Tiptap.Core.findChildren(
                  ak.doc,
                  (am) => am.type.name === "image"
                );
                for (let { node, pos } of al) {
                  ah = ah.add(ak.doc, [
                    ac.View.Decoration.widget(
                      pos + 1 + node.content.size,
                      aj.cloneNode(true)
                    ),
                  ]);
                }
                return ah;
              }
            },
          },
        });
      })(),
      new ac.State.Plugin({
        props: {
          handleDOMEvents: {
            drop: (ag, ah) => {
              if (ag.dragging === null) {
                ah.preventDefault();
                let aj = ag.posAtCoords({
                  left: ah.clientX,
                  top: ah.clientY,
                });
                for (let ak of ah.dataTransfer.items) {
                  let al = ak.webkitGetAsEntry();
                  let am = xe(al).toLowerCase();
                  let an = null;
                  (async () => {
                    if (am === "svg") {
                      an = await ue(al, "blob");
                    } else if (am === "svgz") {
                      let aq = await ue(al, "arrayBuffer");
                      an = de(aq, "blob");
                    } else if (
                      ["jpeg", "jpg", "png", "webp", "gif"].includes(am)
                    ) {
                      an = await ue(al, "blob");
                    }
                    if (an) {
                      let ar = URL.createObjectURL(an);
                      let { width, height } = await ((ap = ar),
                      new Promise((aw) => {
                        let ax = new Image();
                        ax.onload = () => {
                          aw({
                            width: ax.naturalWidth,
                            height: ax.naturalHeight,
                          });
                        };
                        ax.src = ap;
                      }));
                      af.chain()
                        .focus()
                        .selectTextblockEnd()
                        .insertContentAt(aj.pos, {
                          type: "image",
                          attrs: {
                            src: ar,
                            width: width,
                            height: height,
                          },
                        })
                        .run();
                    }
                    var ap;
                  })();
                }
                return true;
              }
            },
          },
        },
      }),
    ];
  },
});
class bs extends HTMLElement {
  static #C = ie` <template> <div id="form-view"> <header id="header" part="header"></header> <main id="main" part="main"></main> <footer id="footer" part="footer"></footer> </div> <div id="throbber-view"> <x-throbber id="throbber"></x-throbber> </div> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      flex-flow: column;
      position: relative;
      width: 100%;
    }
    :host(:focus) {
      outline: none;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Form view
     */

    #form-view {
      display: flex;
      flex-flow: column;
      width: 100%;
      height: 100%;
    }
    :host([throbber]) #form-view {
      display: block;
      visibility: hidden;
    }

    #header {
      border-bottom: 1px solid transparent;
    }
    #header:empty {
      display: none;
    }

    #main {
      flex: 1;
      box-sizing: border-box;
      width: 100%;
      padding: 20px;
      position: relative;
      overflow: auto;
    }

    h2 {
      margin: 0 0 12px 0;
    }

    h3:first-child {
      margin-top: 0;
    }

    p {
      font-size: 13px;
    }

    #footer {
      display: flex;
      z-index: 0;
      min-height: fit-content;
      justify-content: flex-end;
      padding: 10px 20px;
      border-top: 1px solid transparent;
    }
    #footer:empty {
      display: none;
    }

    #footer x-button + x-button {
      margin-left: 8px;
    }
    #footer x-button:first-child {
      margin-left: auto;
    }

    /**
     * Throbber view
     */

    #throbber-view {
      display: none;
      flex-flow: column;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      padding: 0 20px;
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
    }
    :host([throbber]) #throbber-view {
      display: flex;
    }
  `;
  get throbber() {
    return this.hasAttribute("throbber");
  }
  set throbber(af) {
    if (af) {
      this.setAttribute("throbber", "");
    } else {
      this.removeAttribute("throbber");
    }
  }
  get dirty() {
    return this.p;
  }
  #P;
  #$;
  #ds = false;
  p = false;
  constructor() {
    super();
    let af = this.constructor.m;
    let ag = this.constructor.v;
    let ah = this.constructor.k;
    this.#P = this.attachShadow({
      mode: "open",
    });
    this.#P.adoptedStyleSheets = [
      a2.themeStyleSheet,
      bs.#S,
      this.constructor._shadowStyleSheet,
    ];
    this.#P.append(document.importNode(bs.#C.content, true));
    if (af) {
      this.#P
        .querySelector("#header")
        .append(document.importNode(af.content, true));
    }
    if (ag) {
      this.#P
        .querySelector("#main")
        .append(document.importNode(ag.content, true));
    }
    if (ah) {
      this.#P
        .querySelector("#footer")
        .append(document.importNode(ah.content, true));
    }
    for (let aj of this.#P.querySelectorAll("[id]")) {
      this["#" + aj.id] = aj;
    }
    this.setAttribute("extends", "bx-form");
    this.setAttribute("tabindex", "0");
    this.addEventListener("keydown", (ak) => this.#ie(ak));
  }
  connectedCallback() {
    this.#$ = si(this, "dialog");
  }
  disconnectedCallback() {}
  blinkFooter() {
    return new Promise(async (af) => {
      if (this.#ds === false) {
        this.#ds = true;
        this.setAttribute("blink", "");
        await it(200);
        this.removeAttribute("blink", "");
        await it(200);
        this.setAttribute("blink", "");
        await it(200);
        this.removeAttribute("blink", "");
        this.#ds = false;
      }
      af();
    });
  }
  clear() {
    this.p = false;
  }
  #ie(af) {
    af.stopPropagation();
    if (af.code === "Escape") {
      af.preventDefault();
    }
    if (this.throbber === false && this.#P.activeElement === null) {
      if (af.code === "Escape") {
        if (this.dirty) {
          this.blinkFooter();
        } else if (this["#cancel-button"]) {
          this["#cancel-button"].click();
        } else if (this.#$) {
          this.#$.close();
        }
      } else if (af.key === "Enter" || af.code === "Space") {
        let ag = this["#footer"].querySelector("x-button[toggled]");
        if (ag?.disabled === false && af.target !== ag) {
          ag.click();
        }
      }
    }
  }
}
const fs = "./storage/artworks/-Nm_AjKqYsA_iDxqe_jA.svg";
class ws extends bs {
  static observedAttributes = ["type"];
  static v = ie` <template> <x-box id="heading-box"> <h2 id="heading"><x-message id="heading-message"></x-message></h2> <bx-avatar id="avatar"></bx-avatar> </x-box> <section id="title-section"> <h3><x-message href="#title"></x-message></h3> <x-input id="title-input" validation="manual" maxlength="135"></x-input> </section> <section id="banner-section"> <h3><x-message href="#banner-image"></x-message></h3> <x-input id="banner-input" type="url"> <x-label>${fs}</x-label> </x-input> </section> <section id="description-section"> <h3><x-message href="#description"></x-message></h3> <bx-richtextarea id="description-textarea" spellcheck></bx-richtextarea> </section> <section id="options-section"> <x-checkbox id="watch-checkbox" toggled> <x-label><strong><x-message href="#watch-thread"></x-message></strong></x-label> <x-label><x-message href="#watch-thread.detail"></x-message></x-label> </x-checkbox> </section> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#save"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%}#main{display:flex;flex-flow:column}h2{margin:0;font-size:28px}h3{margin-bottom:6px}#heading-box{margin-bottom:8px}#avatar{width:40px;height:40px;margin-left:auto}#textarea{min-height:0;margin-top:8px;flex:1}#title-section{margin-top:0}#title-input{width:100%;max-width:none}#title-input[error]::before{top:-20px;right:-4px;left:auto}#banner-section{margin-top:16px}#banner-input{max-width:none}#description-section{display:flex;flex-flow:column;flex:1;height:100%;min-height:0;margin-top:16px}#description-textarea{height:100%;min-height:0}#description-textarea[error]::before{top:-20px;right:-4px;left:auto}#options-section{margin-top:16px}`;
  get type() {
    if (this.hasAttribute("type")) {
      return this.getAttribute("type");
    } else {
      return "new";
    }
  }
  set type(af) {
    this.setAttribute("type", af);
  }
  get title() {
    return Ce(this["#title-input"].value);
  }
  set title(af) {
    this["#title-input"].value = Se(af);
  }
  get banner() {
    let af = this["#banner-input"].value.trim();
    if (af === "") {
      return fs;
    } else {
      return af;
    }
  }
  set banner(af) {
    this["#banner-input"].value = af;
  }
  get description() {
    return this["#description-textarea"].value;
  }
  set description(af) {
    this["#description-textarea"].value = Te(af);
  }
  get attachments() {
    return this["#description-textarea"].blobUrls;
  }
  get watchThread() {
    return this["#watch-checkbox"].toggled;
  }
  #at;
  constructor() {
    super();
    this["#title-input"].addEventListener("input", () => this.#us());
    this["#description-textarea"].addEventListener("input", () => this.#ps());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
    this["#cancel-button"].addEventListener("click", (af) => this.#Pt(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#xs();
    this.#gs();
    this.#bs();
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#gs();
      })
    );
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "type") {
      this.#xs();
    }
  }
  clear() {
    super.clear();
    this["#title-input"].value = "";
    this["#title-input"].setCustomValidity("");
    this["#description-textarea"].value = "";
    this["#description-textarea"].setCustomValidity("");
    this["#watch-checkbox"].toggled = true;
  }
  reportValidity() {
    let af = true;
    if (this["#description-textarea"].value.trim() === "") {
      this["#description-textarea"].setCustomValidity("This field is required");
      this["#description-textarea"].focus();
      af = false;
    }
    if (this["#title-input"].value.trim() === "") {
      this["#title-input"].setCustomValidity("This field is required");
      this["#title-input"].focus();
      af = false;
    }
    return af;
  }
  #us() {
    this.p = true;
    this["#title-input"].setCustomValidity("");
  }
  #ps() {
    this.p = true;
    this["#description-textarea"].setCustomValidity("");
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #Pt(af) {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #xs() {
    this["#heading-message"].href =
      this.type === "edit" ? "#edit-post" : "#new-post";
  }
  async #gs() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID !== null) {
      this["#avatar"].type = Bi.auth.userProfile.avatar || "random";
      this["#avatar"].value = Bi.auth.userID;
    }
  }
  #bs() {
    this["#options-section"].hidden = this.type === "edit";
  }
}
customElements.define("bx-blogform", ws);
class vs extends HTMLElement {
  static #C = ie` <template> <div id="items"></div> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      align-items: center;
      width: fit-content;
      height: 32px;
      margin: 0 0 14px 0;
      contain: style layout;
      box-sizing: border-box;
    }
    :host([size="large"]) {
      height: 38px;
    }

    /* Containers */

    #items {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: inherit;
    }

    .item {
      display: flex;
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
      width: fit-content;
      height: 100%;
      padding: 0 13px;
      position: relative;
      border-width: 1px;
      border-style: solid;
      text-decoration: none;
      color: inherit;
      font-weight: 500;
      font-size: 13px;
    }
    .item:not(:first-child) {
      margin-left: -1px;
    }
    .item:focus {
      z-index: 1;
    }

    .item .inner {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      box-sizing: border-box;
    }

    /* Icon */

    .item x-icon {
      width: 14px;
      height: 14px;
      color: currentColor;
    }
    .item x-icon[href="#home"] {
      width: 16px;
      height: 16px;
    }

    /* Label */

    .item x-label {
      margin-left: 6px;
    }
  `;
  get arg() {
    return this.#fs;
  }
  set arg(af) {
    this.#fs = af;
    this.#A();
  }
  get size() {
    let af = this.getAttribute("size");
    if (["small", "large"].includes(af)) {
      return af;
    } else {
      return null;
    }
  }
  set size(af) {
    if (["small", "large"].includes(af)) {
      this.setAttribute("size", af);
    } else {
      this.removeAttribute("size");
    }
  }
  #fs = "";
  #P;
  #T;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, vs.#S];
    this.#P.append(document.importNode(vs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#A();
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (ag) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  #ws(af, ag, ah, aj = "", ak = "") {
    let al;
    let am =
      '\n      <div class="inner">\n        <x-icon href="' +
      ah +
      '"></x-icon>\n        <x-label class="label"><x-message href="' +
      aj +
      '"></x-message>' +
      ak +
      "</x-label>\n      </div>\n    ";
    al =
      ag === null
        ? af
          ? '<div class="item" part="item toggled-item" data-toggled>' +
            am +
            "</div>"
          : '<div class="item" part="item">' + am + "</div>"
        : af
        ? '<a class="item" part="item toggled-item" href="' +
          ag +
          '" data-toggled>' +
          am +
          "</a>"
        : '<a class="item" part="item" href="' + ag + '">' + am + "</a>";
    return al;
  }
  #A() {
    let af = location.pathname;
    let ag = this.#ws(false, "/", "#home", "#home");
    if (af.endsWith("/")) {
      af = af.substring(0, af.length - 1);
    }
    if (af.startsWith("/blog")) {
      ag +=
        af === "/blog"
          ? this.#ws(true, null, "#blog", "#blog")
          : this.#ws(false, "/blog", "#blog", "#blog") +
            this.#ws(true, null, "#blog", "#post", " #" + Te(af.split("/")[2]));
    } else if (af.startsWith("/tutorials")) {
      ag += this.#ws(true, null, "#tutorials", "#tutorials");
    } else if (af.startsWith("/bugs")) {
      ag +=
        af === "/bugs"
          ? this.#ws(true, null, "#bugs", "#bugs")
          : this.#ws(false, "/bugs", "#bugs", "#bugs") +
            this.#ws(true, null, "#bugs", "#bug", " #" + Te(af.split("/")[2]));
    } else if (af.startsWith("/ideas")) {
      ag +=
        af === "/ideas"
          ? this.#ws(true, null, "#ideas", "#ideas")
          : this.#ws(false, "/ideas", "#ideas", "#ideas") +
            this.#ws(
              true,
              null,
              "#ideas",
              "#idea",
              " #" + Te(af.split("/")[2])
            );
    } else if (af.startsWith("/questions")) {
      ag +=
        af === "/questions"
          ? this.#ws(true, null, "#questions", "#questions")
          : this.#ws(false, "/questions", "#questions", "#questions") +
            this.#ws(
              true,
              null,
              "#questions",
              "#question",
              " #" + Te(af.split("/")[2])
            );
    } else if (af.startsWith("/share")) {
      ag +=
        this.#ws(false, null, "#share", "#share") +
        this.#ws(true, null, "#logo-svg", "", this.arg || "...");
    } else if (af.startsWith("/profiles")) {
      ag +=
        this.#ws(false, null, "#profile", "#profiles") +
        this.#ws(true, null, "#profile", "", this.arg);
    } else if (af.startsWith("/press")) {
      ag += this.#ws(true, null, "#blog", "#press");
    } else if (af.startsWith("/changelog")) {
      ag += this.#ws(true, null, "#document", "#changelog");
    } else if (af.startsWith("/legal")) {
      if (af === "/legal") {
        ag += this.#ws(true, null, "#document", "#legal");
      } else {
        let ah;
        let aj = af.split("/")[2];
        ah = aj.includes("privacy")
          ? "#legal.privacy-policy"
          : aj.includes("terms")
          ? "#legal.terms-of-use"
          : aj.includes("eula")
          ? "#license"
          : aj.includes("dmca")
          ? "#legal.dmca-policy"
          : "#legal." + aj;
        Te();
        ag +=
          this.#ws(false, "/legal", "#document", "#legal") +
          this.#ws(true, null, "#document", ah);
      }
    } else if (af.startsWith("/embed")) {
      ag += this.#ws(true, null, "#foreign-object", "#embed");
    } else if (af.startsWith("/search")) {
      ag += this.#ws(true, null, "#search", "#search");
    }
    this["#items"].innerHTML = ag;
    this["#items"].firstElementChild.part.add("first-item");
    this["#items"].lastElementChild.part.add("last-item");
  }
}
if (customElements.get("bx-pagebreadcrumb") === undefined) {
  customElements.define("bx-pagebreadcrumb", vs);
}
class ys extends HTMLElement {
  static observedAttributes = ["value", "max"];
  static #C = ie` <template> <div id="items"></div> </template>
  `;
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
      width: 100%;
    }
    :host([hidden]) {
      display: none;
    }
    :host([max="1"]) {
      display: none;
    }

    #items {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .item {
      display: flex;
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
      margin: 0 3px;
      padding: 5px 10px;
      height: 100%;
      border-width: 1px;
      border-style: solid;
      outline-offset: 0;
      text-decoration: none;
      font-size: 14px;
      font-weight: 700;
      user-select: none;
      -webkit-user-select: none;
    }
    .ellipsis-item {
      background: none;
      border: none;
    }
    .item:first-child {
      margin-left: 0;
    }
    .item:last-child {
      margin-right: 0;
    }
    .ellipsis-item {
      flex: 0;
    }

    @media all and (max-width: 750px) {
      .previous-item,
      .next-item {
        display: none;
      }
    }
  `;
  get value() {
    if (this.hasAttribute("value")) {
      return parseInt(this.getAttribute("value"));
    } else {
      return 1;
    }
  }
  set value(af) {
    af = M(af, 1, this.max);
    this.setAttribute("value", af);
  }
  get max() {
    if (this.hasAttribute("max")) {
      return parseFloat(this.getAttribute("max"));
    } else {
      return 100;
    }
  }
  set max(af) {
    this.setAttribute("max", af);
  }
  #vs = et(this.#A, 500, this);
  #P;
  #T;
  #Yt;
  constructor() {
    super();
  }
  connectedCallback() {
    if (!this.#P) {
      this.setAttribute("role", "navigation");
      this.setAttribute("aria-label", "pagination");
      this.#T = si(this, "#app");
      this.#P = this.attachShadow({
        mode: "closed",
      });
      this.#P.adoptedStyleSheets = [ys.#S];
      this.#P.append(document.importNode(ys.#C.content, true));
      for (let af of this.#P.querySelectorAll("[id]")) {
        this["#" + af.id] = af;
      }
      this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
      this.#P.addEventListener("click", (ag) => this.#Xe(ag));
      this.addEventListener("keydown", (ag) => this.#ie(ag));
    }
    this.#T.addEventListener("locationchange", (this.#Yt = () => this.#A()));
    this.#A();
  }
  disconnectedCallback() {
    this.#T.removeEventListener("locationchange", this.#Yt);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && this.#P && (af === "value" || af === "max")) {
      this.#A();
    }
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (ag) {
      af.preventDefault();
      this.value = parseInt(ag.dataset.value);
      this.#T.navigate(ag.href);
    }
  }
  #ie(af) {
    let ag = this["#items"].querySelector(":focus");
    if (ag) {
      let ah = [...this["#items"].querySelectorAll("a")];
      let aj = ah.indexOf(ag);
      if (af.code === "ArrowRight") {
        let ak = ah[aj + 1];
        if (ak) {
          ak.focus();
        }
      } else if (af.code === "ArrowLeft") {
        let al = ah[aj - 1];
        if (al) {
          al.focus();
        }
      }
    }
  }
  #A() {
    let af = "";
    let ag = this["#items"].querySelector(":focus") !== null;
    let ah = (aj) => {
      let ak = new URL(location.href);
      let al = new URLSearchParams(location.search);
      if (aj === 1) {
        al.delete("page");
      } else {
        al.set("page", aj);
      }
      ak.search = al.toString();
      return ak.href;
    };
    if (this.value > 1) {
      af +=
        '\n          <a\n            class="item previous-item"\n            part="item previous-item"\n            href="' +
        ah(this.value - 1) +
        '"\n            data-value="' +
        (this.value - 1) +
        '">\n            <x-message href="#page.previous"></x-message>\n          </a>';
    }
    if (this.max <= 10) {
      for (let aj = 1; aj <= this.max; aj += 1) {
        if (aj === this.value) {
          af +=
            '\n              <div\n                class="item page-item"\n                part="item page-item toggled-item"\n                data-value="' +
            aj +
            '">\n                ' +
            aj +
            "\n              </div>";
        } else {
          af +=
            '\n              <a\n                class="item page-item"\n                part="item page-item"\n                href="' +
            ah(aj) +
            '"\n                data-value="' +
            aj +
            '">\n                ' +
            aj +
            "\n              </a>";
        }
      }
    } else if (this.value <= 6) {
      for (let ak = 1; ak <= 7; ak += 1) {
        if (ak === this.value) {
          af +=
            '\n                <div\n                  class="item page-item"\n                  part="item page-item toggled-item"\n                  data-value="' +
            ak +
            '">\n                  ' +
            ak +
            "\n                </div>";
        } else {
          af +=
            '\n                <a\n                  class="item page-item"\n                  part="item page-item"\n                  href="' +
            ah(ak) +
            '"\n                  data-value="' +
            ak +
            '">\n                  ' +
            ak +
            "\n                </a>";
        }
      }
      af += '<div class="item ellipsis-item">…</div>';
      for (let al of [this.max - 1, this.max]) {
        af +=
          '\n              <a\n                class="item page-item"\n                part="item page-item"\n                href="' +
          ah(al) +
          '"\n                data-value="' +
          al +
          '">\n                ' +
          al +
          "\n              </a>";
      }
    } else if (this.value > this.max - 6) {
      for (let am of [1, 2]) {
        af +=
          '\n              <a\n                class="item page-item"\n                part="item page-item"\n                href="' +
          ah(am) +
          '"\n                data-value="' +
          am +
          '">\n                ' +
          am +
          "\n              </a>";
      }
      af += '<div class="item ellipsis-item">…</div>';
      for (let an = this.max - 6; an <= this.max; an += 1) {
        if (an === this.value) {
          af +=
            '\n                <div\n                  class="item page-item"\n                  part="item page-item toggled-item"\n                  data-value="' +
            an +
            '">\n                  ' +
            an +
            "\n                </div>";
        } else {
          af +=
            '\n                <a\n                  class="item page-item"\n                  part="item page-item"\n                  href="' +
            ah(an) +
            '"\n                  data-value="' +
            an +
            '">\n                  ' +
            an +
            "\n                </a>";
        }
      }
    } else {
      for (let ap of [1, 2]) {
        af +=
          '\n              <a\n                class="item page-item"\n                part="item page-item"\n                href="' +
          ah(ap) +
          '"\n                data-value="' +
          ap +
          '">\n                ' +
          ap +
          "\n              </a>";
      }
      af += '<div class="item ellipsis-item">…</div>';
      for (let aq = this.value - 1; aq < this.value + 4; aq += 1) {
        if (aq === this.value) {
          af +=
            '\n                <div\n                  class="item page-item"\n                  part="item page-item toggled-item"\n                  data-value="' +
            aq +
            '">\n                  ' +
            aq +
            "\n                </div>";
        } else {
          af +=
            '\n                <a\n                  class="item page-item"\n                  part="item page-item"\n                  href="' +
            ah(aq) +
            '"\n                  data-value="' +
            aq +
            '">\n                  ' +
            aq +
            "\n                </a>";
        }
      }
      af += '<div class="item ellipsis-item">…</div>';
      for (let ar of [this.max - 1, this.max]) {
        af +=
          '\n              <a\n                class="item page-item"\n                part="item page-item"\n                href="' +
          ah(ar) +
          '"\n                data-value="' +
          ar +
          '">\n                ' +
          ar +
          "\n              </a>";
      }
    }
    if (this.value < this.max) {
      af +=
        '\n          <a\n            class="item next-item"\n            part="item next-item"\n            href="' +
        ah(this.value + 1) +
        '"\n            data-value="' +
        (this.value + 1) +
        '">\n            <x-message href="#page.next"></x-message>\n          </a>';
    }
    this["#items"].innerHTML = af;
    if (ag) {
      for (let au of this["#items"].querySelectorAll(
        '.page-item[data-value="' + this.value + '"]'
      )) {
        au.focus();
      }
    }
  }
}
if (customElements.get("bx-pager") === undefined) {
  customElements.define("bx-pager", ys);
}
class ks extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <div id="header"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <a id="new-blog-anchor" href="/blog?dialog=new-blog"> <x-button id="new-blog-button" toggled hidden> <x-label><strong><x-message href="#new-post"></x-message></strong></x-label> </x-button> </a> </div> <bx-blogfilterblock id="filter-block"></bx-blogfilterblock> <div id="previews"></div> <div id="previews-skeleton"></div> <bx-placeholderblock id="previews-placeholder" hidden></bx-placeholderblock> <bx-pager id="pager" value="1" max="1"></bx-pager> </main> <div id="dialogs"> <dialog id="blog-dialog"> <bx-blogform id="blog-form" type="new"></bx-blogform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#header{display:flex;width:100%}#new-blog-anchor{height:fit-content;margin-left:auto;filter:none;text-decoration:none}#new-blog-button x-label{cursor:pointer}#previews{margin-top:14px}#previews>*{margin:12px 0}#previews>:first-child{margin-top:0}#previews-skeleton>*{margin:12px 0}#previews-skeleton>:first-child{margin-top:0}#pager{margin-top:24px}#blog-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = location.origin + "/blog";
    let ag = new URLSearchParams(location.search);
    let ah = false;
    for (let [aj, ak] of ag.entries()) {
      if (aj !== "page" || parseInt(ak) <= 1) {
        ah = false;
        break;
      }
      ah = true;
    }
    if (ah) {
      af += "?" + ag.toString();
    }
    return af;
  }
  #at;
  #Xt;
  #ys;
  #ks = null;
  constructor() {
    super();
    this["#filter-block"].addEventListener("change", (af) => this.#Cs(af));
    this["#blog-dialog"].addEventListener("userclose", (af) => this.#Ss(af));
    this["#blog-form"].addEventListener("cancel", (af) => this.#Ts(af));
    this["#blog-form"].addEventListener("submit", (af) => this.#$s(af));
    {
      let af = "";
      for (let ag = 0; ag < 10; ag += 1) {
        af +=
          "\n          <x-card>\n            <bx-blogpreviewblock skeleton></bx-blogpreviewblock>\n          </x-card>\n        ";
      }
      this["#previews-skeleton"].innerHTML = af;
    }
  }
  async connectedCallback() {
    super.connectedCallback();
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#Ps();
      })
    );
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    this.#Es();
    this.#Ps();
    await this.#Ls();
    if (new URLSearchParams(location.search).get("dialog") === "new-blog") {
      this.#Us();
    }
    this.u();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userchange", this.#at);
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#Ls();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname === "/blog") {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      let am = _i(ak, al);
      {
        let an = ["search", "watched-by", "created-by", "sort", "tag", "page"];
        if (am.find((ap) => an.includes(ap)) !== undefined) {
          if (method === "push" || method === "replace") {
            this.o.resetScrollOffset();
          }
          this.#Es();
          await this.#Ls();
          if (method === "pop") {
            this.o.restoreScrollOffset();
          }
        }
      }
      if (am.includes("dialog")) {
        let ap = ak.get("dialog");
        let aq = al.get("dialog");
        if (aq === null) {
          if (ap === "new-blog") {
            this["#blog-dialog"].close();
          }
        } else if (aq === "new-blog") {
          this.#Us();
        }
      }
    }
  }
  #Cs(af) {
    let ag = new URL(location.href);
    let ah = new URLSearchParams(location.search);
    ah.delete("page");
    if (this["#filter-block"].search === "") {
      ah.delete("search");
    } else {
      ah.set("search", this["#filter-block"].search);
    }
    if (this["#filter-block"].watchedBy === null) {
      ah.delete("watched-by");
    } else {
      ah.set("watched-by", this["#filter-block"].watchedBy);
    }
    if (this["#filter-block"].createdBy === null) {
      ah.delete("created-by");
    } else {
      ah.set("created-by", this["#filter-block"].createdBy);
    }
    if (af.detail === "search" && this["#filter-block"].search.trim() !== "") {
      ah.set("sort", "relevance");
    } else if (this["#filter-block"].sort === "createdTime:desc") {
      ah.delete("sort");
    } else if (this["#filter-block"].sort === "createdTime:asc") {
      ah.set("sort", "created-asc");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:desc") {
      ah.set("sort", "updated");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:asc") {
      ah.set("sort", "updated-asc");
    } else if (this["#filter-block"].sort === "commentsCount:desc") {
      ah.set("sort", "comments");
    } else if (this["#filter-block"].sort === "commentsCount:asc") {
      ah.set("sort", "comments-asc");
    } else if (this["#filter-block"].sort === "relevance") {
      ah.set("sort", "relevance");
    }
    if (this["#filter-block"].tag === null) {
      ah.delete("tag");
    } else {
      ah.set("tag", this["#filter-block"].tag);
    }
    ag.search = ah.toString();
    this.o.navigate(ag.href);
  }
  async #$s() {
    if (this["#blog-form"].reportValidity() === true) {
      let af = await Xe();
      let ag = [];
      let ah = null;
      let aj = null;
      let ak = {
        type: "blog",
        title: this["#blog-form"].title,
        description: this["#blog-form"].description,
        attachments: {},
        watchThread: this["#blog-form"].watchThread,
      };
      if (af !== null) {
        ak.userAgent = af;
      }
      this["#blog-form"].throbber = true;
      for (let al of this["#blog-form"].attachments) {
        let am = await (await fetch(al)).blob();
        let an = Kt(30) + "." + we(am.type);
        let ap = Bi.storage.uploadFile("temp/" + an, am);
        ak.attachments[al] = an;
        ag.push(ap);
      }
      try {
        await Promise.all(ag);
        ah = await Bi.functions.postMessage("newPost", ak);
      } catch (aq) {
        aj = aq;
      }
      if (aj === null) {
        let ar = ah.data;
        let au = ar.split("-")[1];
        await Bi.index.whenPostCreated(ar, a2.locale);
        this["#blog-form"].throbber = false;
        this["#blog-dialog"].close();
        this.o.navigate("/blog/" + au);
      } else {
        this["#blog-dialog"].hidden = true;
        this["#blog-form"].throbber = false;
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-add-post",
          },
          detail: bi(aj),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#blog-dialog"].hidden = false;
      }
    }
  }
  #Ts() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #Ss() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #Us() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#blog-form"].clear();
      this["#blog-form"].throbber = false;
      this["#blog-dialog"].hidden = false;
      this["#blog-dialog"].showModal();
    }
  }
  #Es() {
    let af = new URLSearchParams(location.search);
    let ag = af.get("sort");
    this["#filter-block"].search = af.get("search") || "";
    this["#filter-block"].watchedBy = af.get("watched-by") || null;
    this["#filter-block"].createdBy = af.get("created-by") || null;
    this["#filter-block"].tag = af.get("tag") || null;
    this["#filter-block"].sort =
      ag === "relevance"
        ? "relevance"
        : ag === "created"
        ? "createdTime:desc"
        : ag === "created-asc"
        ? "createdTime:asc"
        : ag === "updated"
        ? "threadUpdatedTime:desc"
        : ag === "updated-asc"
        ? "threadUpdatedTime:asc"
        : ag === "comments"
        ? "commentsCount:desc"
        : ag === "comments-asc"
        ? "commentsCount:asc"
        : "createdTime:desc";
  }
  #Ps() {
    let af = Bi.auth.userID !== null;
    let ag = Bi.auth.isModerator;
    this["#new-blog-button"].hidden = af === false || ag === false;
  }
  async #Ls() {
    if (this.#ks) {
      await this.#ks;
    }
    return (this.#ks = new Promise(async (af) => {
      let ag = new URLSearchParams(location.search);
      let ah = {
        query: this["#filter-block"].search,
        locale: a2.locale,
        type: "blog",
        sort: this["#filter-block"].sort,
        page: parseInt(ag.get("page") || "1"),
        perPage: 10,
        preview: true,
      };
      {
        let { tag, createdBy, watchedBy } = this["#filter-block"];
        if (tag !== null) {
          ah.tag = tag;
        }
        if (createdBy !== null || watchedBy !== null) {
          await Bi.auth.whenReady;
          if (Bi.auth.userID !== null) {
            if (createdBy !== null) {
              ah.authorID = createdBy;
            }
            if (watchedBy !== null) {
              ah.watchedBy = watchedBy;
            }
          }
        }
      }
      this.lang = ah.locale;
      this["#new-blog-anchor"].href = qi(location.href, "dialog", "new-blog");
      this["#previews"].innerHTML = "";
      this["#previews-placeholder"].hidden = true;
      this["#previews-placeholder"].title = "#no-results";
      this["#previews-placeholder"].description =
        "#try-redefining-search-criteria";
      this["#previews-skeleton"].hidden = false;
      let [aj, ak] = await Bi.index.searchThreads(ah);
      this["#pager"].max = ak;
      this["#pager"].value = ah.page;
      if (CSS.highlights) {
        CSS.highlights.clear();
      }
      for (let ap of aj) {
        let aq = document.createElement("x-card");
        let ar = document.createElement("bx-blogpreviewblock");
        if (ah.sort === "createdTime:desc" || ah.sort === "createdTime:asc") {
          ar.setAttribute("details", "author created tags comments hashtag");
        } else if (
          ah.sort === "threadUpdatedTime:desc" ||
          ah.sort === "threadUpdatedTime:asc"
        ) {
          ar.setAttribute("details", "author updated tags comments hashtag");
        } else if (
          ah.sort === "commentsCount:desc" ||
          ah.sort === "commentsCount:asc" ||
          ah.sort === "relevance"
        ) {
          ar.setAttribute("details", "author created tags comments hashtag");
        }
        ar.id = ap.id;
        ar.data = ap;
        aq.append(ar);
        this["#previews"].append(aq);
      }
      this["#previews-placeholder"].hidden =
        this["#previews"].childElementCount > 0;
      this["#previews-skeleton"].hidden = true;
      {
        let au = this.o.oldLocation;
        if (au?.pathname.startsWith("/blog/")) {
          let av = "blog-" + au.pathname.split("/")[2];
          let aw = this["#previews"].querySelector(
            'bx-blogpreviewblock[id="' + av + '"]'
          );
          if (aw) {
            aw.blink();
          }
        }
      }
      this.#ks = null;
      af();
    }));
  }
}
customElements.define("bx-blogpage", ks);
class Cs extends HTMLElement {
  static observedAttributes = ["useragent", "staff"];
  static #C = ie` <template> <main> <x-button id="user-agent-button" skin="flat" size="small" hidden> <x-icon id="user-agent-icon"></x-icon> <x-tooltip id="user-agent-tooltip"></x-tooltip> </x-button> <x-button id="staff-button" skin="flat" size="small"> <x-icon id="staff-icon" href="#boxy-svg-small"></x-icon> <x-tooltip id="staff-tooltip"><x-message href="#staff-member"></x-message></x-tooltip> </x-button> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
    }

    main {
      display: flex;
      gap: 5px;
      justify-content: space-evenly;
    }

    #user-agent-icon {
      width: 20px;
      height: 20px;
    }
  `;
  get userAgent() {
    return this.getAttribute("useragent");
  }
  set userAgent(af) {
    if (af) {
      this.setAttribute("useragent", af);
    } else {
      this.removeAttribute("useragent");
    }
  }
  get staff() {
    return this.hasAttribute("staff");
  }
  set staff(af) {
    if (af) {
      this.setAttribute("staff", "");
    } else {
      this.removeAttribute("staff");
    }
  }
  get empty() {
    return this.hasAttribute("empty");
  }
  #Ds = null;
  #zs = false;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Cs.#S];
    this.#P.append(document.importNode(Cs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
  connectedCallback() {
    this.#A();
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && this.#P) {
      if (af === "useragent") {
        if (this.isConnected) {
          this.#Ms();
        }
      } else if (af === "staff" && this.isConnected) {
        this.#As();
      }
    }
  }
  #A() {
    this.#Ms();
    this.#As();
  }
  #Ms() {
    if (this.userAgent) {
      let [af, ag] = this.userAgent.split("; ");
      let [ah, aj] = af.split("/");
      this["#user-agent-button"].hidden = false;
      this["#user-agent-icon"].href =
        "./images/iconsets/user-agents.svg#" + ah.toLowerCase();
      let ak = "<strong>" + ah + "</strong>";
      if (aj !== undefined) {
        ak += " " + aj;
      }
      ak += "";
      if (ag) {
        let [al, am] = ag.split("/");
        ak += "<br/><strong>" + al + "</strong>";
        if (am !== undefined) {
          ak += " " + am;
        }
      }
      this["#user-agent-tooltip"].innerHTML = ak;
    } else {
      this["#user-agent-button"].hidden = true;
    }
    this.#Bs();
  }
  #As() {
    this["#staff-button"].hidden = this.staff === false;
    this.#Bs();
  }
  #Bs() {
    if (this.userAgent === null && this.staff === false) {
      this.setAttribute("empty", "");
    } else {
      this.removeAttribute("empty");
    }
  }
}
if (customElements.get("bx-userbadges") === undefined) {
  customElements.define("bx-userbadges", Cs);
}
class Ss extends HTMLElement {
  static observedAttributes = [
    "condensed",
    "threaded",
    "editable",
    "indentable",
    "deletable",
  ];
  static #C = ie` <template> <div id="sidebar"> <a id="author-avatar-anchor"> <bx-avatar id="author-avatar"></bx-avatar> </a> <bx-userbadges id="author-badges"></bx-userbadges> </div> <header id="header" part="header"> <section id="header-left-column"> <span id="wrote-span"> <a id="wrote-author-anchor"></a> <x-message id="wrote-date-message"></x-message> </span> <span id="thread-title-span" hidden> <a id="thread-title-anchor"></a> </span> </section> <section id="header-right-column"> <x-button id="translate-button" togglable> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <x-button id="menu-button"> <x-icon href="#hamburger-menu"></x-icon> <x-menu> <x-menuitem id="edit-menu-item" hidden> <x-icon href="#edit"></x-icon> <x-label><x-message href="#edit--verb"></x-message></x-label> </x-menuitem> <x-menuitem id="decrease-indent-menu-item" hidden> <x-icon href="#decrease-indent"></x-icon> <x-label><x-message href="#decrease-indent"></x-message></x-label> </x-menuitem> <x-menuitem id="delete-menu-item" hidden> <x-icon href="#trash"></x-icon> <x-label><x-message href="#delete"></x-message></x-label> </x-menuitem> <hr id="menu-separator" hidden> <x-menuitem id="reply-menu-item" hidden> <x-icon href="#comment-outline"></x-icon> <x-label><x-message href="#reply"></x-message></x-label> </x-menuitem> <x-menuitem id="link-menu-item"> <x-icon href="#link"></x-icon> <x-label><x-message href="#copy-link"></x-message></x-label> </x-menuitem> </x-menu> </x-button> </section> </header> <main id="main" part="main"> <article id="article"></article> <div id="skeleton-items"></div> </main> <slot></slot> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      margin: 24px 0 24px 70px;
    }
    :host([condensed]) {
      margin-left: 0px;
    }

    /**
     * Sidebar
     */

    #sidebar {
      left: -68px;
      position: absolute;
    }

    /* Author avatar */

    #author-avatar-anchor {
      display: block;
      filter: none;
    }

    #author-avatar {
      width: 54px;
      height: 54px;
    }

    /* Author badges */

    #author-badges {
      margin-top: 4px;
    }

    /**
     * Header
     */

    #header {
      display: flex;
      align-items: center;
      height: 40px;
      box-sizing: border-box;
      padding: 5px 17px;
      border-width: 1px;
      border-style: solid;
      font-size: 14.5px;
    }

    #header-left-column {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }
    :host([skeleton]) #header-left-column {
      visibility: hidden;
    }

    #header-right-column {
      display: flex;
      margin-left: auto;
      align-items: center;
    }
    :host([skeleton]) #header-right-column {
      visibility: hidden;
    }

    /* Author name */

    #wrote-author-anchor {
      color: inherit;
      text-decoration: none;
      font-weight: 700;
    }
    #wrote-author-anchor:hover {
      text-decoration: underline;
    }

    /* Thread title */

    #thread-title-span {
      border-left: 1.5px solid var(--text-color);
      padding-left: 10px;
      margin-left: 6px;
    }

    #thread-title-anchor {
      font-weight: 700;
      color: inherit;
      text-decoration: none;
    }
    #thread-title-anchor:hover {
      text-decoration: underline;
    }

    /* "Translate" button */

    #translate-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    /* Menu button */

    #menu-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #menu-button::part(arrow) {
      display: none;
    }

    #menu-button > x-icon {
      width: 15px;
      height: 15px;
    }

    #menu-button > x-menu {
      --align: end;
    }

    /**
     * Main
     */

    #main {
      padding: 12px 20px;
      border-width: 1px;
      border-style: solid;
      border-top: none;
    }

    :host([skeleton]) #main #article {
      display: none;
    }

    #main #skeleton-items {
      display: none;
    }
    :host([skeleton]) #main #skeleton-items {
      display: block;
    }

    #main #skeleton-items > div {
      height: 17px;
    }
    #main #skeleton-items div + div {
      margin-top: 10px;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    if (this.isConnected) {
      this.#A();
    }
  }
  get condensed() {
    return this.hasAttribute("condensed");
  }
  set condensed(af) {
    if (af === true) {
      this.setAttribute("condensed", "");
    } else {
      this.removeAttribute("condensed");
    }
  }
  get threaded() {
    return this.hasAttribute("threaded");
  }
  set threaded(af) {
    if (af === true) {
      this.setAttribute("threaded", "");
    } else {
      this.removeAttribute("threaded");
    }
  }
  get editable() {
    return this.hasAttribute("editable");
  }
  set editable(af) {
    if (af === true) {
      this.setAttribute("editable", "");
    } else {
      this.removeAttribute("editable");
    }
  }
  get indentable() {
    return this.hasAttribute("indentable");
  }
  set indentable(af) {
    if (af === true) {
      this.setAttribute("indentable", "");
    } else {
      this.removeAttribute("indentable");
    }
  }
  get deletable() {
    return this.hasAttribute("deletable");
  }
  set deletable(af) {
    if (af === true) {
      this.setAttribute("deletable", "");
    } else {
      this.removeAttribute("deletable");
    }
  }
  get skeleton() {
    return this.hasAttribute("skeleton");
  }
  set skeleton(af) {
    if (af) {
      this.setAttribute("skeleton", "");
    } else {
      this.removeAttribute("skeleton");
    }
  }
  #P;
  #T;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ss.#S];
    this.#P.append(document.importNode(Ss.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("click", (ag) => this.#Rs(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
    this["#edit-menu-item"].addEventListener("click", () => this.#Is());
    this["#decrease-indent-menu-item"].addEventListener("click", () =>
      this.#Fs()
    );
    this["#delete-menu-item"].addEventListener("click", () => this.#Ns());
    this["#reply-menu-item"].addEventListener("click", () => this.#Os());
    this["#link-menu-item"].addEventListener("click", () => this.#_s());
    {
      let ag = "";
      for (let ah = 0; ah < Ht(1, 4); ah += 1) {
        ag +=
          '<div part="skeleton-item" style="width: ' +
          Ht(40, 100) +
          '%;"></div>';
      }
      this["#skeleton-items"].innerHTML = ag;
    }
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#A();
    this["#decrease-indent-menu-item"].disabled = this.#qs().length === 0;
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah) {
      if (af === "condensed") {
        this.#js();
      } else if (af === "threaded") {
        this.#Vs();
      } else if (af === "editable") {
        this.#Gs();
      } else if (af === "indentable") {
        this.#Hs();
      } else if (af === "deletable") {
        this.#Ws();
      }
    }
  }
  #js() {
    this["#sidebar"].hidden = this.condensed === true;
    this["#thread-title-span"].hidden = this.condensed === false;
    this["#menu-button"].hidden = this.condensed === true;
  }
  #Vs() {
    this["#reply-menu-item"].hidden = this.threaded === false;
  }
  #Gs() {
    this["#edit-menu-item"].hidden = this.editable === false;
    this["#menu-separator"].hidden =
      !this.editable && !this.indentable && !this.deletable;
  }
  #Hs() {
    this["#decrease-indent-menu-item"].hidden = this.indentable === false;
    this["#menu-separator"].hidden =
      !this.editable && !this.indentable && !this.deletable;
  }
  #Ws() {
    this["#delete-menu-item"].hidden = this.deletable === false;
    this["#menu-separator"].hidden =
      !this.editable && !this.indentable && !this.deletable;
  }
  #Rs(af) {
    if (af.target.closest("a")) {
      this.#Ks(af);
    } else if (af.target.localName === "img") {
      this.#pi(af);
    }
  }
  #Ks(af) {
    let ag = af.target.closest("a");
    if (
      ag.origin === location.origin &&
      (ag.pathname.startsWith("/blog") ||
        ag.pathname.startsWith("/bugs") ||
        ag.pathname.startsWith("/ideas") ||
        ag.pathname.startsWith("/questions") ||
        ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  #pi(af) {
    this.#T.imageViewer.showModal(af.target);
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  async #Is() {
    let af = new URL(location.href);
    let ag = new URLSearchParams(location.search);
    ag.set("dialog", "edit-" + this.data.id);
    af.search = ag.toString();
    await it(400);
    this.#T.navigate(af.toString());
  }
  #Fs() {
    if (this.parentElement.localName === "bx-commentblock") {
      let af = this.data.id;
      let ag = this.parentElement.data.parentID;
      let ah = [...this.parentElement.parentElement.children].filter(
        (aj) => aj.data.createdTime < this.data.createdTime
      );
      if (ah.length > 0) {
        ah.at(-1).after(this);
      } else {
        this.parentElement.after(this);
      }
      Bi.functions.postMessage("editPost", {
        id: af,
        parentID: ag,
      });
    }
  }
  async #Ns() {
    let af = new URL(location.href);
    let ag = new URLSearchParams(location.search);
    ag.set("dialog", "delete-" + this.data.id);
    af.search = ag.toString();
    await it(400);
    this.#T.navigate(af.toString());
  }
  async #Os() {
    let af = new URL(location.href);
    let ag = new URLSearchParams(location.search);
    ag.set("dialog", "reply-" + this.data.id);
    af.search = ag.toString();
    await it(400);
    this.#T.navigate(af.toString());
  }
  async #_s() {
    let af = new URL(location.href);
    af.hash = this.data.id;
    navigator.clipboard.writeText(af.toString());
    this.#T.openNotification("Copied comment link to clipboard.");
  }
  #qs() {
    let af = [];
    for (
      let ag = this.parentElement;
      ag && ag.localName === "bx-commentblock";
      ag = ag.parentElement
    ) {
      af.push(ag);
    }
    return af;
  }
  #A() {
    let af = this.#Ui;
    if (!this.skeleton) {
      this["#author-avatar-anchor"].href =
        "/profiles/" + af.authorID + "/" + $e(af.authorName);
      this["#author-avatar"].type = af.authorAvatar || "random";
      this["#author-avatar"].value = af.authorID;
      this["#author-badges"].userAgent = af.authorUserAgent;
      this["#author-badges"].staff = af.authorID === "0000000000";
      {
        let ag = af.threadID.split("-")[1];
        let ah = af.id.split("-")[1];
        let aj = af.threadType === "blog" ? af.threadType : af.threadType + "s";
        let { createdTime } = af;
        this["#wrote-author-anchor"].href =
          "/profiles/" + af.authorID + "/" + $e(af.authorName);
        this["#wrote-author-anchor"].textContent = af.authorName;
        this["#wrote-date-message"].setAttribute("href", "#date-wrote");
        this["#wrote-date-message"].setAttribute(
          "args",
          "date: " + createdTime + "}"
        );
        this["#thread-title-anchor"].innerHTML = "" + af.threadTitle;
        this["#thread-title-anchor"].href =
          "/" + aj + "/" + ag + "/" + af.threadSlug + "#comment-" + ah;
        if (af.locale === af.srcLocale && af.locale === a2.locale) {
          this["#translate-button"].hidden = true;
        } else {
          this["#translate-button"].hidden = false;
          this["#translate-button"].toggled = af.locale === a2.locale;
          this["#src-locale-message"].href =
            "#language." + (af.srcLocale || af.locale || "en");
          this["#locale-message"].href = "#language." + a2.locale;
        }
      }
      {
        let al = Te(af.description, true);
        for (let am of al.querySelectorAll("img")) {
          am.setAttribute("loading", "lazy");
        }
        this["#article"].innerHTML = "";
        this["#article"].append(al);
        this["#article"].lang = af.locale;
        for (let an of this["#article"].querySelectorAll("code")) {
          if (an.hasAttribute("data-language")) {
            an.innerHTML = ds(an.textContent, an.getAttribute("data-language"));
          }
        }
        if (CSS.highlights && af.keywords) {
          let ap = ai(af.keywords, [this["#article"]]);
          let aq = CSS.highlights.get("mark") || new Highlight();
          for (let ar of ap) {
            aq.add(ar);
          }
          CSS.highlights.set("mark", aq);
        }
        Bi.auth.whenReady.then(() => {
          if (Bi.auth.isModerator) {
            for (let au of this["#article"].querySelectorAll("img")) {
              Bi.storage.getMetadata(au.src).then((av) => {
                let aw = fe(av.size);
                au.setAttribute("data-file-size", aw);
              });
            }
          }
        });
      }
    }
  }
}
customElements.define("bx-commentblock", Ss);
class Ts extends HTMLElement {
  static _shadowStyleSheet = se`:host{display:block;width:300px;overflow:auto}h3:first-child{margin-top:0}section{padding:12px 14px}`;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.append(
      document.importNode(this.constructor._shadowTemplate.content, true)
    );
    this.#P.adoptedStyleSheets = [
      a2.themeStyleSheet,
      Ts._shadowStyleSheet,
      this.constructor._shadowStyleSheet,
    ];
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.setAttribute("extends", "bx-postsettings");
  }
}
class $s extends Ts {
  static _shadowTemplate = ie` <template> <section id="actions-section"> <h3><x-message href="#actions" autocapitalize></x-message></h3> <x-buttons id="action-buttons"> <x-button id="edit-button" condensed> <x-icon href="#edit"></x-icon> <x-label><x-message href="#edit--verb" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="delete-button" condensed> <x-icon href="#trash"></x-icon> <x-label><x-message href="#delete" autocapitalize ellipsis></x-message></x-label> </x-button> </x-buttons> </section> <hr> <section id="tags-section"> <h3><x-message href="#tags" autocapitalize></x-message></h3> <x-tagsinput id="tags-input"></x-tagsinput> </section> </template>
  `;
  static _shadowStyleSheet = se`#action-buttons{width:100%}#action-buttons x-button{flex:1}`;
  get tags() {
    return this["#tags-input"].value;
  }
  set tags(af) {
    let ag = "";
    for (let ah of af) {
      if (ah.includes(":")) {
        let [aj, ak] = ah.split(":").map((al) => al.trim());
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label slot="scope">' +
          aj +
          "</x-label>\n            <x-label>" +
          ak +
          "</x-label>\n          </x-tag>\n        ";
      } else {
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label>' +
          ah +
          "</x-label>\n          </x-tag>\n        ";
      }
      this["#tags-input"].innerHTML = ag;
    }
  }
  constructor() {
    super();
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#delete-button"].addEventListener("click", () => this.#Ys());
    this["#tags-input"].addEventListener("change", () => this.#Xs());
  }
  #Zs() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "edit",
      })
    );
  }
  #Ys() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "delete",
      })
    );
  }
  #Xs() {
    this.dispatchEvent(new CustomEvent("tagschange"));
  }
}
customElements.define("bx-blogsettings", $s);
class Ps extends HTMLElement {
  static observedAttributes = ["condensed"];
  static #C = ie` <template> <header id="header" part="header"> <div id="header-left-column"> <a id="author-avatar-anchor"> <bx-avatar id="author-avatar"></bx-avatar> </a> <bx-userbadges id="author-badges"></bx-userbadges> <a id="author-anchor"></a> <span id="wrote-span"></span> <a id="thread-anchor" hidden></a> </div> <div id="header-right-column"> <x-button id="translate-button" togglable> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <x-box id="actions-box"> <x-button id="watch-button"> <x-icon href="#watch"></x-icon> <x-tooltip><x-message href="#watch"></x-message></x-tooltip> </x-button> <x-button id="edit-button" hidden> <x-icon href="#edit"></x-icon> </x-button> <x-button id="settings-button" hidden> <x-icon href="#hamburger-menu"></x-icon> <x-popover id="settings-popover" modal> <bx-blogsettings id="settings"></bx-blogsettings> </x-popover> </x-button> </x-box> </div> </header> <main id="main" part="main"> <article id="article"> <h2 id="title"> <span id="title-span"></span> <span id="hashtag-span" part="hashtag"></span> </h2> <div id="tags"></div> <img id="banner-image" width="700" height="400"> <section id="description"></section> </article> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      margin: 8px 0;
    }

    /**
     * Header
     */

    #header {
      display: flex;
      align-items: center;
      height: 40px;
      padding: 0 20px;
      border-width: 1px;
      border-style: solid;
      font-size: 14.5px;
    }

    #header-left-column {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    #header-right-column {
      display: flex;
      align-items: center;
      margin-left: auto;
    }

    /* Avatar */

    #author-avatar-anchor {
      display: inline-block;
      vertical-align: middle;
    }
    #author-avatar-anchor[hidden] {
      display: none;
    }

    /* Author badges */

    #author-badges {
      display: inline-block;
      vertical-align: middle;
      margin-left: 2px;
    }
    #author-badges[hidden],
    #author-badges[empty] {
      display: none;
    }

    /* Author name */

    #author-anchor {
      font-weight: 700;
      line-height: 31px;
      margin-left: 2px;
      text-decoration: none;
      color: inherit;
    }
    #author-anchor:hover {
      text-decoration: underline;
    }

    /* Thread anchor */

    #thread-anchor {
      font-weight: 700;
      border-left: 1.5px solid var(--text-color);
      padding-left: 10px;
      margin-left: 6px;
      color: inherit;
      text-decoration: none;
    }
    #thread-anchor:hover {
      text-decoration: underline;
    }

    /* "Translate" button */

    #translate-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    /* "Watch" button */

    #watch-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #watch-button x-icon {
      margin: 0;
    }

    /* "Edit" button */

    #edit-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #edit-button x-icon {
      margin: 0;
      width: 14px;
      height: 14px;
    }

    /* "Settings" button */

    #settings-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #settings-button::part(arrow) {
      display: none;
    }

    #settings-button > x-icon {
      width: 15px;
      height: 15px;
    }

    /**
     * Main
     */

    #main {
      padding: 22px 24px;
      border-width: 1px;
      border-style: solid;
      border-top: none;
    }
    :host([condensed]) #main {
      padding: 10px 18px;
    }

    /* Title */

    #title {
      margin: 0;
    }

    #title #hashtag-span {
      font-size: 20px;
      vertical-align: middle;
      text-transform: lowercase;
    }

    /* Tags */

    #tags {
      display: flex;
      margin-top: 5px;
    }
    #tags:empty,
    #tags[hidden] {
      display: none;
    }

    #tags a {
      display: flex;
      margin: 0 0 0 6px;
      text-decoration: none;
    }
    #tags a:first-child {
      margin-left: 0;
    }
    #tags a:active {
      outline: none;
    }

    /* Description */

    #description {
      margin-top: 20px;
    }
    #title[hidden] + #tags[hidden] + #description {
      margin-top: 0;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    if (this.isConnected) {
      this.#A();
    }
  }
  get condensed() {
    return this.hasAttribute("condensed");
  }
  set condensed(af) {
    if (af === true) {
      this.setAttribute("condensed", "");
    } else {
      this.removeAttribute("condensed");
    }
  }
  #T;
  #P;
  #Gt;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ps.#S];
    this.#P.append(document.importNode(Ps.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("click", (ag) => this.#Rs(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
    this["#watch-button"].addEventListener("click", () => this.#Js());
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#settings"].addEventListener("buttonclick", (ag) => this.#Qs(ag));
    this["#settings"].addEventListener("tagschange", () => this.#ea());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#A();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "condensed") {
      this.#js();
    }
  }
  #js() {
    this["#title"].hidden = this.condensed === true;
    this["#author-avatar-anchor"].hidden = this.condensed === true;
    this["#author-badges"].hidden = this.condensed === true;
    this["#hashtag-span"].hidden = this.condensed === true;
    this["#thread-anchor"].hidden = this.condensed === false;
    this["#tags"].hidden = this.condensed === true;
    this["#actions-box"].hidden = this.condensed === true;
  }
  #Rs(af) {
    if (af.target.closest("a")) {
      this.#Ks(af);
    } else if (af.target.localName === "img") {
      this.#pi(af);
    }
  }
  async #Ks(af) {
    let ag = af.target.closest("a");
    if (
      ag.origin === location.origin &&
      (ag.pathname.startsWith("/blog") || ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  #pi(af) {
    this.#T.imageViewer.showModal(af.target);
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  async #Js() {
    let af = this["#watch-button"].toggled === true ? "unwatch" : "watch";
    let ag = this["#watch-button"].toggled;
    this["#watch-button"].disabled = true;
    this["#watch-button"].toggled = af === "watch";
    if (Bi.auth.userEmailVerified === false) {
      this["#watch-button"].toggled = ag;
      if (Bi.auth.userID === null) {
        this.#T.navigate(qi(location.href, "dialog", "login"));
      } else {
        this.#T.openEmailVerifyMessageDialog();
      }
    } else {
      let ah = this.#Ui.id;
      let aj = Bi.auth.userID;
      let ak = null;
      try {
        if (af === "watch") {
          await Bi.functions.postMessage("watchPost", ah);
        } else {
          await Bi.functions.postMessage("unwatchPost", ah);
        }
      } catch (al) {
        ak = al;
      }
      if (ak === null) {
        this.#Ui.watchers = this.#Ui.watchers.filter((am) => am !== aj);
        if (af === "watch") {
          this.#Ui.watchers.push(aj);
        }
      } else {
        if (af === "watch") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-watch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-unwatch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        this["#watch-button"].toggled = ag;
      }
    }
    this["#watch-button"].disabled = false;
  }
  #Zs() {
    let af = new URL(location.href);
    let ag = new URLSearchParams(location.search);
    ag.set("dialog", "edit-blog");
    af.search = ag.toString();
    this.#T.navigate(af.toString());
  }
  async #Qs(af) {
    if (af.detail === "edit") {
      let ag = new URL(location.href);
      let ah = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ah.set("dialog", "edit-blog");
      ag.search = ah.toString();
      await it(400);
      this.#T.navigate(ag.toString());
    } else if (af.detail === "delete") {
      let aj = new URL(location.href);
      let ak = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ak.set("dialog", "delete-blog");
      aj.search = ak.toString();
      await it(400);
      this.#T.navigate(aj.toString());
    }
  }
  async #ea() {
    let af = this["#settings"].tags;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        tags: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.tags = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-tags",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].tags = this.#Ui.tags;
    }
  }
  #A() {
    let af = Bi.auth.userID !== null;
    let ag = Bi.auth.isModerator;
    let ah = af ? Bi.auth.userID : null;
    let aj = this.#Ui;
    if (aj !== null) {
      this["#author-avatar-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-avatar"].type = aj.authorAvatar || "random";
      this["#author-avatar"].value = aj.authorID;
      this["#author-badges"].userAgent = aj.authorUserAgent;
      this["#author-badges"].staff = aj.authorID === "0000000000";
      this["#author-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-anchor"].textContent = aj.authorName;
      this["#wrote-span"].innerHTML =
        '<x-message href="#date-wrote" args="date: ' +
        aj.createdTime +
        '}"></x-message>';
      {
        let ak = aj.id.split("-").at(-1);
        this["#thread-anchor"].innerHTML = Te(aj.title);
        this["#thread-anchor"].href = "/blog/" + ak + "/" + aj.threadSlug;
      }
      if (aj.locale === aj.srcLocale && aj.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = aj.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (aj.srcLocale || aj.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      this["#watch-button"].toggled = af === true && aj.watchers.includes(ah);
      this["#edit-button"].hidden = ag === true || ah !== aj.authorID;
      this["#settings-button"].hidden = ag === false;
      if (this["#settings-popover"].opened === false) {
        this["#settings"].tags = aj.tags;
      }
      this["#title"].lang = aj.locale;
      this["#title-span"].innerHTML = Te(aj.title);
      this["#hashtag-span"].textContent = "#" + aj.id.split("-").at(-1);
      {
        let al = "";
        for (let am of aj.tags) {
          let an = "/blog?tag=" + ye(am, " ", "+");
          let ap = Vt(am);
          if (am.includes(":")) {
            let [aq, ar] = am.split(":").map((au) => au.trim());
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label slot="scope">' +
              aq +
              "</x-label>\n                <x-label>" +
              ar +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          } else {
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label>' +
              am +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          }
        }
        this["#tags"].innerHTML = al;
      }
      this["#banner-image"].src = aj.banner;
      this["#description"].innerHTML = Te(aj.description);
      this["#description"].lang = aj.locale;
      for (let au of this["#description"].querySelectorAll("code")) {
        if (au.hasAttribute("data-language")) {
          au.innerHTML = ds(au.textContent, au.getAttribute("data-language"));
        }
      }
      if (CSS.highlights && aj.keywords) {
        let av = ai(aj.keywords, [this["#title"], this["#description"]]);
        let aw = CSS.highlights.get("mark") || new Highlight();
        for (let ax of av) {
          aw.add(ax);
        }
        CSS.highlights.set("mark", aw);
      }
      Bi.auth.whenReady.then(() => {
        if (Bi.auth.isModerator) {
          for (let ay of this["#description"].querySelectorAll("img")) {
            Bi.storage.getMetadata(ay.src).then((az) => {
              let aA = fe(az.size);
              ay.setAttribute("data-file-size", aA);
            });
          }
        }
      });
    }
  }
}
customElements.define("bx-blogblock", Ps);
class Es extends bs {
  static observedAttributes = ["type"];
  static v = ie` <template> <x-box> <h2 id="heading"><x-message id="heading-message"></x-message></h2> <bx-avatar id="avatar"></bx-avatar> </x-box> <bx-richtextarea id="textarea" spellcheck></bx-richtextarea> <x-checkbox id="watch-checkbox" toggled> <x-label><strong><x-message href="#watch-thread"></x-message></strong></x-label> <x-label><x-message href="#watch-thread.detail"></x-message></x-label> </x-checkbox> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#save"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%}#main{display:flex;flex-flow:column}h2{margin:0;font-size:28px}#avatar{width:40px;height:40px;margin-left:auto}#textarea{min-height:0;margin-top:8px;flex:1}#watch-checkbox{margin-top:16px}`;
  get type() {
    if (this.hasAttribute("type")) {
      return this.getAttribute("type");
    } else {
      return "new";
    }
  }
  set type(af) {
    this.setAttribute("type", af);
  }
  get description() {
    return this["#textarea"].value;
  }
  set description(af) {
    this["#textarea"].value = Te(af);
    this["#textarea"].setCustomValidity("");
  }
  get attachments() {
    return this["#textarea"].blobUrls;
  }
  get watchThread() {
    return this["#watch-checkbox"].toggled;
  }
  #at;
  constructor() {
    super();
    this["#textarea"].addEventListener("input", () => this.#ta());
    this["#submit-button"].addEventListener("click", () => this.#ms());
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
  }
  connectedCallback() {
    super.connectedCallback();
    this.#xs();
    this.#gs();
    this.#ia();
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#gs();
      })
    );
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "type") {
      this.#xs();
      this.#ia();
    }
  }
  clear() {
    super.clear();
    this["#textarea"].value = "";
    this["#textarea"].setCustomValidity("");
    this["#watch-checkbox"].toggled = true;
  }
  reportValidity() {
    let af = false;
    if (this.description.trim() === "") {
      this["#textarea"].setCustomValidity("This field is required");
      this["#textarea"].focus();
    } else {
      this["#textarea"].setCustomValidity("");
      af = true;
    }
    return af;
  }
  #ta() {
    this["#textarea"].setCustomValidity("");
    this.p = true;
  }
  #ms() {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #xs() {
    this["#heading-message"].href =
      this.type === "edit" ? "#edit-comment" : "#new-comment";
  }
  async #gs() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID !== null) {
      this["#avatar"].type = Bi.auth.userProfile.avatar || "random";
      this["#avatar"].value = Bi.auth.userID;
    }
  }
  #ia() {
    this["#watch-checkbox"].hidden = this.type === "edit";
  }
}
customElements.define("bx-commentform", Es);
class Ls extends bs {
  static v = ie` <template> <h2><x-message href="#confirm-delete-comment"></x-message></h2> <p><x-message href="#confirm-delete-comment.detail"></x-message></p> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"><x-label><x-message href="#cancel"></x-message></x-label></x-button> <x-button id="submit-button" toggled><x-label><x-message href="#delete"></x-message></x-label></x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:400px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
}
customElements.define("bx-commentdeleteform", Ls);
class Us extends bs {
  static v = ie` <template> <h2><x-message href="#confirm-delete-post"></x-message></h2> <p><x-message href="#confirm-delete-post.detail"></x-message></p> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"><x-label><x-message href="#cancel"></x-message></x-label></x-button> <x-button id="submit-button" toggled><x-label><x-message href="#delete"></x-message></x-label></x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:400px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
}
customElements.define("bx-blogdeleteform", Us);
class Ds extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <bx-blogblock id="blog-block"></bx-blogblock> <hr id="separator"> <h3 id="comments-heading"> <x-message id="comments-message" href="#comments" args="count: 0"></x-message> </h3> <div id="comments"></div> <a id="new-comment-anchor"> <x-button id="new-comment-button" toggled> <x-label><strong><x-message href="new-comment"></x-message></strong></x-label> </x-button> </a> </main> <div id="dialogs"> <dialog id="blog-dialog"> <bx-blogform id="blog-form" type="edit"></bx-blogform> </dialog> <dialog id="blog-delete-dialog"> <bx-blogdeleteform id="blog-delete-form"></bx-blogdeleteform> </dialog> <dialog id="comment-dialog"> <bx-commentform id="comment-form"></bx-commentform> </dialog> <dialog id="comment-delete-dialog"> <bx-commentdeleteform id="comment-delete-form"></bx-commentdeleteform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#separator{margin:35px 0 27px}#blog-block{margin:20px 0 8px 0}#comments-heading{font-size:28px}#new-comment-anchor{display:block;margin-top:15px}#new-comment-button{width:100%;min-height:36px}#new-comment-button x-label{cursor:pointer}#blog-dialog,#comment-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = this["#blog-block"].data.id.split("-")[1];
    let ag = this["#blog-block"].data.threadSlug;
    return location.origin + "/blog/" + af + "/" + ag;
  }
  #Xt;
  #ys;
  #Gt;
  #sa = null;
  constructor() {
    super();
    this["#blog-dialog"].addEventListener("userclose", (af) => this.#aa(af));
    this["#blog-form"].addEventListener("cancel", (af) => this.#Ts(af));
    this["#blog-form"].addEventListener("submit", (af) => this.#$s(af));
    this["#blog-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#blog-delete-form"].addEventListener("submit", (af) => this.#oa(af));
    this["#blog-delete-form"].addEventListener("cancel", (af) => this.#na(af));
    this["#comment-dialog"].addEventListener("userclose", (af) => this.#aa(af));
    this["#comment-form"].addEventListener("submit", (af) => this.#la(af));
    this["#comment-form"].addEventListener("cancel", (af) => this.#ra(af));
    this["#comment-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#comment-delete-form"].addEventListener("submit", (af) =>
      this.#ha(af)
    );
    this["#comment-delete-form"].addEventListener("cancel", (af) =>
      this.#ca(af)
    );
  }
  async connectedCallback() {
    super.connectedCallback();
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = (af) => {
        this.#da(af);
      })
    );
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    await this.#A();
    {
      let af = new URLSearchParams(location.search).get("dialog");
      if (af !== null) {
        if (af === "edit-blog") {
          this.#ua();
        } else if (af === "delete-blog") {
          this.#pa();
        } else if (af === "new-comment") {
          this.#ma();
        } else if (af.startsWith("reply-comment-")) {
          this.#xa();
        } else if (af.startsWith("edit-comment-")) {
          this.#ga();
        } else if (af.startsWith("delete-comment-")) {
          this.#ba();
        }
      }
    }
    this.u();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#A();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname.startsWith("/blog/")) {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      if (V([...ak.keys(), ...al.keys()]).includes("dialog")) {
        let am = ak.get("dialog");
        let an = al.get("dialog");
        if (am !== an) {
          if (an === null) {
            if (am !== null) {
              if (am === "edit-blog") {
                this["#blog-dialog"].close();
              } else if (am === "delete-blog") {
                this["#blog-delete-dialog"].close();
              } else if (
                am === "new-comment" ||
                am.startsWith("reply-comment-") ||
                am.startsWith("edit-comment-")
              ) {
                this["#comment-dialog"].close();
              } else if (am.startsWith("delete-comment-")) {
                this["#comment-delete-dialog"].close();
              }
            }
          } else if (an === "edit-blog") {
            this.#ua();
          } else if (an === "delete-blog") {
            this.#pa();
          } else if (an === "new-comment") {
            this.#ma();
          } else if (an.startsWith("reply-comment-")) {
            this.#xa();
          } else if (an.startsWith("edit-comment-")) {
            this.#ga();
          } else if (an.startsWith("delete-comment-")) {
            this.#ba();
          }
        }
      }
    }
  }
  #da(af) {
    let ag = Bi.auth.isModerator;
    let ah = Bi.auth.userProfile;
    for (let aj of this["#comments"].querySelectorAll("bx-commentblock")) {
      aj.editable = ag;
      aj.indentable = ag;
      aj.deletable = ag;
    }
    if (ah) {
      let ak = Bi.auth.userID;
      let al = this["#blog-block"].data;
      if (al?.authorID === ak && al.authorName !== ah.name) {
        al.authorName = ah.name;
        this["#blog-block"].data = al;
      }
    }
    if (ah) {
      let am = Bi.auth.userID;
      for (let an of this["#comments"].children) {
        if (am !== null && am === an.data?.authorID) {
          let ap = an.data;
          if (ap.authorName !== ah.name) {
            ap.authorName = ah.name;
            an.data = ap;
          }
        }
      }
    }
  }
  #aa() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #$s() {
    if (this["#blog-form"].reportValidity() === true) {
      let af = "blog-" + location.pathname.split("/")[2];
      let ag = [];
      let ah = null;
      let aj = {
        id: af,
        title: this["#blog-form"].title,
        description: this["#blog-form"].description,
        banner: this["#blog-form"].banner,
        attachments: {},
      };
      this["#blog-form"].throbber = true;
      for (let ak of this["#blog-form"].attachments) {
        let al = await (await fetch(ak)).blob();
        let am = Kt(30) + "." + we(al.type);
        let an = Bi.storage.uploadFile("temp/" + am, al);
        aj.attachments[ak] = am;
        ag.push(an);
      }
      try {
        await Promise.all(ag);
        await Bi.functions.postMessage("editPost", aj);
      } catch (ap) {
        ah = ap;
      }
      if (ah === null) {
        await Bi.index.whenPostEdited(
          af,
          a2.locale,
          this["#blog-form"].revision
        );
        await this["#blog-dialog"].close();
        await it(150);
        await this.#A();
        this.o.navigate(qi(location.href, "dialog", null));
      } else {
        this["#blog-dialog"].hidden = true;
        await it(150);
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-edit-post",
          },
          detail: bi(ah),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#blog-form"].throbber = false;
        this["#blog-dialog"].hidden = false;
      }
    }
  }
  async #la() {
    if (this["#comment-form"].reportValidity() === true) {
      let af = new URLSearchParams(location.search).get("dialog");
      this["#comment-form"].throbber = true;
      if (af === "new-comment" || af.startsWith("reply-comment-")) {
        let ag = "blog-" + location.pathname.split("/")[2];
        let ah = await Xe();
        let aj = [];
        let ak = null;
        let al = null;
        let am = {
          type: "comment",
          description: this["#comment-form"].description,
          attachments: {},
          watchThread: this["#comment-form"].watchThread,
          parentID: af.startsWith("reply-comment-") ? af.substring(6) : ag,
        };
        if (ah !== null) {
          am.userAgent = ah;
        }
        for (let an of this["#comment-form"].attachments) {
          let ap = await (await fetch(an)).blob();
          let aq = Kt(30) + "." + we(ap.type);
          let ar = Bi.storage.uploadFile("temp/" + aq, ap);
          am.attachments[an] = aq;
          aj.push(ar);
        }
        try {
          await Promise.all(aj);
          ak = await Bi.functions.postMessage("newPost", am);
        } catch (au) {
          al = au;
        }
        if (al === null) {
          let av = ak.data;
          await Bi.index.whenPostCreated(av, a2.locale);
          this["#comment-form"].throbber = false;
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          let aw = this["#comments"].querySelector("#" + av);
          if (aw) {
            aw.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-add-comment",
            },
            detail: bi(al),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-dialog"].hidden = false;
        }
      } else if (af.startsWith("edit-comment-")) {
        let ax = af.substring(5);
        let ay = this["#comments"].querySelector("#" + ax);
        let az = [];
        let aA = null;
        let aB = null;
        let aC = {
          id: ax,
          description: this["#comment-form"].description,
          attachments: {},
        };
        for (let aD of this["#comment-form"].attachments) {
          let aE = await (await fetch(aD)).blob();
          let aF = Kt(30) + "." + we(aE.type);
          let aG = Bi.storage.uploadFile("temp/" + aF, aE);
          aC.attachments[aD] = aF;
          az.push(aG);
        }
        try {
          await Promise.all(az);
          aA = await Bi.functions.postMessage("editPost", aC);
        } catch (aH) {
          aB = aH;
        }
        if (aB === null) {
          await Bi.index.whenPostEdited(
            ax,
            a2.locale,
            this["#comment-form"].revision
          );
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          ay = this["#comments"].querySelector("#" + ax);
          if (ay) {
            ay.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-edit-comment",
            },
            detail: bi(aB),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = false;
        }
      }
    }
  }
  async #oa() {
    let af = "blog-" + location.pathname.split("/")[2];
    let ag = null;
    this["#blog-delete-form"].focus();
    this["#blog-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      await this["#blog-delete-dialog"].close();
      this.o.navigate("/blog");
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-post",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  async #ha() {
    let af = new URLSearchParams(location.search).get("dialog").substring(7);
    let ag = null;
    this["#comment-delete-form"].focus();
    this["#comment-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      this.o.navigate(qi(location.href, "dialog", null));
      await this.#A();
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-comment",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  #Ts() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #na() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ra() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ca() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #ua() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = "blog-" + location.pathname.split("/")[2];
      let { title, description, banner, revision } =
        await Bi.database.getDocument("posts", af);
      this["#blog-form"].clear();
      this["#blog-form"].title = title;
      this["#blog-form"].description = description;
      this["#blog-form"].banner = banner;
      this["#blog-form"].revision = revision;
      this["#blog-form"].throbber = false;
      this["#blog-dialog"].hidden = false;
      this["#blog-dialog"].showModal();
    }
  }
  async #pa() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#blog-delete-form"].throbber = false;
      this["#blog-delete-dialog"].hidden = false;
      this["#blog-delete-dialog"].showModal();
    }
  }
  async #ma() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-form"].clear();
      this["#comment-form"].type = "new";
      this["#comment-form"].description = "";
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #xa() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-form"].clear();
      this["#comment-form"].type = "new";
      this["#comment-form"].description = "";
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ga() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = new URLSearchParams(location.search).get("dialog").substring(5);
      let { description, revision } = await Bi.database.getDocument(
        "posts",
        af
      );
      this["#comment-form"].clear();
      this["#comment-form"].type = "edit";
      this["#comment-form"].description = description;
      this["#comment-form"].revision = revision;
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ba() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-delete-form"].throbber = false;
      this["#comment-delete-form"].hidden = false;
      this["#comment-delete-dialog"].showModal();
    }
  }
  async #A() {
    if (this.#sa) {
      await this.#sa;
    }
    return (this.#sa = new Promise(async (af) => {
      this.lang = a2.locale;
      this["#comments"].innerHTML = "";
      let ag = "blog-" + location.pathname.split("/")[2];
      let ah = await Bi.index.getPost(ag, a2.locale);
      let aj = ag.split("-")[1];
      if (ah) {
        {
          let ak = "/blog/" + aj + "/" + ah.threadSlug;
          if (location.pathname !== ak) {
            let al = location.href.replace(location.pathname, ak);
            this.o.navigate(al, true);
          }
        }
        this["#blog-block"].data = ah;
        this["#comments-message"].args = {
          count: ah.commentsCount,
        };
        this["#new-comment-anchor"].href = qi(
          location.href,
          "dialog",
          "new-comment"
        );
        if (ah.commentsCount === 0) {
          this["#comments"].innerHTML = "";
        } else {
          {
            let aq = "";
            for (let ar = 0; ar < Math.min(ah.commentsCount, 10); ar += 1) {
              aq += "<bx-commentblock skeleton></bx-commentblock>";
            }
            this["#comments"].innerHTML = aq;
          }
          let am = await Bi.index.getThreadComments(ag, a2.locale);
          let an = document.createDocumentFragment();
          let ap = (au) => {
            let av = document.createElement("bx-commentblock");
            av.id = au.id;
            av.data = au;
            av.threaded = true;
            av.editable = Bi.auth.isModerator;
            av.indentable = Bi.auth.isModerator;
            av.deletable = Bi.auth.isModerator;
            let aw = am.filter((ax) => ax.parentID === au.id);
            for (let ax of aw) {
              let ay = ap(ax);
              av.append(ay);
            }
            return av;
          };
          for (let au of am) {
            if (au.parentID === ag) {
              let av = ap(au);
              an.append(av);
            }
          }
          this["#comments"].innerHTML = "";
          this["#comments"].append(an);
        }
      }
      this.#sa = null;
      af();
    }));
  }
}
customElements.define("bx-blogsubpage", Ds);
class zs extends HTMLElement {
  static #C = ie` <template> <main id="main"> <a id="thumbnail-anchor" href="/tutorials/1/selecting-objects"> <img id="thumbnail"> <x-icon id="play-icon" href="#play-video"></x-icon> </a> <div id="meta"> <h3><a id="title-anchor" href="/tutorials/1/selecting-objects"></a></h3> <p id="description"></p> </div> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      overflow: hidden;
      min-height: 190px;
    }

    #main {
      display: flex;
      min-height: inherit;
    }

    #thumbnail-anchor {
      width: 50%;
      min-width: 50%;
      min-height: inherit;
      user-select: none;
      -webkit-user-select: none;
      position: relative;
      background: var(--checkboard-background);
    }

    #thumbnail {
      width: 100%;
      display: block;
      pointer-events: none;
    }
    #thumbnail-anchor:hover #thumbnail {
      filter: brightness(0.5);
    }

    #play-icon {
      display: none;
      position: absolute;
      left: 50%;
      top: 50%;
      width: 80px;
      height: 80px;
      transform: translate(-50%, -50%);
      color: white;
    }
    #thumbnail-anchor:hover #play-icon {
      display: block;
    }

    #meta {
      padding: 22px;
    }

    h3 {
      font-size: 22px;
    }

    h3 a {
      color: inherit;
      text-decoration: none;
      font-weight: inherit;
    }
    h3 a:hover {
      color: inherit;
      text-decoration: underline;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    this.#A();
  }
  #T;
  #P;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, zs.#S];
    this.#P.append(document.importNode(zs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#A();
  }
  blink() {
    return new Promise(async (af) => {
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      await it(200);
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      af();
    });
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (ag) {
      af.preventDefault();
      if (ag.href !== location.href) {
        this.#T.navigate(ag.href);
      }
    }
  }
  #A() {
    let af = this.#Ui.messageID.substring(this.#Ui.messageID.indexOf("-") + 1);
    this["#thumbnail"].src =
      "./storage/artworks/" + this.#Ui.thumbnailUID + ".svg";
    this["#thumbnail-anchor"].href =
      "/tutorials/" + this.#Ui.videoUID + "/" + af;
    this["#title-anchor"].href = "/tutorials/" + this.#Ui.videoUID + "/" + af;
    this["#title-anchor"].innerHTML =
      '<x-message href="' + this.#Ui.messageID + '.title"></x-message>';
    this["#description"].innerHTML =
      '<x-message href="' + this.#Ui.messageID + '.description"></x-message>';
  }
}
customElements.define("bx-tutorialpreviewblock", zs);
class Ms extends HTMLElement {
  static observedAttributes = ["videoid"];
  static #C = ie` <template> <div id="backdrop"> <main id="main"> <div id="iframe-wrapper"> <div id="iframe"></div> </div> </main> </div> </template>
  `;
  static #S = se`
    :host {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 999;
    }
    :host([videoid]) {
      display: block;
    }

    #backdrop {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: transparent;
    }

    #main {
      width: 100%;
      max-width: 1000px;
      margin: 30px;
    }

    #iframe-wrapper {
      overflow: hidden;
      padding-top: 56.25%;
      position: relative;
    }

    #iframe {
      border: 0;
      height: 100%;
      left: 0;
      position: absolute;
      top: 0;
      width: 100%;
      margin: 0;
    }
  `;
  get videoID() {
    if (this.hasAttribute("videoid")) {
      return this.getAttribute("videoid");
    } else {
      return null;
    }
  }
  set videoID(af) {
    if (af === null) {
      this.removeAttribute("videoid");
    } else {
      this.setAttribute("videoid", af);
    }
  }
  get ready() {
    return this.#vi === null;
  }
  get whenReady() {
    return new Promise((af) => {
      if (this.#vi === null) {
        af();
      } else {
        this.#vi.push(af);
      }
    });
  }
  #fa = false;
  #vi = [];
  #wa = null;
  #P;
  connectedCallback() {
    if (!this.#P) {
      this.#P = this.attachShadow({
        mode: "closed",
      });
      this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ms.#S];
      this.#P.append(document.importNode(Ms.#C.content, true));
      for (let af of this.#P.querySelectorAll("[id]")) {
        this["#" + af.id] = af;
      }
      this["#backdrop"].addEventListener("click", (ag) => {
        this.#va(ag);
      });
      this.#A();
    }
  }
  disconnectedCallback() {}
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && this.#P && af === "videoid") {
      this.#A();
    }
  }
  #ya(af) {
    if (this.#vi !== null) {
      for (let ag of this.#vi) {
        ag();
      }
      this.#vi = null;
    }
  }
  #ka(af) {}
  #va(af) {
    this.videoID = null;
    this.#A();
    this.dispatchEvent(new CustomEvent("close"));
  }
  async #A() {
    if (this.videoID === null) {
      if (this.#wa) {
        this.#wa.stopVideo();
        this.#wa.destroy();
        this.#wa = null;
        this.#fa = false;
        this.#vi = [];
      }
    } else {
      if (this.#wa === null) {
        this.#wa = new YT.Player(this["#iframe"], {
          host: "https://www.youtube-nocookie.com",
          videoId: null,
          playerVars: {
            listType: "user_uploads",
            modestbranding: "1",
            rel: "0",
          },
          events: {
            onReady: (af) => this.#ya(af),
            onStateChange: (af) => this.#ka(af),
          },
        });
      }
      await this.whenReady;
      this.#wa.loadVideoById(this.videoID, 0);
    }
  }
}
if (customElements.get("bx-videoplayer") === undefined) {
  customElements.define("bx-videoplayer", Ms);
}
const As = [
  {
    messageID: "#tutorial-selecting-objects",
    thumbnailUID: "-N4E703rMVy7qO2Nm-cM",
    videoUID: "J_Q4YLoW45A",
  },
  {
    messageID: "#tutorial-transforming-objects",
    thumbnailUID: "-N4E97qBVfHpd-45RXUz",
    videoUID: "6M5zcrtvo4s",
  },
  {
    messageID: "#tutorial-paths",
    thumbnailUID: "-N4E9GzYT7D5o63OqQFx",
    videoUID: "ws0yTmTUew8",
  },
  {
    messageID: "#tutorial-shapes",
    thumbnailUID: "-N4E9KAf2yX-kUY0YOSY",
    videoUID: "46aukWdJlg0",
  },
  {
    messageID: "#tutorial-fill-and-stroke",
    thumbnailUID: "-N4E9O2X_59ayE-mCV9J",
    videoUID: "Y6dSQX6P3xM",
  },
  {
    messageID: "#tutorial-compositing",
    thumbnailUID: "-N4E9RZfKmBxa2webOuc",
    videoUID: "j8v4SzypzWw",
  },
  {
    messageID: "#tutorial-text-and-fonts",
    thumbnailUID: "-N4E9VuBdyB-kgVtWiT5",
    videoUID: "6cyxF0EqTyk",
  },
  {
    messageID: "#tutorial-symbols",
    thumbnailUID: "-N4E9Z-iCxxeVlxVdhCN",
    videoUID: "6Ceha-_wsHo",
  },
  {
    messageID: "#tutorial-views",
    thumbnailUID: "-N4E9bKZtPTEvkCNlUcU",
    videoUID: "W-kmNWre-wg",
  },
  {
    messageID: "#tutorial-metadata",
    thumbnailUID: "-N4E9fKzrgukg3EKdwcd",
    videoUID: "CFSNK3WBiPs",
  },
  {
    messageID: "#tutorial-library",
    thumbnailUID: "-N4E9iP4BJBIlju8Ow_I",
    videoUID: "uIVJ2fgOwds",
  },
  {
    messageID: "#tutorial-export",
    thumbnailUID: "-N4E9lwrDBIB-0Cx-_D9",
    videoUID: "ccjJjvzspNI",
  },
];
class Bs extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <div id="header"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> </div> <div id="previews"></div> <bx-videoplayer id="player"></bx-videoplayer> </main> </template>
  `;
  static _shadowStyleSheet = se`#header{width:100%;display:flex;align-items:center}#previews x-card{overflow:hidden}#previews x-card:first-child{margin-top:0}#previews x-card:last-child{margin-bottom:0}#previews bx-tutorialpreviewblock+bx-tutorialpreviewblock{margin-top:20px}`;
  get canonicalURL() {
    return location.origin + "/tutorials";
  }
  #Ca;
  #ys;
  constructor() {
    super();
    this["#player"].addEventListener(
      "close",
      (this.#Ca = (af) => {
        this.#Sa(af);
      })
    );
  }
  async connectedCallback() {
    super.connectedCallback();
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af.detail.fromLocation, af.detail.toLocation);
      })
    );
    await this.#A();
    this.#ii(null, location);
    this.u();
  }
  disconnectedCallback() {
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #ii(af, ag) {
    if (ag.pathname === "/tutorials") {
      if (af?.pathname.startsWith("/tutorials/")) {
        let ah = af.pathname.split("/")[2];
        for (let aj of this["#previews"].children) {
          let ak = aj.firstElementChild;
          if (ak.data.videoUID === ah) {
            ak.blink();
          }
        }
      }
      this["#player"].videoID = null;
    } else if (ag.pathname.startsWith("/tutorials/")) {
      let al = ag.pathname.split("/")[2];
      this["#player"].videoID = al;
    }
  }
  #Sa() {
    this.o.navigate("/tutorials");
  }
  #A() {
    return new Promise(async (af) => {
      for (let ag of As) {
        let ah = document.createElement("bx-tutorialpreviewblock");
        ah.data = ag;
        let aj = document.createElement("x-card");
        aj.append(ah);
        this["#previews"].append(aj);
      }
      af();
    });
  }
}
customElements.define("bx-tutorialspage", Bs);
class Rs extends HTMLElement {
  static #C = ie` <template> <main id="main"> <x-input id="search-input" type="search"> <x-icon href="#search"></x-icon> <x-label><x-message href="#search" autocapitalize ellipsis></x-message></x-label> </x-input> <x-buttons id="status-buttons" tracking="1"> <x-button value="all" condensed> <x-label><x-message href="#bugs.all" autocapitalize></x-message></x-label> </x-button> <x-button value="open" condensed> <x-label><x-message href="#bugs.open" autocapitalize></x-message></x-label> </x-button> <x-button value="closed" condensed> <x-label><x-message href="#bugs.closed" autocapitalize></x-message></x-label> </x-button> </x-buttons> <x-button id="advanced-filters-button"> <x-icon id="advanced-filters-icon" href="#switch"></x-icon> <x-popover id="advanced-filters-popover" modal> <main> <x-switch id="upvoted-by-me-switch"> <x-label><x-message href="#upvoted-by-me"></x-message></x-label> </x-switch> <x-switch id="watched-by-me-switch"> <x-label><x-message href="#watched-by-me"></x-message></x-label> </x-switch> <x-switch id="created-by-me-switch"> <x-label><x-message href="#created-by-me"></x-message></x-label> </x-switch> </main> </x-popover> </x-button> <x-select id="sort-select"> <x-menu> <x-menuitem value="createdTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="createdTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="threadUpdatedTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="threadUpdatedTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="votesCount:desc"> <x-icon href="#upvote"></x-icon> <x-label> <x-message href="#votes"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="votesCount:asc"> <x-icon href="#upvote"></x-icon> <x-label> <x-message href="#votes"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="commentsCount:desc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="commentsCount:asc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="priority:desc"> <x-icon href="#priority"></x-icon> <x-label> <x-message href="#priority"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="priority:asc"> <x-icon href="#priority"></x-icon> <x-label> <x-message href="#priority"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="relevance"> <x-icon href="#search"></x-icon> <x-label><x-message href="#relevance"></x-message></x-label> </x-menuitem> </x-menu> </x-select> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Main
     */

    #main {
      display: flex;
      padding: 8px;
    }

    /* Search input */

    #search-input {
      flex: 1;
      min-width: 60px;
      max-width: none;
    }

    /* Status buttons */

    #status-buttons {
      margin-left: 8px;
    }

    /* Advanced filters button */

    #advanced-filters-button {
      margin-left: 8px;
      padding: 2px 9px;
    }

    #advanced-filters-button::part(arrow) {
      display: none;
    }

    #advanced-filters-icon {
      width: 19px;
      height: 19px;
    }

    #advanced-filters-popover > main {
      padding: 12px;
    }

    #advanced-filters-popover #watched-by-me-switch {
      margin-top: 12px;
    }

    #advanced-filters-popover #created-by-me-switch {
      margin-top: 12px;
    }

    /* Sort select */

    #sort-select {
      margin-left: 8px;
    }
    #sort-select:focus {
      z-index: 1;
    }
    @media all and (max-width: 650px) {
      #sort-select {
        width: 120px;
        min-width: 0px;
      }
    }
    @media all and (max-width: 539px) {
      #sort-select {
        width: 100px;
      }
    }
  `;
  get search() {
    let [af] = this["#search-input"].value.split("#");
    return af.trim();
  }
  set search(af) {
    let [, ag] = this["#search-input"].value.split("#");
    af = af.trim();
    ag = ag === undefined ? null : ag.trim();
    let ah = af;
    if (ag !== null) {
      if (af.length > 0) {
        ah += " #" + ag;
      } else {
        ah += "#" + ag;
      }
    }
    this["#search-input"].value = ah;
  }
  get tag() {
    let [af, ag] = this["#search-input"].value.split("#");
    if (ag === undefined) {
      return null;
    } else {
      return ag.trim();
    }
  }
  set tag(af) {
    let [ag] = this["#search-input"].value.split("#");
    ag = ag.trim();
    let ah = ag;
    if ((af = af === null ? null : af.trim()) !== null) {
      if (ag.length > 0) {
        ah += " #" + af;
      } else {
        ah += "#" + af;
      }
    }
    this["#search-input"].value = ah;
  }
  get status() {
    return this["#status-buttons"].value;
  }
  set status(af) {
    this["#status-buttons"].value = af;
  }
  get upvotedBy() {
    return this.#Ta;
  }
  set upvotedBy(af) {
    this.#Ta = af;
    this["#upvoted-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get watchedBy() {
    return this.#Ci;
  }
  set watchedBy(af) {
    this.#Ci = af;
    this["#watched-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get createdBy() {
    return this.#Ti;
  }
  set createdBy(af) {
    this.#Ti = af;
    this["#created-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get sort() {
    return this["#sort-select"].value;
  }
  set sort(af) {
    this["#sort-select"].value = af;
  }
  #P;
  #Gt;
  #Ta = null;
  #Ci = null;
  #Ti = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Rs.#S];
    this.#P.append(document.importNode(Rs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#search-input"].addEventListener("change", () => this.#$i());
    this["#status-buttons"].addEventListener("toggle", () => this.#$a());
    this["#upvoted-by-me-switch"].addEventListener("toggle", () => this.#Pa());
    this["#watched-by-me-switch"].addEventListener("toggle", () => this.#Pi());
    this["#created-by-me-switch"].addEventListener("toggle", () => this.#Ei());
    this["#sort-select"].addEventListener("change", () => this.#Li());
  }
  connectedCallback() {
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#Si();
      })
    );
    this.#Si();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  #$i() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "search",
      })
    );
  }
  #$a() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "status",
      })
    );
  }
  #Pa() {
    this.#Ta = this["#upvoted-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "upvotedBy",
      })
    );
    this.#Si();
  }
  #Pi() {
    this.#Ci = this["#watched-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "watchedBy",
      })
    );
    this.#Si();
  }
  #Ei() {
    this.#Ti = this["#created-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "createdBy",
      })
    );
    this.#Si();
  }
  #Li() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "sort",
      })
    );
  }
  async #Si() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this["#advanced-filters-button"].hidden = true;
    } else {
      this["#advanced-filters-button"].hidden = false;
      if (this.upvotedBy || this.watchedBy || this.createdBy) {
        this["#advanced-filters-icon"].style.color = "var(--accent-color)";
        this["#advanced-filters-icon"].style.transform = "scaleX(-1)";
      } else {
        this["#advanced-filters-icon"].style.color = null;
        this["#advanced-filters-icon"].style.transform = null;
      }
    }
  }
}
customElements.define("bx-bugsfilterblock", Rs);
let Is = (af) => {
  let ag = "";
  if (af === -2) {
    ag = "#priority.very-low";
  } else if (af === -1) {
    ag = "#priority.low";
  } else if (af === 0) {
    ag = "#priority.normal";
  } else if (af === 1) {
    ag = "#priority.high";
  } else if (af === 2) {
    ag = "#priority.very-high";
  } else if (af === 3) {
    ag = "#priority.critical";
  }
  return ag;
};
class Fs extends HTMLElement {
  static observedAttributes = ["details"];
  static #C = ie` <template> <main id="main"> <div id="title" part="title"> <a id="title-anchor"></a> <span id="hashtag-span" part="hashtag"></span> </div> <x-button id="translate-button" size="small" condensed togglable hidden> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <div id="details" part="details"> <span id="created-detail"> <a id="created-author-anchor"></a> <span id="created-time-span"></span> </span> <span id="updated-detail"> <a id="updated-author-anchor"></a> <span id="updated-time-span"></span> </span> <div id="comments-detail"> <x-icon id="comments-icon" href="#comment-outline"></x-icon> <div id="comments-label"></div> </div> <div id="votes-detail"> <x-icon id="votes-icon" href="#vote"></x-icon> <div id="votes-label"></div> </div> <div id="priority-detail"> <x-icon id="priority-icon" href="#priority"></x-icon> <div id="priority-label"> <x-message id="priority-message"></x-message> </div> </div> </div> <div id="skeleton"> <div id="skeleton-title" part="skeleton-item"></div> <div id="skeleton-details" part="skeleton-item"></div> </div> </main> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      align-items: stretch;
      box-sizing: border-box;
      width: 100%;
      padding: 12px 15px;
      position: relative;
    }

    a {
      color: inherit;
      text-decoration: none;
      font-weight: inherit;
    }
    a:hover {
      text-decoration: underline;
    }

    #main {
      width: 100%;
    }

    /**
     * Title
     */

    #title {
      font-weight: 700;
      font-size: 20px;
      line-height: 1.2;
    }
    :host([skeleton]) #title {
      display: none;
    }

    #title a {
      color: inherit;
      filter: none;
    }

    #title #hashtag-span {
      position: relative;
      bottom: 1px;
      margin-left: 4px;
      vertical-align: middle;
      font-size: 13px;
      text-transform: lowercase;
    }

    /**
     * "Translate" button
     */

    #translate-button {
      float: right;
    }
    :host([skeleton]) #translate-button {
      display: none;
    }

    /**
     * Details
     */

    #details {
      display: flex;
      flex-flow: wrap;
      align-items: center;
      margin-top: 3px;
      font-size: 14.5px;
      line-height: 1.2;
    }
    #details[hidden] {
      display: none;
    }
    :host([skeleton]) #details {
      display: none;
    }

    /* Created */

    #created-detail {
      margin: 2px 12px 2px 0px;
    }

    #created-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #created-author-anchor {
      display: inline;
    }

    /* Updated */

    #updated-detail {
      margin: 2px 12px 2px 0px;
    }

    #updated-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #updated-author-anchor {
      display: inline;
    }

    /* Comments */

    #comments-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #comments-detail[hidden] {
      display: none;
    }

    #comments-icon {
      margin-left: 2px;
      transform: translateY(1px);
    }

    #comments-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Votes */

    #votes-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #votes-detail[hidden] {
      display: none;
    }

    #votes-icon {
      width: 16px;
      height: 16px;
      margin-bottom: 2px;
    }

    #votes-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Priority */

    #priority-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #priority-detail[hidden] {
      display: none;
    }

    #priority-icon {
      width: 17px;
      height: 17px;
    }

    #priority-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Tags */

    a.tag-anchor {
      display: inline-block;
      margin: 2px 6px 2px 0;
      text-decoration: none;
      vertical-align: middle;
    }
    a.tag-anchor:last-of-type {
      margin-right: 12px;
    }

    x-tag {
      vertical-align: middle;
    }

    /**
     * Skeleton
     */

    #skeleton-title {
      display: none;
      height: 20px;
      width: 50%;
    }
    :host([skeleton]) #skeleton-title {
      display: block;
    }

    #skeleton-details {
      display: none;
      height: 13px;
      width: 30%;
      margin-top: 14px;
      opacity: 0.7;
    }
    :host([skeleton]) #skeleton-details {
      display: block;
    }
  `;
  get details() {
    if (this.hasAttribute("details")) {
      return this.getAttribute("details")
        .split(" ")
        .filter((af) => af.trim() !== "");
    } else {
      return ["created", "tags"];
    }
  }
  set details(af) {
    this.setAttribute("details", af.join(""));
  }
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    this.#A();
  }
  get skeleton() {
    return this.hasAttribute("skeleton");
  }
  set skeleton(af) {
    if (af) {
      this.setAttribute("skeleton", "");
    } else {
      this.removeAttribute("skeleton");
    }
  }
  get status() {
    return this.getAttribute("status");
  }
  #T;
  #P;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Fs.#S];
    this.#P.append(document.importNode(Fs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#skeleton-title"].style.width = Ht(50, 90) + "%";
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "details") {
      this.#A();
    }
  }
  blink() {
    return new Promise(async (af) => {
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      await it(200);
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      af();
    });
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (
      ag?.origin === location.origin &&
      (ag.pathname.startsWith("/bugs") || ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  #A() {
    let af = this.#Ui;
    let ag = this.details;
    if (af !== null) {
      this["#details"].hidden = ag.length === 0;
      {
        let ah = Te(af.title);
        let aj = this.data.id.split("-")[1];
        this.setAttribute("status", af.status);
        this["#title-anchor"].href = "/bugs/" + aj + "/" + af.threadSlug;
        this["#title-anchor"].innerHTML = ah;
        if (ag.includes("hashtag")) {
          this["#hashtag-span"].textContent = "#" + aj;
        } else {
          this["#hashtag-span"].textContent = "";
        }
        if (CSS.highlights && af.keywords) {
          let ak = ai(af.keywords, [this["#title"]]);
          let al = CSS.highlights.get("mark") || new Highlight();
          for (let am of ak) {
            al.add(am);
          }
          CSS.highlights.set("mark", al);
        }
      }
      if (af.locale === af.srcLocale && af.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = af.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (af.srcLocale || af.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      if (ag.includes("created")) {
        let an = af.createdTime;
        this["#created-detail"].hidden = false;
        this["#created-detail"].style.order = ag.indexOf("created");
        this["#created-author-anchor"].href =
          "/profiles/" + af.authorID + "/" + $e(af.authorName);
        this["#created-author-anchor"].textContent = af.authorName;
        if (this.details.includes("author")) {
          this["#created-time-span"].innerHTML =
            '<x-message href="#date-created" args="date: ' +
            an +
            '}"></x-message>';
        } else {
          this["#created-time-span"].innerHTML =
            '<x-message href="#date-rel" args="date:' + an + '}"></x-message>';
        }
      } else {
        this["#created-detail"].hidden = true;
      }
      if (ag.includes("updated")) {
        let ap;
        let aq;
        let ar;
        this["#updated-detail"].hidden = false;
        this["#updated-detail"].style.order = ag.indexOf("updated");
        if (af.commentsCount === 0) {
          ap = af.createdTime;
          aq = "/profiles/" + af.authorID + "/" + $e(af.authorName);
          ar = af.authorName;
        } else {
          ap = af.threadUpdatedTime;
          aq =
            "/profiles/" +
            af.threadUpdatedAuthorID +
            "/" +
            $e(af.threadUpdatedAuthorName);
          ar = af.threadUpdatedAuthorName;
        }
        this["#updated-author-anchor"].href = aq;
        this["#updated-author-anchor"].textContent = ar;
        if (this.details.includes("author")) {
          this["#updated-time-span"].innerHTML =
            '<x-message href="#date-wrote" args="date:' +
            ap +
            '}"></x-message>';
        } else {
          this["#updated-time-span"].innerHTML =
            '<x-message href="#date-rel" args="date:' + ap + '}"></x-message>';
        }
      } else {
        this["#updated-detail"].hidden = true;
      }
      if (ag.includes("comments")) {
        this["#comments-detail"].hidden = af.commentsCount === 0;
        this["#comments-detail"].style.order = ag.indexOf("comments");
        this["#comments-label"].textContent = af.commentsCount;
      } else {
        this["#comments-detail"].hidden = true;
      }
      if (ag.includes("votes")) {
        this["#votes-detail"].hidden = af.votesCount === 0;
        this["#votes-detail"].style.order = ag.indexOf("votes");
        this["#votes-icon"].href = af.votesCount < 0 ? "#downvote" : "#upvote";
        this["#votes-label"].textContent = af.votesCount;
      } else {
        this["#votes-detail"].hidden = true;
      }
      if (ag.includes("priority")) {
        this["#priority-detail"].hidden = false;
        this["#priority-detail"].style.order = ag.indexOf("priority");
        this["#priority-message"].href = Is(af.priority);
      } else {
        this["#priority-detail"].hidden = true;
      }
      for (let au of this["#details"].querySelectorAll("a.tag-anchor")) {
        au.remove();
      }
      if (ag.includes("tags") && af.tags.length > 0) {
        let av = "";
        let aw = ag.indexOf("tags");
        for (let ax of af.tags) {
          let ay = "/bugs?tag=" + ye(ax, " ", "+");
          let az = Vt(ax);
          if (ax.includes(":")) {
            let [aA, aB] = ax.split(":").map((aC) => aC.trim());
            av +=
              '\n              <a class="tag-anchor" href="' +
              ay +
              '" style="order: ' +
              aw +
              ';">\n                <x-tag value="' +
              ax +
              '" skin="colored" style="background: ' +
              az +
              ';">\n                  <x-label slot="scope">' +
              aA +
              "</x-label>\n                  <x-label>" +
              aB +
              "</x-label>\n                </x-tag>\n              </a>\n            ";
          } else {
            av +=
              '\n              <a class="tag-anchor" href="' +
              ay +
              '" style="order: ' +
              aw +
              ';">\n                <x-tag value="' +
              ax +
              '" skin="colored" style="background: ' +
              az +
              ';">\n                  <x-label>' +
              ax +
              "</x-label>\n                </x-tag>\n              </a>\n            ";
          }
        }
        this["#details"].insertAdjacentHTML("beforeend", av);
      }
    }
  }
}
customElements.define("bx-bugpreviewblock", Fs);
class Ns extends bs {
  static observedAttributes = ["type"];
  static v = ie` <template> <x-box id="heading-box"> <h2 id="heading"><x-message id="heading-message"></x-message></h2> <bx-avatar id="avatar"></bx-avatar> </x-box> <section id="title-section"> <h3><x-message href="#title"></x-message></h3> <x-input id="title-input" validation="manual" maxlength="135"></x-input> </section> <section id="description-section"> <h3><x-message href="#description"></x-message></h3> <bx-richtextarea id="description-textarea" spellcheck></bx-richtextarea> </section> <section id="options-section"> <x-checkbox id="watch-checkbox" toggled> <x-label><strong><x-message href="#watch-thread"></x-message></strong></x-label> <x-label><x-message href="#watch-thread.detail"></x-message></x-label> </x-checkbox> </section> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#save"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%}#main{display:flex;flex-flow:column}h2{margin:0;font-size:28px}h3{margin-bottom:6px}#heading-box{margin-bottom:8px}#avatar{width:40px;height:40px;margin-left:auto}#textarea{min-height:0;margin-top:8px;flex:1}#title-section{margin-top:0}#title-input{width:100%;max-width:none}#title-input[error]::before{top:-20px;right:-4px;left:auto}#description-section{display:flex;flex-flow:column;flex:1;height:100%;min-height:0;margin-top:16px}#description-textarea{height:100%;min-height:0}#description-textarea[error]::before{top:-20px;right:-4px;left:auto}#options-section{margin-top:16px}`;
  get type() {
    if (this.hasAttribute("type")) {
      return this.getAttribute("type");
    } else {
      return "new";
    }
  }
  set type(af) {
    this.setAttribute("type", af);
  }
  get title() {
    return Ce(this["#title-input"].value);
  }
  set title(af) {
    this["#title-input"].value = Se(af);
  }
  get description() {
    return this["#description-textarea"].value;
  }
  set description(af) {
    this["#description-textarea"].value = Te(af);
  }
  get attachments() {
    return this["#description-textarea"].blobUrls;
  }
  get watchThread() {
    return this["#watch-checkbox"].toggled;
  }
  #at;
  constructor() {
    super();
    this["#title-input"].addEventListener("input", () => this.#us());
    this["#description-textarea"].addEventListener("input", () => this.#ps());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
    this["#cancel-button"].addEventListener("click", (af) => this.#Pt(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#xs();
    this.#gs();
    this.#bs();
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#gs();
      })
    );
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "type") {
      this.#xs();
    }
  }
  clear() {
    super.clear();
    this["#title-input"].value = "";
    this["#title-input"].setCustomValidity("");
    this["#description-textarea"].value = "";
    this["#description-textarea"].setCustomValidity("");
    this["#watch-checkbox"].toggled = true;
  }
  reportValidity() {
    let af = true;
    if (this["#description-textarea"].value.trim() === "") {
      this["#description-textarea"].setCustomValidity("This field is required");
      this["#description-textarea"].focus();
      af = false;
    }
    if (this["#title-input"].value.trim() === "") {
      this["#title-input"].setCustomValidity("This field is required");
      this["#title-input"].focus();
      af = false;
    }
    return af;
  }
  #us() {
    this.p = true;
    this["#title-input"].setCustomValidity("");
  }
  #ps() {
    this.p = true;
    this["#description-textarea"].setCustomValidity("");
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #Pt(af) {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #xs() {
    this["#heading-message"].href =
      this.type === "edit" ? "#edit-bug" : "#new-bug";
  }
  async #gs() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID !== null) {
      this["#avatar"].type = Bi.auth.userProfile.avatar || "random";
      this["#avatar"].value = Bi.auth.userID;
    }
  }
  #bs() {
    this["#options-section"].hidden = this.type === "edit";
  }
}
customElements.define("bx-bugform", Ns);
class Os extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <div id="header"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <a id="new-bug-anchor" href="/bugs?dialog=new-bug"> <x-button id="new-bug-button" toggled> <x-label><strong><x-message href="#new-bug"></x-message></strong></x-label> </x-button> </a> </div> <bx-bugsfilterblock id="filter-block"></bx-bugsfilterblock> <div id="previews"></div> <div id="previews-skeleton"></div> <bx-placeholderblock id="previews-placeholder" hidden></bx-placeholderblock> <bx-pager id="pager" value="1" max="2"></bx-pager> </main> <div id="dialogs"> <dialog id="bug-dialog"> <bx-bugform id="bug-form" type="new"></bx-bugform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#header{display:flex;width:100%}#new-bug-anchor{height:fit-content;margin-left:auto;filter:none;text-decoration:none}#new-bug-button x-label{cursor:pointer}#previews{margin-top:14px}#previews>*{margin:12px 0}#previews>:first-child{margin-top:0}#previews-skeleton>*{margin:12px 0}#previews-skeleton>:first-child{margin-top:0}#pager{margin-top:24px}#bug-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = location.origin + "/bugs";
    let ag = new URLSearchParams(location.search);
    let ah = false;
    for (let [aj, ak] of ag.entries()) {
      if (aj !== "page" || parseInt(ak) <= 1) {
        ah = false;
        break;
      }
      ah = true;
    }
    if (ah) {
      af += "?" + ag.toString();
    }
    return af;
  }
  #ys;
  #Xt;
  #ks = null;
  constructor() {
    super();
    this["#filter-block"].addEventListener("change", (af) => this.#Cs(af));
    this["#bug-dialog"].addEventListener("userclose", (af) => this.#Ea(af));
    this["#bug-form"].addEventListener("cancel", (af) => this.#La(af));
    this["#bug-form"].addEventListener("submit", (af) => this.#Ua(af));
    {
      let af = "";
      for (let ag = 0; ag < 10; ag += 1) {
        af +=
          "\n          <x-card>\n            <bx-bugpreviewblock skeleton></bx-bugpreviewblock>\n          </x-card>\n        ";
      }
      this["#previews-skeleton"].innerHTML = af;
    }
  }
  async connectedCallback() {
    super.connectedCallback();
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    this.#Es();
    await this.#Ls();
    if (new URLSearchParams(location.search).get("dialog") === "new-bug") {
      this.#Da();
    }
    this.u();
  }
  disconnectedCallback() {
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#Ls();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname === "/bugs") {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      let am = _i(ak, al);
      {
        let an = [
          "search",
          "status",
          "upvoted-by",
          "watched-by",
          "created-by",
          "sort",
          "tag",
          "page",
        ];
        if (am.find((ap) => an.includes(ap)) !== undefined) {
          if (method === "push" || method === "replace") {
            this.o.resetScrollOffset();
          }
          this.#Es();
          await this.#Ls();
          if (method === "pop") {
            this.o.restoreScrollOffset();
          }
        }
      }
      if (am.includes("dialog")) {
        let ap = ak.get("dialog");
        let aq = al.get("dialog");
        if (aq === null) {
          if (ap === "new-bug") {
            this["#bug-dialog"].close();
          }
        } else if (aq === "new-bug") {
          this.#Da();
        }
      }
    }
  }
  #Cs(af) {
    let ag = new URL(location.href);
    let ah = new URLSearchParams(location.search);
    ah.delete("page");
    if (this["#filter-block"].search === "") {
      ah.delete("search");
    } else {
      ah.set("search", this["#filter-block"].search);
    }
    if (this["#filter-block"].status === "all") {
      ah.delete("status");
    } else {
      ah.set("status", this["#filter-block"].status);
    }
    if (this["#filter-block"].upvotedBy === null) {
      ah.delete("upvoted-by");
    } else {
      ah.set("upvoted-by", this["#filter-block"].upvotedBy);
    }
    if (this["#filter-block"].watchedBy === null) {
      ah.delete("watched-by");
    } else {
      ah.set("watched-by", this["#filter-block"].watchedBy);
    }
    if (this["#filter-block"].createdBy === null) {
      ah.delete("created-by");
    } else {
      ah.set("created-by", this["#filter-block"].createdBy);
    }
    if (af.detail === "search" && this["#filter-block"].search.trim() !== "") {
      ah.set("sort", "relevance");
    } else if (this["#filter-block"].sort === "createdTime:desc") {
      ah.set("sort", "created");
    } else if (this["#filter-block"].sort === "createdTime:asc") {
      ah.set("sort", "created-asc");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:desc") {
      ah.delete("sort");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:asc") {
      ah.set("sort", "updated-asc");
    } else if (this["#filter-block"].sort === "commentsCount:desc") {
      ah.set("sort", "comments");
    } else if (this["#filter-block"].sort === "commentsCount:asc") {
      ah.set("sort", "comments-asc");
    } else if (this["#filter-block"].sort === "votesCount:desc") {
      ah.set("sort", "votes");
    } else if (this["#filter-block"].sort === "votesCount:asc") {
      ah.set("sort", "votes-asc");
    } else if (this["#filter-block"].sort === "priority:desc") {
      ah.set("sort", "priority");
    } else if (this["#filter-block"].sort === "priority:asc") {
      ah.set("sort", "priority-asc");
    } else if (this["#filter-block"].sort === "relevance") {
      ah.set("sort", "relevance");
    }
    if (this["#filter-block"].tag === null) {
      ah.delete("tag");
    } else {
      ah.set("tag", this["#filter-block"].tag);
    }
    ag.search = ah.toString();
    this.o.navigate(ag.href);
  }
  async #Ua() {
    if (this["#bug-form"].reportValidity() === true) {
      let af = await Xe();
      let ag = [];
      let ah = null;
      let aj = null;
      let ak = {
        type: "bug",
        title: this["#bug-form"].title,
        description: this["#bug-form"].description,
        attachments: {},
        watchThread: this["#bug-form"].watchThread,
      };
      if (af !== null) {
        ak.userAgent = af;
      }
      this["#bug-form"].throbber = true;
      for (let al of this["#bug-form"].attachments) {
        let am = await (await fetch(al)).blob();
        let an = Kt(30) + "." + we(am.type);
        let ap = Bi.storage.uploadFile("temp/" + an, am);
        ak.attachments[al] = an;
        ag.push(ap);
      }
      try {
        await Promise.all(ag);
        ah = await Bi.functions.postMessage("newPost", ak);
      } catch (aq) {
        aj = aq;
      }
      if (aj === null) {
        let ar = ah.data;
        let au = ar.split("-")[1];
        await Bi.index.whenPostCreated(ar, a2.locale);
        this["#bug-form"].throbber = false;
        this["#bug-dialog"].close();
        this.o.navigate("/bugs/" + au);
      } else {
        this["#bug-dialog"].hidden = true;
        this["#bug-form"].throbber = false;
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-add-post",
          },
          detail: bi(aj),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#bug-dialog"].hidden = false;
      }
    }
  }
  #La() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #Ea() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #Da() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#bug-form"].clear();
      this["#bug-form"].throbber = false;
      this["#bug-dialog"].hidden = false;
      this["#bug-dialog"].showModal();
    }
  }
  #Es() {
    let af = new URLSearchParams(location.search);
    let ag = af.get("sort");
    this["#filter-block"].search = af.get("search") || "";
    this["#filter-block"].status = af.get("status") || "all";
    this["#filter-block"].upvotedBy = af.get("upvoted-by") || null;
    this["#filter-block"].watchedBy = af.get("watched-by") || null;
    this["#filter-block"].createdBy = af.get("created-by") || null;
    this["#filter-block"].tag = af.get("tag") || null;
    this["#filter-block"].sort =
      ag === "relevance"
        ? "relevance"
        : ag === "created"
        ? "createdTime:desc"
        : ag === "created-asc"
        ? "createdTime:asc"
        : ag === "updated"
        ? "threadUpdatedTime:desc"
        : ag === "updated-asc"
        ? "threadUpdatedTime:asc"
        : ag === "comments"
        ? "commentsCount:desc"
        : ag === "comments-asc"
        ? "commentsCount:asc"
        : ag === "votes"
        ? "votesCount:desc"
        : ag === "votes-asc"
        ? "votesCount:asc"
        : ag === "priority"
        ? "priority:desc"
        : ag === "priority-asc"
        ? "priority:asc"
        : "threadUpdatedTime:desc";
  }
  async #Ls() {
    if (this.#ks) {
      await this.#ks;
    }
    return (this.#ks = new Promise(async (af) => {
      let ag = new URLSearchParams(location.search);
      let ah = {
        query: this["#filter-block"].search,
        locale: a2.locale,
        type: "bug",
        sort: this["#filter-block"].sort,
        page: parseInt(ag.get("page") || "1"),
        perPage: 10,
        preview: true,
      };
      {
        let { tag, status, createdBy, watchedBy, upvotedBy } =
          this["#filter-block"];
        if (tag !== null) {
          ah.tag = tag;
        }
        if (status === "open") {
          ah.closed = false;
        } else if (status === "closed") {
          ah.closed = true;
        }
        if (createdBy !== null || watchedBy !== null || upvotedBy !== null) {
          await Bi.auth.whenReady;
          if (Bi.auth.userID !== null) {
            if (createdBy !== null) {
              ah.authorID = createdBy;
            }
            if (watchedBy !== null) {
              ah.watchedBy = watchedBy;
            }
            if (upvotedBy !== null) {
              ah.upvotedBy = upvotedBy;
            }
          }
        }
      }
      this.lang = ah.locale;
      this["#new-bug-anchor"].href = qi(location.href, "dialog", "new-bug");
      this["#previews"].innerHTML = "";
      this["#previews-placeholder"].hidden = true;
      this["#previews-placeholder"].title = "#no-results";
      this["#previews-placeholder"].description =
        "#try-redefining-search-criteria";
      this["#previews-skeleton"].hidden = false;
      let [aj, ak] = await Bi.index.searchThreads(ah);
      this["#pager"].max = ak;
      this["#pager"].value = ah.page;
      if (CSS.highlights) {
        CSS.highlights.clear();
      }
      for (let ar of aj) {
        let au = document.createElement("x-card");
        let av = document.createElement("bx-bugpreviewblock");
        if (ah.sort === "createdTime:desc" || ah.sort === "createdTime:asc") {
          av.setAttribute("details", "author created tags comments hashtag");
        } else if (
          ah.sort === "threadUpdatedTime:desc" ||
          ah.sort === "threadUpdatedTime:asc"
        ) {
          av.setAttribute("details", "author updated tags comments hashtag");
        } else if (
          ah.sort === "commentsCount:desc" ||
          ah.sort === "commentsCount:asc"
        ) {
          av.setAttribute("details", "author created tags comments hashtag");
        } else if (
          ah.sort === "votesCount:desc" ||
          ah.sort === "votesCount:asc"
        ) {
          av.setAttribute(
            "details",
            "author created tags comments votes hashtag"
          );
        } else if (ah.sort === "priority:desc" || ah.sort === "priority:asc") {
          av.setAttribute(
            "details",
            "author created tags comments priority hashtag"
          );
        } else if (ah.sort === "relevance") {
          av.setAttribute("details", "author created tags comments hashtag");
        }
        av.id = ar.id;
        av.data = ar;
        au.append(av);
        this["#previews"].append(au);
      }
      this["#previews-placeholder"].hidden =
        this["#previews"].childElementCount > 0;
      this["#previews-skeleton"].hidden = true;
      {
        let aw = this.o.oldLocation;
        if (aw?.pathname.startsWith("/bugs/")) {
          let ax = "bug-" + aw.pathname.split("/")[2];
          let ay = this["#previews"].querySelector(
            'bx-bugpreviewblock[id="' + ax + '"]'
          );
          if (ay) {
            ay.blink();
          }
        }
      }
      this.#ks = null;
      af();
    }));
  }
}
customElements.define("bx-bugspage", Os);
class _s extends Ts {
  static _shadowTemplate = ie` <template> <section id="actions-section"> <h3><x-message href="#actions" autocapitalize></x-message></h3> <x-buttons id="action-buttons"> <x-button id="edit-button" condensed> <x-icon href="#edit"></x-icon> <x-label><x-message href="#edit--verb" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="move-button" condensed> <x-icon href="#move"></x-icon> <x-label><x-message href="#move" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="delete-button" condensed> <x-icon href="#trash"></x-icon> <x-label><x-message href="#delete" autocapitalize ellipsis></x-message></x-label> </x-button> </x-buttons> </section> <hr> <section id="status-section"> <h3><x-message href="#status" autocapitalize></x-message></h3> <x-select id="status-select"> <x-menu> <x-menuitem value="open" toggled> <x-label><x-message href="#bug.open" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="duplicate"> <x-label><x-message href="#bug.duplicate" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="fixed"> <x-label><x-message href="#bug.fixed" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="wont-fix"> <x-label><x-message href="#bug.wont-fix" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="out-of-date"> <x-label><x-message href="#bug.out-of-date" autocapitalize></x-message></x-label> </x-menuitem> </x-menu> </x-select> </section> <hr> <section id="priority-section"> <h3><x-message href="#priority" autocapitalize></x-message></h3> <x-select id="priority-select"> <x-menu> <x-menuitem value="-2"> <x-label><x-message href="#priority.very-low" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="-1"> <x-label><x-message href="#priority.low" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="0" toggled> <x-label><x-message href="#priority.normal" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="1"> <x-label><x-message href="#priority.high" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="2"> <x-label><x-message href="#priority.very-high" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="3"> <x-label><x-message href="#priority.critical" autocapitalize></x-message></x-label> </x-menuitem> </x-menu> </x-select> </section> <hr> <section id="tags-section"> <h3><x-message href="#tags" autocapitalize></x-message></h3> <x-tagsinput id="tags-input"></x-tagsinput> </section> </template>
  `;
  static _shadowStyleSheet = se`#action-buttons{width:100%}#action-buttons x-button{flex:1}#status-select{width:100%}#priority-select{width:100%}`;
  get priority() {
    return parseInt(this["#priority-select"].value);
  }
  set priority(af) {
    this["#priority-select"].value = "" + af;
  }
  get status() {
    return this["#status-select"].value;
  }
  set status(af) {
    this["#status-select"].value = af;
  }
  get tags() {
    return this["#tags-input"].value;
  }
  set tags(af) {
    let ag = "";
    for (let ah of af) {
      if (ah.includes(":")) {
        let [aj, ak] = ah.split(":").map((al) => al.trim());
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label slot="scope">' +
          aj +
          "</x-label>\n            <x-label>" +
          ak +
          "</x-label>\n          </x-tag>\n        ";
      } else {
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label>' +
          ah +
          "</x-label>\n          </x-tag>\n        ";
      }
      this["#tags-input"].innerHTML = ag;
    }
  }
  constructor() {
    super();
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#move-button"].addEventListener("click", () => this.#za());
    this["#delete-button"].addEventListener("click", () => this.#Ys());
    this["#priority-select"].addEventListener("change", () => this.#Ma());
    this["#status-select"].addEventListener("change", () => this.#Aa());
    this["#tags-input"].addEventListener("change", () => this.#Xs());
  }
  #Zs() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "edit",
      })
    );
  }
  #za() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "move",
      })
    );
  }
  #Ys() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "delete",
      })
    );
  }
  #Ma() {
    this.dispatchEvent(new CustomEvent("prioritychange"));
  }
  #Aa() {
    this.dispatchEvent(new CustomEvent("statuschange"));
  }
  #Xs() {
    this.dispatchEvent(new CustomEvent("tagschange"));
  }
}
customElements.define("bx-bugsettings", _s);
class qs extends HTMLElement {
  static observedAttributes = ["condensed"];
  static #C = ie` <template> <div id="status" part="status"><x-message id="status-message"></x-message></div> <header id="header" part="header"> <div id="header-left-column"> <a id="author-avatar-anchor"> <bx-avatar id="author-avatar"></bx-avatar> </a> <bx-userbadges id="author-badges"></bx-userbadges> <a id="author-anchor"></a> <span id="wrote-span"></span> <a id="thread-anchor" hidden></a> </div> <div id="header-right-column"> <x-button id="translate-button" togglable> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <x-box id="actions-box"> <x-buttons id="vote-buttons"> <x-button id="votes-count-button"> <x-label id="votes-count-label">0</x-label> </x-button> <x-button id="upvote-button" value="upvote"> <x-icon id="upvote-icon" href="#upvote"></x-icon> <x-tooltip><x-message href="#upvote"></x-message></x-tooltip> </x-button> </x-buttons> <x-button id="watch-button"> <x-icon href="#watch"></x-icon> <x-tooltip><x-message href="#watch"></x-message></x-tooltip> </x-button> <x-button id="edit-button" hidden> <x-icon href="#edit"></x-icon> </x-button> <x-button id="settings-button" hidden> <x-icon href="#hamburger-menu"></x-icon> <x-popover id="settings-popover" modal> <bx-bugsettings id="settings"></bx-bugsettings> </x-popover> </x-button> </x-box> </div> </header> <main id="main" part="main"> <article id="article"> <h2 id="title"> <span id="title-span"></span> <span id="hashtag-span" part="hashtag"></span> </h2> <div id="tags"></div> <section id="description"></section> </article> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      margin: 8px 0;
    }

    /**
     * Header
     */

    #header {
      display: flex;
      align-items: center;
      height: 40px;
      padding: 0 20px;
      border-width: 1px;
      border-style: solid;
      font-size: 14.5px;
    }

    #header-left-column {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    #header-right-column {
      display: flex;
      align-items: center;
      margin-left: auto;
    }

    /* Avatar */

    #author-avatar-anchor {
      display: inline-block;
      vertical-align: middle;
    }
    #author-avatar-anchor[hidden] {
      display: none;
    }

    /* Author badges */

    #author-badges {
      display: inline-block;
      vertical-align: middle;
      margin-left: 2px;
    }
    #author-badges[hidden],
    #author-badges[empty] {
      display: none;
    }

    /* Author name */

    #author-anchor {
      font-weight: 700;
      line-height: 31px;
      margin-left: 2px;
      text-decoration: none;
      color: inherit;
    }
    #author-anchor:hover {
      text-decoration: underline;
    }

    /* Thread anchor */

    #thread-anchor {
      font-weight: 700;
      border-left: 1.5px solid var(--text-color);
      padding-left: 10px;
      margin-left: 6px;
      color: inherit;
      text-decoration: none;
    }
    #thread-anchor:hover {
      text-decoration: underline;
    }

    /* Status badge */

    #status {
      display: none;
      position: absolute;
      top: 95px;
      left: 0;
      margin-left: 100%;
      padding: 3px 6px;
      transform: translateX(-30%) rotate(40deg);
      transform-origin: 0% 0%;
      box-sizing: border-box;
      border-width: 3px;
      border-style: solid;
      font-size: 17px;
      font-weight: 700;
      text-transform: uppercase;
      white-space: pre;
      line-height: 1;
      user-select: none;
      -webkit-user-select: none;
    }
    :host([status="duplicate"]) #status:not([hidden]),
    :host([status="out-of-date"]) #status:not([hidden]),
    :host([status="wont-fix"]) #status:not([hidden]),
    :host([status="fixed"]) #status:not([hidden]) {
      display: block;
    }

    /* "Translate" button */

    #translate-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    /* "Watch" button */

    #watch-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #watch-button x-icon {
      margin: 0;
    }

    /* "Edit" button */

    #edit-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #edit-button x-icon {
      margin: 0;
      width: 14px;
      height: 14px;
    }

    /* "Settings" button */

    #settings-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #settings-button::part(arrow) {
      display: none;
    }

    #settings-button > x-icon {
      width: 15px;
      height: 15px;
    }

    /* "Upvote" button */

    #upvote-button {
      min-height: 25px;
      padding: 0px 9px;
    }

    #upvote-icon {
      width: 14px;
      height: 14px;
      transform: translateY(-1px);
    }

    /* Votes count */

    #votes-count-button {
      margin: 0 0 0 8px;
      min-height: 25px;
      padding: 0px 9px;
      pointer-events: none;
    }

    /**
     * Main
     */

    #main {
      padding: 22px 24px;
      border-width: 1px;
      border-style: solid;
      border-top: none;
    }
    :host([condensed]) #main {
      padding: 10px 18px;
    }

    /* Title */

    #title {
      margin: 0;
    }

    #title #hashtag-span {
      font-size: 20px;
      vertical-align: middle;
      text-transform: lowercase;
    }

    /* Tags */

    #tags {
      display: flex;
      margin-top: 5px;
    }
    #tags:empty,
    #tags[hidden] {
      display: none;
    }

    #tags a {
      display: flex;
      margin: 0 0 0 6px;
      text-decoration: none;
    }
    #tags a:first-child {
      margin-left: 0;
    }
    #tags a:active {
      outline: none;
    }

    /* Description */

    #description {
      margin-top: 20px;
    }
    #title[hidden] + #tags[hidden] + #description {
      margin-top: 0;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    if (this.isConnected) {
      this.#A();
    }
  }
  get condensed() {
    return this.hasAttribute("condensed");
  }
  set condensed(af) {
    if (af === true) {
      this.setAttribute("condensed", "");
    } else {
      this.removeAttribute("condensed");
    }
  }
  get status() {
    return this.getAttribute("status");
  }
  #T;
  #P;
  #Gt;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, qs.#S];
    this.#P.append(document.importNode(qs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("click", (ag) => this.#Rs(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
    this["#watch-button"].addEventListener("click", () => this.#Js());
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#upvote-button"].addEventListener("click", (ag) => this.#Ba(ag));
    this["#settings"].addEventListener("buttonclick", (ag) => this.#Qs(ag));
    this["#settings"].addEventListener("prioritychange", () => this.#Ra());
    this["#settings"].addEventListener("statuschange", () => this.#Ia());
    this["#settings"].addEventListener("tagschange", () => this.#ea());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#A();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "condensed") {
      this.#js();
    }
  }
  #js() {
    this["#title"].hidden = this.condensed === true;
    this["#author-avatar-anchor"].hidden = this.condensed === true;
    this["#author-badges"].hidden = this.condensed === true;
    this["#hashtag-span"].hidden = this.condensed === true;
    this["#thread-anchor"].hidden = this.condensed === false;
    this["#tags"].hidden = this.condensed === true;
    this["#actions-box"].hidden = this.condensed === true;
    this["#status"].hidden = this.condensed === true;
  }
  #Rs(af) {
    if (af.target.closest("a")) {
      this.#Ks(af);
    } else if (af.target.localName === "img") {
      this.#pi(af);
    }
  }
  async #Ks(af) {
    let ag = af.target.closest("a");
    if (
      ag.origin === location.origin &&
      (ag.pathname.startsWith("/bugs") || ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  #pi(af) {
    this.#T.imageViewer.showModal(af.target);
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  async #Ba(af) {
    let ag = af.target.closest("x-button");
    let ah = ag.toggled ? "unvote" : ag.value;
    let aj = this["#upvote-button"].toggled;
    this["#upvote-button"].disabled = true;
    this["#upvote-button"].toggled = ah === "upvote";
    this["#votes-count-button"].disabled = true;
    if (Bi.auth.userEmailVerified === false) {
      this["#upvote-button"].toggled = aj;
      if (Bi.auth.userID === null) {
        this.#T.navigate(qi(location.href, "dialog", "login"));
      } else {
        this.#T.openEmailVerifyMessageDialog();
      }
    } else {
      let ak = this.#Ui.id;
      let al = Bi.auth.userID;
      let am = null;
      try {
        if (ah === "upvote") {
          await Bi.functions.postMessage("upvotePost", ak);
        } else if (ah === "downvote") {
          await Bi.functions.postMessage("downvotePost", ak);
        } else if (ah === "unvote") {
          await Bi.functions.postMessage("unvotePost", ak);
        }
      } catch (an) {
        am = an;
      }
      if (am === null) {
        this.#Ui.upvoters = this.#Ui.upvoters.filter((ap) => ap !== al);
        if (ah === "upvote") {
          this.#Ui.upvoters.push(al);
        }
        this.#Ui.votesCount = this.#Ui.upvoters.length;
        this["#votes-count-label"].textContent = this.#Ui.votesCount;
      } else {
        if (ah === "upvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-upvote-post",
            },
            detail: bi(am),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else if (ah === "unvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-unvote-post",
            },
            detail: bi(am),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        this["#upvote-button"].toggled = aj;
      }
    }
    this["#upvote-button"].disabled = false;
    this["#votes-count-button"].disabled = false;
  }
  async #Js() {
    let af = this["#watch-button"].toggled === true ? "unwatch" : "watch";
    let ag = this["#watch-button"].toggled;
    this["#watch-button"].disabled = true;
    this["#watch-button"].toggled = af === "watch";
    if (Bi.auth.userEmailVerified === false) {
      this["#watch-button"].toggled = ag;
      if (Bi.auth.userID === null) {
        this.#T.navigate(qi(location.href, "dialog", "login"));
      } else {
        this.#T.openEmailVerifyMessageDialog();
      }
    } else {
      let ah = this.#Ui.id;
      let aj = Bi.auth.userID;
      let ak = null;
      try {
        if (af === "watch") {
          await Bi.functions.postMessage("watchPost", ah);
        } else {
          await Bi.functions.postMessage("unwatchPost", ah);
        }
      } catch (al) {
        ak = al;
      }
      if (ak === null) {
        this.#Ui.watchers = this.#Ui.watchers.filter((am) => am !== aj);
        if (af === "watch") {
          this.#Ui.watchers.push(aj);
        }
      } else {
        if (af === "watch") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-watch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-unwatch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        this["#watch-button"].toggled = ag;
      }
    }
    this["#watch-button"].disabled = false;
  }
  #Zs() {
    let af = new URL(location.href);
    let ag = new URLSearchParams(location.search);
    ag.set("dialog", "edit-bug");
    af.search = ag.toString();
    this.#T.navigate(af.toString());
  }
  async #Qs(af) {
    if (af.detail === "edit") {
      let ag = new URL(location.href);
      let ah = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ah.set("dialog", "edit-bug");
      ag.search = ah.toString();
      await it(400);
      this.#T.navigate(ag.toString());
    } else if (af.detail === "move") {
      let aj = new URL(location.href);
      let ak = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ak.set("dialog", "move-bug");
      aj.search = ak.toString();
      await it(400);
      this.#T.navigate(aj.toString());
    } else if (af.detail === "delete") {
      let al = new URL(location.href);
      let am = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      am.set("dialog", "delete-bug");
      al.search = am.toString();
      await it(400);
      this.#T.navigate(al.toString());
    }
  }
  async #Ra() {
    let af = this["#settings"].priority;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        priority: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.priority = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-priority",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].priority = this.#Ui.priority;
    }
  }
  async #Ia() {
    let af = this["#settings"].status;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        status: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.status = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-status",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].status = this.#Ui.status;
    }
  }
  async #ea() {
    let af = this["#settings"].tags;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        tags: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.tags = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-tags",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].tags = this.#Ui.tags;
    }
  }
  #A() {
    let af = Bi.auth.userID !== null;
    let ag = Bi.auth.isModerator;
    let ah = af ? Bi.auth.userID : null;
    let aj = this.#Ui;
    if (aj !== null) {
      this["#author-avatar-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-avatar"].type = aj.authorAvatar || "random";
      this["#author-avatar"].value = aj.authorID;
      this["#author-badges"].userAgent = aj.authorUserAgent;
      this["#author-badges"].staff = aj.authorID === "0000000000";
      this["#author-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-anchor"].textContent = aj.authorName;
      this["#wrote-span"].innerHTML =
        '<x-message href="#date-wrote" args="date: ' +
        aj.createdTime +
        '}"></x-message>';
      {
        let ak = aj.id.split("-").at(-1);
        this["#thread-anchor"].innerHTML = Te(aj.title);
        this["#thread-anchor"].href = "/bugs/" + ak + "/" + aj.threadSlug;
      }
      if (aj.locale === aj.srcLocale && aj.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = aj.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (aj.srcLocale || aj.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      this.setAttribute("status", aj.status);
      this["#status-message"].href = "#bug." + aj.status;
      this["#upvote-button"].toggled = af !== false && aj.upvoters.includes(ah);
      this["#votes-count-label"].textContent = aj.votesCount;
      this["#watch-button"].toggled = af === true && aj.watchers.includes(ah);
      this["#edit-button"].hidden = ag === true || ah !== aj.authorID;
      this["#settings-button"].hidden = ag === false;
      if (this["#settings-popover"].opened === false) {
        this["#settings"].priority = aj.priority;
        this["#settings"].status = aj.status;
        this["#settings"].tags = aj.tags;
      }
      this["#title"].lang = aj.locale;
      this["#title-span"].innerHTML = Te(aj.title);
      this["#hashtag-span"].textContent = "#" + aj.id.split("-").at(-1);
      {
        let al = "";
        for (let am of aj.tags) {
          let an = "/bugs?tag=" + ye(am, " ", "+");
          let ap = Vt(am);
          if (am.includes(":")) {
            let [aq, ar] = am.split(":").map((au) => au.trim());
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label slot="scope">' +
              aq +
              "</x-label>\n                <x-label>" +
              ar +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          } else {
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label>' +
              am +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          }
        }
        this["#tags"].innerHTML = al;
      }
      this["#description"].innerHTML = Te(aj.description);
      this["#description"].lang = aj.locale;
      for (let au of this["#description"].querySelectorAll("code")) {
        if (au.hasAttribute("data-language")) {
          au.innerHTML = ds(au.textContent, au.getAttribute("data-language"));
        }
      }
      if (CSS.highlights && aj.keywords) {
        let av = ai(aj.keywords, [this["#title"], this["#description"]]);
        let aw = CSS.highlights.get("mark") || new Highlight();
        for (let ax of av) {
          aw.add(ax);
        }
        CSS.highlights.set("mark", aw);
      }
      Bi.auth.whenReady.then(() => {
        if (Bi.auth.isModerator) {
          for (let ay of this["#description"].querySelectorAll("img")) {
            Bi.storage.getMetadata(ay.src).then((az) => {
              let aA = fe(az.size);
              ay.setAttribute("data-file-size", aA);
            });
          }
        }
      });
    }
  }
}
customElements.define("bx-bugblock", qs);
class js extends bs {
  static v = ie` <template> <h2><x-message href="#move-post"></x-message></h2> <p><x-message href="#move-post.detail"></x-message></p> <p><x-message href="#new-category"></x-message>:</p> <x-radios id="radios"> <x-radio value="idea" toggled> <x-label><x-message href="#ideas"></x-message></x-label> </x-radio> <x-radio value="question"> <x-label><x-message href="#questions"></x-message></x-label> </x-radio> </x-radios> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#move-post"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:480px}p:last-of-type{margin-bottom:6px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(
      new CustomEvent("submit", {
        detail: this["#radios"].value,
      })
    );
  }
}
customElements.define("bx-bugmoveform", js);
class Vs extends bs {
  static v = ie` <template> <h2><x-message href="#confirm-delete-post"></x-message></h2> <p><x-message href="#confirm-delete-post.detail"></x-message></p> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"><x-label><x-message href="#cancel"></x-message></x-label></x-button> <x-button id="submit-button" toggled><x-label><x-message href="#delete"></x-message></x-label></x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:400px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
}
customElements.define("bx-bugdeleteform", Vs);
class Gs extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <bx-bugblock id="bug-block"></bx-bugblock> <hr id="separator"> <h3 id="comments-heading"> <x-message id="comments-message" href="#comments" args="count: 0"></x-message> </h3> <div id="comments"></div> <a id="new-comment-anchor"> <x-button id="new-comment-button" toggled> <x-label><strong><x-message href="new-comment"></x-message></strong></x-label> </x-button> </a> </main> <div id="dialogs"> <dialog id="bug-dialog"> <bx-bugform id="bug-form" type="edit"></bx-bugform> </dialog> <dialog id="bug-move-dialog"> <bx-bugmoveform id="bug-move-form"></bx-bugmoveform> </dialog> <dialog id="bug-delete-dialog"> <bx-bugdeleteform id="bug-delete-form"></bx-bugdeleteform> </dialog> <dialog id="comment-dialog"> <bx-commentform id="comment-form"></bx-commentform> </dialog> <dialog id="comment-delete-dialog"> <bx-commentdeleteform id="comment-delete-form"></bx-commentdeleteform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#separator{margin:35px 0 27px}#bug-block{margin:20px 0 8px 0}#comments-heading{font-size:28px}#new-comment-anchor{display:block;margin-top:15px}#new-comment-button{width:100%;min-height:36px}#new-comment-button x-label{cursor:pointer}#bug-dialog,#comment-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = this["#bug-block"].data.id.split("-")[1];
    let ag = this["#bug-block"].data.threadSlug;
    return location.origin + "/bugs/" + af + "/" + ag;
  }
  #Xt;
  #ys;
  #Gt;
  #sa = null;
  constructor() {
    super();
    this["#bug-dialog"].addEventListener("userclose", (af) => this.#aa(af));
    this["#bug-form"].addEventListener("cancel", (af) => this.#La(af));
    this["#bug-form"].addEventListener("submit", (af) => this.#Ua(af));
    this["#bug-move-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#bug-move-form"].addEventListener("submit", (af) => this.#Fa(af));
    this["#bug-move-form"].addEventListener("cancel", (af) => this.#Na(af));
    this["#bug-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#bug-delete-form"].addEventListener("submit", (af) => this.#Oa(af));
    this["#bug-delete-form"].addEventListener("cancel", (af) => this.#_a(af));
    this["#comment-dialog"].addEventListener("userclose", (af) => this.#aa(af));
    this["#comment-form"].addEventListener("submit", (af) => this.#la(af));
    this["#comment-form"].addEventListener("cancel", (af) => this.#ra(af));
    this["#comment-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#comment-delete-form"].addEventListener("submit", (af) =>
      this.#ha(af)
    );
    this["#comment-delete-form"].addEventListener("cancel", (af) =>
      this.#ca(af)
    );
  }
  async connectedCallback() {
    super.connectedCallback();
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = (af) => {
        this.#da(af);
      })
    );
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    await this.#A();
    {
      let af = new URLSearchParams(location.search).get("dialog");
      if (af !== null) {
        if (af === "edit-bug") {
          this.#qa();
        } else if (af === "move-bug") {
          this.#ja();
        } else if (af === "delete-bug") {
          this.#Va();
        } else if (af === "new-comment") {
          this.#ma();
        } else if (af.startsWith("edit-comment-")) {
          this.#ga();
        } else if (af.startsWith("delete-comment-")) {
          this.#ba();
        }
      }
    }
    this.u();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#A();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname.startsWith("/bugs/")) {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      if (V([...ak.keys(), ...al.keys()]).includes("dialog")) {
        let am = ak.get("dialog");
        let an = al.get("dialog");
        if (am !== an) {
          if (an === null) {
            if (am !== null) {
              if (am === "edit-bug") {
                this["#bug-dialog"].close();
              } else if (am === "move-bug") {
                this["#bug-move-dialog"].close();
              } else if (am === "delete-bug") {
                this["#bug-delete-dialog"].close();
              } else if (
                am === "new-comment" ||
                am.startsWith("edit-comment-")
              ) {
                this["#comment-dialog"].close();
              } else if (am.startsWith("delete-comment-")) {
                this["#comment-delete-dialog"].close();
              }
            }
          } else if (an === "edit-bug") {
            this.#qa();
          } else if (an === "move-bug") {
            this.#ja();
          } else if (an === "delete-bug") {
            this.#Va();
          } else if (an === "new-comment") {
            this.#ma();
          } else if (an.startsWith("edit-comment-")) {
            this.#ga();
          } else if (an.startsWith("delete-comment-")) {
            this.#ba();
          }
        }
      }
    }
  }
  #da(af) {
    let ag = Bi.auth.isModerator;
    let ah = Bi.auth.userProfile;
    for (let aj of this["#comments"].children) {
      aj.editable = ag;
      aj.indentable = ag;
      aj.deletable = ag;
    }
    if (ah) {
      let ak = Bi.auth.userID;
      let al = this["#bug-block"].data;
      if (al?.authorID === ak && al.authorName !== ah.name) {
        al.authorName = ah.name;
        this["#bug-block"].data = al;
      }
    }
    if (ah) {
      let am = Bi.auth.userID;
      for (let an of this["#comments"].children) {
        if (am !== null && am === an.data.authorID) {
          let ap = an.data;
          if (ap.authorName !== ah.name) {
            ap.authorName = ah.name;
            an.data = ap;
          }
        }
      }
    }
  }
  #aa() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #Ua() {
    if (this["#bug-form"].reportValidity() === true) {
      let af = "bug-" + location.pathname.split("/")[2];
      let ag = [];
      let ah = null;
      let aj = {
        id: af,
        title: this["#bug-form"].title,
        description: this["#bug-form"].description,
        attachments: {},
      };
      this["#bug-form"].throbber = true;
      for (let ak of this["#bug-form"].attachments) {
        let al = await (await fetch(ak)).blob();
        let am = Kt(30) + "." + we(al.type);
        let an = Bi.storage.uploadFile("temp/" + am, al);
        aj.attachments[ak] = am;
        ag.push(an);
      }
      try {
        await Promise.all(ag);
        await Bi.functions.postMessage("editPost", aj);
      } catch (ap) {
        ah = ap;
      }
      if (ah === null) {
        await Bi.index.whenPostEdited(
          af,
          a2.locale,
          this["#bug-form"].revision
        );
        await this["#bug-dialog"].close();
        await it(150);
        await this.#A();
        this.o.navigate(qi(location.href, "dialog", null));
      } else {
        this["#bug-dialog"].hidden = true;
        await it(150);
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-edit-post",
          },
          detail: bi(ah),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#bug-form"].throbber = false;
        this["#bug-dialog"].hidden = false;
      }
    }
  }
  async #la() {
    if (this["#comment-form"].reportValidity() === true) {
      let af = new URLSearchParams(location.search).get("dialog");
      this["#comment-form"].throbber = true;
      if (af === "new-comment") {
        let ag = "bug-" + location.pathname.split("/")[2];
        let ah = await Xe();
        let aj = [];
        let ak = null;
        let al = null;
        let am = {
          type: "comment",
          description: this["#comment-form"].description,
          attachments: {},
          watchThread: this["#comment-form"].watchThread,
          parentID: ag,
        };
        if (ah !== null) {
          am.userAgent = ah;
        }
        for (let an of this["#comment-form"].attachments) {
          let ap = await (await fetch(an)).blob();
          let aq = Kt(30) + "." + we(ap.type);
          let ar = Bi.storage.uploadFile("temp/" + aq, ap);
          am.attachments[an] = aq;
          aj.push(ar);
        }
        try {
          await Promise.all(aj);
          ak = await Bi.functions.postMessage("newPost", am);
        } catch (au) {
          al = au;
        }
        if (al === null) {
          let av = ak.data;
          await Bi.index.whenPostCreated(av, a2.locale);
          this["#comment-form"].throbber = false;
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          let aw = this["#comments"].querySelector("#" + av);
          if (aw) {
            aw.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-add-comment",
            },
            detail: bi(al),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-dialog"].hidden = false;
        }
      } else if (af.startsWith("edit-comment-")) {
        let ax = af.substring(5);
        let ay = this["#comments"].querySelector("#" + ax);
        let az = [];
        let aA = null;
        let aB = null;
        let aC = {
          id: ax,
          description: this["#comment-form"].description,
          attachments: {},
        };
        for (let aD of this["#comment-form"].attachments) {
          let aE = await (await fetch(aD)).blob();
          let aF = Kt(30) + "." + we(aE.type);
          let aG = Bi.storage.uploadFile("temp/" + aF, aE);
          aC.attachments[aD] = aF;
          az.push(aG);
        }
        try {
          await Promise.all(az);
          aA = await Bi.functions.postMessage("editPost", aC);
        } catch (aH) {
          aB = aH;
        }
        if (aB === null) {
          await Bi.index.whenPostEdited(
            ax,
            a2.locale,
            this["#comment-form"].revision
          );
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          ay = this["#comments"].querySelector("#" + ax);
          if (ay) {
            ay.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-edit-comment",
            },
            detail: bi(aB),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = false;
        }
      }
    }
  }
  async #Fa(af) {
    let ag = "bug-" + location.pathname.split("/")[2];
    let ah = null;
    let aj = null;
    this["#bug-move-form"].focus();
    this["#bug-move-form"].throbber = true;
    try {
      ah = (
        await Bi.functions.postMessage("convertPost", {
          id: ag,
          type: af.detail,
        })
      ).data;
    } catch (ak) {
      aj = ak;
    }
    if (aj === null) {
      await Bi.index.whenPostCreated(ag, a2.locale);
      await this["#bug-move-dialog"].close();
      let [al, am] = ah.split("-");
      let an = al === "blog" ? al : al + "s";
      this.o.navigate("/" + an + "/" + am, true);
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-move-post",
        },
        detail: bi(aj),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  async #Oa() {
    let af = "bug-" + location.pathname.split("/")[2];
    let ag = null;
    this["#bug-delete-form"].focus();
    this["#bug-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      await this["#bug-delete-dialog"].close();
      this.o.navigate("/bugs");
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-post",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  async #ha() {
    let af = new URLSearchParams(location.search).get("dialog").substring(7);
    let ag = null;
    this["#comment-delete-form"].focus();
    this["#comment-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      this.o.navigate(qi(location.href, "dialog", null));
      await this.#A();
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-comment",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  #La() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #Na() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #_a() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ra() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ca() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #qa() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = "bug-" + location.pathname.split("/")[2];
      let { title, description, revision } = await Bi.database.getDocument(
        "posts",
        af
      );
      this["#bug-form"].clear();
      this["#bug-form"].title = title;
      this["#bug-form"].description = description;
      this["#bug-form"].revision = revision;
      this["#bug-form"].throbber = false;
      this["#bug-dialog"].hidden = false;
      this["#bug-dialog"].showModal();
    }
  }
  async #ja() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#bug-move-form"].throbber = false;
      this["#bug-move-dialog"].hidden = false;
      this["#bug-move-dialog"].showModal();
    }
  }
  async #Va() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#bug-delete-form"].throbber = false;
      this["#bug-delete-dialog"].hidden = false;
      this["#bug-delete-dialog"].showModal();
    }
  }
  async #ma() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-form"].clear();
      this["#comment-form"].type = "new";
      this["#comment-form"].description = "";
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ga() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = new URLSearchParams(location.search).get("dialog").substring(5);
      let { description, revision } = await Bi.database.getDocument(
        "posts",
        af
      );
      this["#comment-form"].clear();
      this["#comment-form"].type = "edit";
      this["#comment-form"].description = description;
      this["#comment-form"].revision = revision;
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ba() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-delete-form"].throbber = false;
      this["#comment-delete-form"].hidden = false;
      this["#comment-delete-dialog"].showModal();
    }
  }
  async #A() {
    if (this.#sa) {
      await this.#sa;
    }
    return (this.#sa = new Promise(async (af) => {
      this.lang = a2.locale;
      this["#comments"].innerHTML = "";
      let ag = "bug-" + location.pathname.split("/")[2];
      let ah = await Bi.index.getPost(ag, a2.locale);
      let aj = ag.split("-")[1];
      if (ah) {
        {
          let ak = "/bugs/" + aj + "/" + ah.threadSlug;
          if (location.pathname !== ak) {
            let al = location.href.replace(location.pathname, ak);
            this.o.navigate(al, true);
          }
        }
        this["#bug-block"].data = ah;
        this["#comments-message"].args = {
          count: ah.commentsCount,
        };
        this["#new-comment-anchor"].href = qi(
          location.href,
          "dialog",
          "new-comment"
        );
        if (ah.commentsCount === 0) {
          this["#comments"].innerHTML = "";
        } else {
          {
            let aq = "";
            for (let ar = 0; ar < Math.min(ah.commentsCount, 10); ar += 1) {
              aq += "<bx-commentblock skeleton></bx-commentblock>";
            }
            this["#comments"].innerHTML = aq;
          }
          let am = await Bi.index.getThreadComments(ag, a2.locale);
          let an = document.createDocumentFragment();
          let ap = (au) => {
            let av = document.createElement("bx-commentblock");
            av.id = au.id;
            av.data = au;
            av.threaded = false;
            av.editable = Bi.auth.isModerator;
            av.indentable = Bi.auth.isModerator;
            av.deletable = Bi.auth.isModerator;
            let aw = am.filter((ax) => ax.parentID === au.id);
            for (let ax of aw) {
              let ay = ap(ax);
              av.append(ay);
            }
            return av;
          };
          for (let au of am) {
            if (au.parentID === ag) {
              let av = ap(au);
              an.append(av);
            }
          }
          this["#comments"].innerHTML = "";
          this["#comments"].append(an);
        }
      }
      this.#sa = null;
      af();
    }));
  }
}
customElements.define("bx-bugssubpage", Gs);
class Hs extends HTMLElement {
  static #C = ie` <template> <main id="main"> <x-input id="search-input" type="search"> <x-icon href="#search"></x-icon> <x-label><x-message href="#search" autocapitalize ellipsis></x-message></x-label> </x-input> <x-buttons id="status-buttons" tracking="1"> <x-button value="all" condensed> <x-label><x-message href="#ideas.all" autocapitalize></x-message></x-label> </x-button> <x-button value="open" condensed> <x-label><x-message href="#ideas.open" autocapitalize></x-message></x-label> </x-button> <x-button value="closed" condensed> <x-label><x-message href="#ideas.closed" autocapitalize></x-message></x-label> </x-button> </x-buttons> <x-button id="advanced-filters-button"> <x-icon id="advanced-filters-icon" href="#switch"></x-icon> <x-popover id="advanced-filters-popover" modal> <main> <x-switch id="upvoted-by-me-switch"> <x-label><x-message href="#upvoted-by-me"></x-message></x-label> </x-switch> <x-switch id="watched-by-me-switch"> <x-label><x-message href="#watched-by-me"></x-message></x-label> </x-switch> <x-switch id="created-by-me-switch"> <x-label><x-message href="#created-by-me"></x-message></x-label> </x-switch> </main> </x-popover> </x-button> <x-select id="sort-select"> <x-menu> <x-menuitem value="createdTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="createdTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="threadUpdatedTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="threadUpdatedTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="votesCount:desc"> <x-icon href="#upvote"></x-icon> <x-label> <x-message href="#votes"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="votesCount:asc"> <x-icon href="#upvote"></x-icon> <x-label> <x-message href="#votes"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="commentsCount:desc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="commentsCount:asc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="priority:desc"> <x-icon href="#priority"></x-icon> <x-label> <x-message href="#priority"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="priority:asc"> <x-icon href="#priority"></x-icon> <x-label> <x-message href="#priority"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="relevance"> <x-icon href="#search"></x-icon> <x-label><x-message href="#relevance"></x-message></x-label> </x-menuitem> </x-menu> </x-select> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Main
     */

    #main {
      display: flex;
      padding: 8px;
    }

    /* Search input */

    #search-input {
      flex: 1;
      min-width: 60px;
      max-width: none;
    }

    /* Status buttons */

    #status-buttons {
      margin-left: 8px;
    }

    /* Advanced filters button */

    #advanced-filters-button {
      margin-left: 8px;
      padding: 2px 9px;
    }

    #advanced-filters-button::part(arrow) {
      display: none;
    }

    #advanced-filters-icon {
      width: 19px;
      height: 19px;
    }

    #advanced-filters-popover > main {
      padding: 12px;
    }

    #advanced-filters-popover #watched-by-me-switch {
      margin-top: 12px;
    }

    #advanced-filters-popover #created-by-me-switch {
      margin-top: 12px;
    }

    /* Sort select */

    #sort-select {
      min-width: 186px;
      margin-left: 8px;
    }
    #sort-select:focus {
      z-index: 1;
    }
    @media all and (max-width: 650px) {
      #sort-select {
        width: 120px;
        min-width: 0px;
      }
    }
    @media all and (max-width: 539px) {
      #sort-select {
        width: 100px;
      }
    }
  `;
  get search() {
    let [af] = this["#search-input"].value.split("#");
    return af.trim();
  }
  set search(af) {
    let [, ag] = this["#search-input"].value.split("#");
    af = af.trim();
    ag = ag === undefined ? null : ag.trim();
    let ah = af;
    if (ag !== null) {
      if (af.length > 0) {
        ah += " #" + ag;
      } else {
        ah += "#" + ag;
      }
    }
    this["#search-input"].value = ah;
  }
  get tag() {
    let [af, ag] = this["#search-input"].value.split("#");
    if (ag === undefined) {
      return null;
    } else {
      return ag.trim();
    }
  }
  set tag(af) {
    let [ag] = this["#search-input"].value.split("#");
    ag = ag.trim();
    let ah = ag;
    if ((af = af === null ? null : af.trim()) !== null) {
      if (ag.length > 0) {
        ah += " #" + af;
      } else {
        ah += "#" + af;
      }
    }
    this["#search-input"].value = ah;
  }
  get status() {
    return this["#status-buttons"].value;
  }
  set status(af) {
    this["#status-buttons"].value = af;
  }
  get upvotedBy() {
    return this.#Ta;
  }
  set upvotedBy(af) {
    this.#Ta = af;
    this["#upvoted-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get watchedBy() {
    return this.#Ci;
  }
  set watchedBy(af) {
    this.#Ci = af;
    this["#watched-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get createdBy() {
    return this.#Ti;
  }
  set createdBy(af) {
    this.#Ti = af;
    this["#created-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get sort() {
    return this["#sort-select"].value;
  }
  set sort(af) {
    this["#sort-select"].value = af;
  }
  #P;
  #Gt;
  #Ta = null;
  #Ci = null;
  #Ti = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Hs.#S];
    this.#P.append(document.importNode(Hs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#search-input"].addEventListener("change", () => this.#$i());
    this["#status-buttons"].addEventListener("toggle", () => this.#$a());
    this["#upvoted-by-me-switch"].addEventListener("toggle", () => this.#Pa());
    this["#watched-by-me-switch"].addEventListener("toggle", () => this.#Pi());
    this["#created-by-me-switch"].addEventListener("toggle", () => this.#Ei());
    this["#sort-select"].addEventListener("change", () => this.#Li());
  }
  connectedCallback() {
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#Si();
      })
    );
    this.#Si();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  #$i() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "search",
      })
    );
  }
  #$a() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "status",
      })
    );
  }
  #Pa() {
    this.#Ta = this["#upvoted-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "upvotedBy",
      })
    );
    this.#Si();
  }
  #Pi() {
    this.#Ci = this["#watched-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "watchedBy",
      })
    );
    this.#Si();
  }
  #Ei() {
    this.#Ti = this["#created-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "createdBy",
      })
    );
    this.#Si();
  }
  #Li() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "sort",
      })
    );
  }
  async #Si() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this["#advanced-filters-button"].hidden = true;
    } else {
      this["#advanced-filters-button"].hidden = false;
      if (this.upvotedBy || this.watchedBy || this.createdBy) {
        this["#advanced-filters-icon"].style.color = "var(--accent-color)";
        this["#advanced-filters-icon"].style.transform = "scaleX(-1)";
      } else {
        this["#advanced-filters-icon"].style.color = null;
        this["#advanced-filters-icon"].style.transform = null;
      }
    }
  }
}
customElements.define("bx-ideasfilterblock", Hs);
class Ws extends HTMLElement {
  static observedAttributes = ["details"];
  static #C = ie` <template> <main id="main"> <div id="title" part="title"> <a id="title-anchor"></a> <span id="hashtag-span" part="hashtag"></span> </div> <x-button id="translate-button" size="small" condensed togglable hidden> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <div id="details" part="details"> <span id="created-detail"> <a id="created-author-anchor"></a> <span id="created-time-span"></span> </span> <span id="updated-detail"> <a id="updated-author-anchor"></a> <span id="updated-time-span"></span> </span> <div id="comments-detail"> <x-icon id="comments-icon" href="#comment-outline"></x-icon> <div id="comments-label"></div> </div> <div id="votes-detail"> <x-icon id="votes-icon" href="#vote"></x-icon> <div id="votes-label"></div> </div> <div id="priority-detail"> <x-icon id="priority-icon" href="#priority"></x-icon> <div id="priority-label"> <x-message id="priority-message"></x-message> </div> </div> </div> <div id="skeleton"> <div id="skeleton-title" part="skeleton-item"></div> <div id="skeleton-details" part="skeleton-item"></div> </div> </main> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      align-items: stretch;
      box-sizing: border-box;
      width: 100%;
      padding: 12px 15px;
      position: relative;
    }

    a {
      color: inherit;
      text-decoration: none;
      font-weight: inherit;
    }
    a:hover {
      text-decoration: underline;
    }

    #main {
      width: 100%;
    }

    /**
     * Title
     */

    #title {
      font-weight: 700;
      font-size: 20px;
      line-height: 1.2;
    }
    :host([skeleton]) #title {
      display: none;
    }

    #title a {
      color: inherit;
      filter: none;
    }

    #title #hashtag-span {
      position: relative;
      bottom: 1px;
      margin-left: 4px;
      vertical-align: middle;
      font-size: 13px;
      text-transform: lowercase;
    }

    /**
     * "Translate" button
     */

    #translate-button {
      float: right;
    }
    :host([skeleton]) #translate-button {
      display: none;
    }

    /**
     * Details
     */

    #details {
      display: flex;
      flex-flow: wrap;
      align-items: center;
      margin-top: 3px;
      font-size: 14.5px;
      line-height: 1.2;
    }
    #details[hidden] {
      display: none;
    }
    :host([skeleton]) #details {
      display: none;
    }

    /* Created */

    #created-detail {
      margin: 2px 12px 2px 0px;
    }

    #created-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #created-author-anchor {
      display: inline;
    }

    /* Updated */

    #updated-detail {
      margin: 2px 12px 2px 0px;
    }

    #updated-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #updated-author-anchor {
      display: inline;
    }

    /* Comments */

    #comments-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #comments-detail[hidden] {
      display: none;
    }

    #comments-icon {
      margin-left: 2px;
      transform: translateY(1px);
    }

    #comments-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Votes */

    #votes-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #votes-detail[hidden] {
      display: none;
    }

    #votes-icon {
      width: 16px;
      height: 16px;
      margin-bottom: 2px;
    }

    #votes-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Priority */

    #priority-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #priority-detail[hidden] {
      display: none;
    }

    #priority-icon {
      width: 17px;
      height: 17px;
    }

    #priority-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Tags */

    a.tag-anchor {
      display: inline-block;
      margin: 2px 6px 2px 0;
      text-decoration: none;
      vertical-align: middle;
    }
    a.tag-anchor:last-of-type {
      margin-right: 12px;
    }

    x-tag {
      vertical-align: middle;
    }

    /**
     * Skeleton
     */

    #skeleton-title {
      display: none;
      height: 20px;
      width: 50%;
    }
    :host([skeleton]) #skeleton-title {
      display: block;
    }

    #skeleton-details {
      display: none;
      height: 13px;
      width: 30%;
      margin-top: 14px;
      opacity: 0.7;
    }
    :host([skeleton]) #skeleton-details {
      display: block;
    }
  `;
  get details() {
    if (this.hasAttribute("details")) {
      return this.getAttribute("details")
        .split(" ")
        .filter((af) => af.trim() !== "");
    } else {
      return ["created", "tags"];
    }
  }
  set details(af) {
    this.setAttribute("details", af.join(""));
  }
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    this.#A();
  }
  get skeleton() {
    return this.hasAttribute("skeleton");
  }
  set skeleton(af) {
    if (af) {
      this.setAttribute("skeleton", "");
    } else {
      this.removeAttribute("skeleton");
    }
  }
  get status() {
    return this.getAttribute("status");
  }
  #T;
  #P;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ws.#S];
    this.#P.append(document.importNode(Ws.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#skeleton-title"].style.width = Ht(50, 90) + "%";
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "details") {
      this.#A();
    }
  }
  blink() {
    return new Promise(async (af) => {
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      await it(200);
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      af();
    });
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (
      ag?.origin === location.origin &&
      (ag.pathname.startsWith("/ideas") || ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  #A() {
    let af = this.#Ui;
    let ag = this.details;
    if (af !== null) {
      this["#details"].hidden = ag.length === 0;
      {
        let ah = Te(af.title);
        let aj = this.data.id.split("-")[1];
        this.setAttribute("status", af.status);
        this["#title-anchor"].href = "/ideas/" + aj + "/" + af.threadSlug;
        this["#title-anchor"].innerHTML = ah;
        if (ag.includes("hashtag")) {
          this["#hashtag-span"].textContent = "#" + aj;
        } else {
          this["#hashtag-span"].textContent = "";
        }
        if (CSS.highlights && af.keywords) {
          let ak = ai(af.keywords, [this["#title"]]);
          let al = CSS.highlights.get("mark") || new Highlight();
          for (let am of ak) {
            al.add(am);
          }
          CSS.highlights.set("mark", al);
        }
      }
      if (af.locale === af.srcLocale && af.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = af.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (af.srcLocale || af.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      if (ag.includes("created")) {
        let an = af.createdTime;
        this["#created-detail"].hidden = false;
        this["#created-detail"].style.order = ag.indexOf("created");
        this["#created-author-anchor"].href =
          "/profiles/" + af.authorID + "/" + $e(af.authorName);
        this["#created-author-anchor"].textContent = af.authorName;
        if (this.details.includes("author")) {
          this["#created-time-span"].innerHTML =
            '<x-message href="#date-created" args="date: ' +
            an +
            '}"></x-message>';
        } else {
          this["#created-time-span"].innerHTML =
            '<x-message href="#date-rel" args="date:' + an + '}"></x-message>';
        }
      } else {
        this["#created-detail"].hidden = true;
      }
      if (ag.includes("updated")) {
        let ap;
        let aq;
        let ar;
        this["#updated-detail"].hidden = false;
        this["#updated-detail"].style.order = ag.indexOf("updated");
        if (af.commentsCount === 0) {
          ap = af.createdTime;
          aq = "/profiles/" + af.authorID + "/" + $e(af.authorName);
          ar = af.authorName;
        } else {
          ap = af.threadUpdatedTime;
          aq =
            "/profiles/" +
            af.threadUpdatedAuthorID +
            "/" +
            $e(af.threadUpdatedAuthorName);
          ar = af.threadUpdatedAuthorName;
        }
        this["#updated-author-anchor"].href = aq;
        this["#updated-author-anchor"].textContent = ar;
        if (this.details.includes("author")) {
          this["#updated-time-span"].innerHTML =
            '<x-message href="#date-wrote" args="date:' +
            ap +
            '}"></x-message>';
        } else {
          this["#updated-time-span"].innerHTML =
            '<x-message href="#date-rel" args="date:' + ap + '}"></x-message>';
        }
      } else {
        this["#updated-detail"].hidden = true;
      }
      if (ag.includes("comments")) {
        this["#comments-detail"].hidden = af.commentsCount === 0;
        this["#comments-detail"].style.order = ag.indexOf("comments");
        this["#comments-label"].textContent = af.commentsCount;
      } else {
        this["#comments-detail"].hidden = true;
      }
      if (ag.includes("votes")) {
        this["#votes-detail"].hidden = af.votesCount === 0;
        this["#votes-detail"].style.order = ag.indexOf("votes");
        this["#votes-icon"].href = af.votesCount < 0 ? "#downvote" : "#upvote";
        this["#votes-label"].textContent = af.votesCount;
      } else {
        this["#votes-detail"].hidden = true;
      }
      if (ag.includes("priority")) {
        this["#priority-detail"].hidden = false;
        this["#priority-detail"].style.order = ag.indexOf("priority");
        this["#priority-message"].href = Is(af.priority);
      } else {
        this["#priority-detail"].hidden = true;
      }
      for (let au of this["#details"].querySelectorAll("a.tag-anchor")) {
        au.remove();
      }
      if (ag.includes("tags") && af.tags.length > 0) {
        let av = "";
        let aw = ag.indexOf("tags");
        for (let ax of af.tags) {
          let ay = "/ideas?tag=" + ye(ax, " ", "+");
          let az = Vt(ax);
          if (ax.includes(":")) {
            let [aA, aB] = ax.split(":").map((aC) => aC.trim());
            av +=
              '\n              <a class="tag-anchor" href="' +
              ay +
              '" style="order: ' +
              aw +
              ';">\n                <x-tag value="' +
              ax +
              '" skin="colored" style="background: ' +
              az +
              ';">\n                  <x-label slot="scope">' +
              aA +
              "</x-label>\n                  <x-label>" +
              aB +
              "</x-label>\n                </x-tag>\n              </a>\n            ";
          } else {
            av +=
              '\n              <a class="tag-anchor" href="' +
              ay +
              '" style="order: ' +
              aw +
              ';">\n                <x-tag value="' +
              ax +
              '" skin="colored" style="background: ' +
              az +
              ';">\n                  <x-label>' +
              ax +
              "</x-label>\n                </x-tag>\n              </a>\n            ";
          }
        }
        this["#details"].insertAdjacentHTML("beforeend", av);
      }
    }
  }
}
customElements.define("bx-ideapreviewblock", Ws);
class Ks extends bs {
  static observedAttributes = ["type"];
  static v = ie` <template> <x-box id="heading-box"> <h2 id="heading"><x-message id="heading-message"></x-message></h2> <bx-avatar id="avatar"></bx-avatar> </x-box> <section id="title-section"> <h3><x-message href="#title"></x-message></h3> <x-input id="title-input" validation="manual" maxlength="135"></x-input> </section> <section id="description-section"> <h3><x-message href="#description"></x-message></h3> <bx-richtextarea id="description-textarea" spellcheck></bx-richtextarea> </section> <section id="options-section"> <x-checkbox id="watch-checkbox" toggled> <x-label><strong><x-message href="#watch-thread"></x-message></strong></x-label> <x-label><x-message href="#watch-thread.detail"></x-message></x-label> </x-checkbox> </section> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#save"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%}#main{display:flex;flex-flow:column}h2{margin:0;font-size:28px}h3{margin-bottom:6px}#heading-box{margin-bottom:8px}#avatar{width:40px;height:40px;margin-left:auto}#textarea{min-height:0;margin-top:8px;flex:1}#title-section{margin-top:0}#title-input{width:100%;max-width:none}#title-input[error]::before{top:-20px;right:-4px;left:auto}#description-section{display:flex;flex-flow:column;flex:1;height:100%;min-height:0;margin-top:16px}#description-textarea{height:100%;min-height:0}#description-textarea[error]::before{top:-20px;right:-4px;left:auto}#options-section{margin-top:16px}`;
  get type() {
    if (this.hasAttribute("type")) {
      return this.getAttribute("type");
    } else {
      return "new";
    }
  }
  set type(af) {
    this.setAttribute("type", af);
  }
  get title() {
    return Ce(this["#title-input"].value);
  }
  set title(af) {
    this["#title-input"].value = Se(af);
  }
  get description() {
    return this["#description-textarea"].value;
  }
  set description(af) {
    this["#description-textarea"].value = Te(af);
  }
  get attachments() {
    return this["#description-textarea"].blobUrls;
  }
  get watchThread() {
    return this["#watch-checkbox"].toggled;
  }
  #at;
  constructor() {
    super();
    this["#title-input"].addEventListener("input", () => this.#us());
    this["#description-textarea"].addEventListener("input", () => this.#ps());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
    this["#cancel-button"].addEventListener("click", (af) => this.#Pt(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#xs();
    this.#gs();
    this.#bs();
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#gs();
      })
    );
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "type") {
      this.#xs();
    }
  }
  clear() {
    super.clear();
    this["#title-input"].value = "";
    this["#title-input"].setCustomValidity("");
    this["#description-textarea"].value = "";
    this["#description-textarea"].setCustomValidity("");
    this["#watch-checkbox"].toggled = true;
  }
  reportValidity() {
    let af = true;
    if (this["#description-textarea"].value.trim() === "") {
      this["#description-textarea"].setCustomValidity("This field is required");
      this["#description-textarea"].focus();
      af = false;
    }
    if (this["#title-input"].value.trim() === "") {
      this["#title-input"].setCustomValidity("This field is required");
      this["#title-input"].focus();
      af = false;
    }
    return af;
  }
  #us() {
    this.p = true;
    this["#title-input"].setCustomValidity("");
  }
  #ps() {
    this.p = true;
    this["#description-textarea"].setCustomValidity("");
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #Pt(af) {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #xs() {
    this["#heading-message"].href =
      this.type === "edit" ? "#edit-idea" : "#new-idea";
  }
  async #gs() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID !== null) {
      this["#avatar"].type = Bi.auth.userProfile.avatar || "random";
      this["#avatar"].value = Bi.auth.userID;
    }
  }
  #bs() {
    this["#options-section"].hidden = this.type === "edit";
  }
}
customElements.define("bx-ideaform", Ks);
class Zs extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <div id="header"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <a id="new-idea-anchor" href="/ideas?dialog=new-idea"> <x-button id="new-idea-button" toggled> <x-label><strong><x-message href="#new-idea"></x-message></strong></x-label> </x-button> </a> </div> <bx-ideasfilterblock id="filter-block"></bx-ideasfilterblock> <div id="previews"></div> <div id="previews-skeleton"></div> <bx-placeholderblock id="previews-placeholder" hidden></bx-placeholderblock> <bx-pager id="pager" value="1" max="1"></bx-pager> </main> <div id="dialogs"> <dialog id="idea-dialog"> <bx-ideaform id="idea-form" type="new"></bx-ideaform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#header{display:flex;width:100%}#new-idea-anchor{height:fit-content;margin-left:auto;filter:none;text-decoration:none}#new-idea-button x-label{cursor:pointer}#previews{margin-top:14px}#previews>*{margin:12px 0}#previews>:first-child{margin-top:0}#previews-skeleton>*{margin:12px 0}#previews-skeleton>:first-child{margin-top:0}#pager{margin-top:24px}#idea-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = location.origin + "/ideas";
    let ag = new URLSearchParams(location.search);
    let ah = false;
    for (let [aj, ak] of ag.entries()) {
      if (aj !== "page" || parseInt(ak) <= 1) {
        ah = false;
        break;
      }
      ah = true;
    }
    if (ah) {
      af += "?" + ag.toString();
    }
    return af;
  }
  #ys;
  #Xt;
  #ks = null;
  constructor() {
    super();
    this["#filter-block"].addEventListener("change", (af) => this.#Cs(af));
    this["#idea-dialog"].addEventListener("userclose", (af) => this.#Ga(af));
    this["#idea-form"].addEventListener("cancel", (af) => this.#Ha(af));
    this["#idea-form"].addEventListener("submit", (af) => this.#Wa(af));
    {
      let af = "";
      for (let ag = 0; ag < 10; ag += 1) {
        af +=
          "\n          <x-card>\n            <bx-ideapreviewblock skeleton></bx-ideapreviewblock>\n          </x-card>\n        ";
      }
      this["#previews-skeleton"].innerHTML = af;
    }
  }
  async connectedCallback() {
    super.connectedCallback();
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    this.#Es();
    await this.#Ls();
    if (new URLSearchParams(location.search).get("dialog") === "new-idea") {
      this.#Ka();
    }
    this.u();
  }
  disconnectedCallback() {
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#Ls();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname === "/ideas") {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      let am = _i(ak, al);
      {
        let an = [
          "search",
          "status",
          "upvoted-by",
          "watched-by",
          "created-by",
          "sort",
          "tag",
          "page",
        ];
        if (am.find((ap) => an.includes(ap)) !== undefined) {
          if (method === "push" || method === "replace") {
            this.o.resetScrollOffset();
          }
          this.#Es();
          await this.#Ls();
          if (method === "pop") {
            this.o.restoreScrollOffset();
          }
        }
      }
      if (am.includes("dialog")) {
        let ap = ak.get("dialog");
        let aq = al.get("dialog");
        if (aq === null) {
          if (ap === "new-idea") {
            this["#idea-dialog"].close();
          }
        } else if (aq === "new-idea") {
          this.#Ka();
        }
      }
    }
  }
  #Cs(af) {
    let ag = new URL(location.href);
    let ah = new URLSearchParams(location.search);
    ah.delete("page");
    if (this["#filter-block"].search === "") {
      ah.delete("search");
    } else {
      ah.set("search", this["#filter-block"].search);
    }
    if (this["#filter-block"].status === "all") {
      ah.delete("status");
    } else {
      ah.set("status", this["#filter-block"].status);
    }
    if (this["#filter-block"].upvotedBy === null) {
      ah.delete("upvoted-by");
    } else {
      ah.set("upvoted-by", this["#filter-block"].upvotedBy);
    }
    if (this["#filter-block"].watchedBy === null) {
      ah.delete("watched-by");
    } else {
      ah.set("watched-by", this["#filter-block"].watchedBy);
    }
    if (this["#filter-block"].createdBy === null) {
      ah.delete("created-by");
    } else {
      ah.set("created-by", this["#filter-block"].createdBy);
    }
    if (af.detail === "search" && this["#filter-block"].search.trim() !== "") {
      ah.set("sort", "relevance");
    } else if (this["#filter-block"].sort === "createdTime:desc") {
      ah.set("sort", "created");
    } else if (this["#filter-block"].sort === "createdTime:asc") {
      ah.set("sort", "created-asc");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:desc") {
      ah.delete("sort");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:asc") {
      ah.set("sort", "updated-asc");
    } else if (this["#filter-block"].sort === "commentsCount:desc") {
      ah.set("sort", "comments");
    } else if (this["#filter-block"].sort === "commentsCount:asc") {
      ah.set("sort", "comments-asc");
    } else if (this["#filter-block"].sort === "votesCount:desc") {
      ah.set("sort", "votes");
    } else if (this["#filter-block"].sort === "votesCount:asc") {
      ah.set("sort", "votes-asc");
    } else if (this["#filter-block"].sort === "priority:desc") {
      ah.set("sort", "priority");
    } else if (this["#filter-block"].sort === "priority:asc") {
      ah.set("sort", "priority-asc");
    } else if (this["#filter-block"].sort === "relevance") {
      ah.set("sort", "relevance");
    }
    if (this["#filter-block"].tag === null) {
      ah.delete("tag");
    } else {
      ah.set("tag", this["#filter-block"].tag);
    }
    ag.search = ah.toString();
    this.o.navigate(ag.href);
  }
  async #Wa() {
    if (this["#idea-form"].reportValidity() === true) {
      let af = await Xe();
      let ag = [];
      let ah = null;
      let aj = null;
      let ak = {
        type: "idea",
        title: this["#idea-form"].title,
        description: this["#idea-form"].description,
        attachments: {},
        watchThread: this["#idea-form"].watchThread,
      };
      if (af !== null) {
        ak.userAgent = af;
      }
      this["#idea-form"].throbber = true;
      for (let al of this["#idea-form"].attachments) {
        let am = await (await fetch(al)).blob();
        let an = Kt(30) + "." + we(am.type);
        let ap = Bi.storage.uploadFile("temp/" + an, am);
        ak.attachments[al] = an;
        ag.push(ap);
      }
      try {
        await Promise.all(ag);
        ah = await Bi.functions.postMessage("newPost", ak);
      } catch (aq) {
        aj = aq;
      }
      if (aj === null) {
        let ar = ah.data;
        let au = ar.split("-")[1];
        await Bi.index.whenPostCreated(ar, a2.locale);
        this["#idea-form"].throbber = false;
        this["#idea-dialog"].close();
        this.o.navigate("/ideas/" + au);
      } else {
        this["#idea-dialog"].hidden = true;
        this["#idea-form"].throbber = false;
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-add-post",
          },
          detail: bi(aj),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#idea-dialog"].hidden = false;
      }
    }
  }
  #Ha() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #Ga() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #Ka() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#idea-form"].clear();
      this["#idea-form"].throbber = false;
      this["#idea-dialog"].hidden = false;
      this["#idea-dialog"].showModal();
    }
  }
  #Es() {
    let af = new URLSearchParams(location.search);
    let ag = af.get("sort");
    this["#filter-block"].search = af.get("search") || "";
    this["#filter-block"].status = af.get("status") || "all";
    this["#filter-block"].upvotedBy = af.get("upvoted-by") || null;
    this["#filter-block"].watchedBy = af.get("watched-by") || null;
    this["#filter-block"].createdBy = af.get("created-by") || null;
    this["#filter-block"].tag = af.get("tag") || null;
    this["#filter-block"].sort =
      ag === "relevance"
        ? "relevance"
        : ag === "created"
        ? "createdTime:desc"
        : ag === "created-asc"
        ? "createdTime:asc"
        : ag === "updated"
        ? "threadUpdatedTime:desc"
        : ag === "updated-asc"
        ? "threadUpdatedTime:asc"
        : ag === "comments"
        ? "commentsCount:desc"
        : ag === "comments-asc"
        ? "commentsCount:asc"
        : ag === "votes"
        ? "votesCount:desc"
        : ag === "votes-asc"
        ? "votesCount:asc"
        : ag === "priority"
        ? "priority:desc"
        : ag === "priority-asc"
        ? "priority:asc"
        : "threadUpdatedTime:desc";
  }
  async #Ls() {
    if (this.#ks) {
      await this.#ks;
    }
    return (this.#ks = new Promise(async (af) => {
      let ag = new URLSearchParams(location.search);
      let ah = {
        query: this["#filter-block"].search,
        locale: a2.locale,
        type: "idea",
        sort: this["#filter-block"].sort,
        page: parseInt(ag.get("page") || "1"),
        perPage: 10,
        preview: true,
      };
      {
        let { tag, status, createdBy, watchedBy, upvotedBy } =
          this["#filter-block"];
        if (tag !== null) {
          ah.tag = tag;
        }
        if (status === "open") {
          ah.closed = false;
        } else if (status === "closed") {
          ah.closed = true;
        }
        if (createdBy !== null || watchedBy !== null || upvotedBy !== null) {
          await Bi.auth.whenReady;
          if (Bi.auth.userID !== null) {
            if (createdBy !== null) {
              ah.authorID = createdBy;
            }
            if (watchedBy !== null) {
              ah.watchedBy = watchedBy;
            }
            if (upvotedBy !== null) {
              ah.upvotedBy = upvotedBy;
            }
          }
        }
      }
      this.lang = ah.locale;
      this["#new-idea-anchor"].href = qi(location.href, "dialog", "new-idea");
      this["#previews"].innerHTML = "";
      this["#previews-placeholder"].hidden = true;
      this["#previews-placeholder"].title = "#no-results";
      this["#previews-placeholder"].description =
        "#try-redefining-search-criteria";
      this["#previews-skeleton"].hidden = false;
      let [aj, ak] = await Bi.index.searchThreads(ah);
      this["#pager"].max = ak;
      this["#pager"].value = ah.page;
      if (CSS.highlights) {
        CSS.highlights.clear();
      }
      for (let ar of aj) {
        let au = document.createElement("x-card");
        let av = document.createElement("bx-ideapreviewblock");
        if (ah.sort === "createdTime:desc" || ah.sort === "createdTime:asc") {
          av.setAttribute("details", "author created tags comments hashtag");
        } else if (
          ah.sort === "threadUpdatedTime:desc" ||
          ah.sort === "threadUpdatedTime:asc"
        ) {
          av.setAttribute("details", "author updated tags comments hashtag");
        } else if (
          ah.sort === "commentsCount:desc" ||
          ah.sort === "commentsCount:asc"
        ) {
          av.setAttribute("details", "author created tags comments hashtag");
        } else if (
          ah.sort === "votesCount:desc" ||
          ah.sort === "votesCount:asc"
        ) {
          av.setAttribute(
            "details",
            "author created tags comments votes hashtag"
          );
        } else if (ah.sort === "priority:desc" || ah.sort === "priority:asc") {
          av.setAttribute(
            "details",
            "author created tags comments priority hashtag"
          );
        } else if (ah.sort === "relevance") {
          av.setAttribute("details", "author created tags comments hashtag");
        }
        av.id = ar.id;
        av.data = ar;
        au.append(av);
        this["#previews"].append(au);
      }
      this["#previews-placeholder"].hidden =
        this["#previews"].childElementCount > 0;
      this["#previews-skeleton"].hidden = true;
      {
        let aw = this.o.oldLocation;
        if (aw?.pathname.startsWith("/ideas/")) {
          let ax = "idea-" + aw.pathname.split("/")[2];
          let ay = this["#previews"].querySelector(
            'bx-ideapreviewblock[id="' + ax + '"]'
          );
          if (ay) {
            ay.blink();
          }
        }
      }
      this.#ks = null;
      af();
    }));
  }
}
customElements.define("bx-ideaspage", Zs);
class Ys extends Ts {
  static _shadowTemplate = ie` <template> <section id="actions-section"> <h3><x-message href="#actions" autocapitalize></x-message></h3> <x-buttons id="action-buttons"> <x-button id="edit-button" condensed> <x-icon href="#edit"></x-icon> <x-label><x-message href="#edit--verb" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="move-button" condensed> <x-icon href="#move"></x-icon> <x-label><x-message href="#move" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="delete-button" condensed> <x-icon href="#trash"></x-icon> <x-label><x-message href="#delete" autocapitalize ellipsis></x-message></x-label> </x-button> </x-buttons> </section> <hr> <section id="status-section"> <h3><x-message href="#status" autocapitalize></x-message></h3> <x-select id="status-select"> <x-menu> <x-menuitem value="open" toggled> <x-label><x-message href="#idea.open" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="duplicate"> <x-label><x-message href="#idea.duplicate" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="done"> <x-label><x-message href="#idea.done" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="rejected"> <x-label><x-message href="#idea.rejected" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="out-of-date"> <x-label><x-message href="#idea.out-of-date" autocapitalize></x-message></x-label> </x-menuitem> </x-menu> </x-select> </section> <hr> <section id="priority-section"> <h3><x-message href="#priority" autocapitalize></x-message></h3> <x-select id="priority-select"> <x-menu> <x-menuitem value="-2"> <x-label><x-message href="#priority.very-low" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="-1"> <x-label><x-message href="#priority.low" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="0" toggled> <x-label><x-message href="#priority.normal" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="1"> <x-label><x-message href="#priority.high" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="2"> <x-label><x-message href="#priority.very-high" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="3"> <x-label><x-message href="#priority.critical" autocapitalize></x-message></x-label> </x-menuitem> </x-menu> </x-select> </section> <hr> <section id="tags-section"> <h3><x-message href="#tags" autocapitalize></x-message></h3> <x-tagsinput id="tags-input"></x-tagsinput> </section> </template>
  `;
  static _shadowStyleSheet = se`#action-buttons{width:100%}#action-buttons x-button{flex:1}#status-select{width:100%}#priority-select{width:100%}`;
  get priority() {
    return parseInt(this["#priority-select"].value);
  }
  set priority(af) {
    this["#priority-select"].value = "" + af;
  }
  get status() {
    return this["#status-select"].value;
  }
  set status(af) {
    this["#status-select"].value = af;
  }
  get tags() {
    return this["#tags-input"].value;
  }
  set tags(af) {
    let ag = "";
    for (let ah of af) {
      if (ah.includes(":")) {
        let [aj, ak] = ah.split(":").map((al) => al.trim());
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label slot="scope">' +
          aj +
          "</x-label>\n            <x-label>" +
          ak +
          "</x-label>\n          </x-tag>\n        ";
      } else {
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label>' +
          ah +
          "</x-label>\n          </x-tag>\n        ";
      }
      this["#tags-input"].innerHTML = ag;
    }
  }
  constructor() {
    super();
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#move-button"].addEventListener("click", () => this.#za());
    this["#delete-button"].addEventListener("click", () => this.#Ys());
    this["#priority-select"].addEventListener("change", () => this.#Ma());
    this["#status-select"].addEventListener("change", () => this.#Aa());
    this["#tags-input"].addEventListener("change", () => this.#Xs());
  }
  #Zs() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "edit",
      })
    );
  }
  #za() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "move",
      })
    );
  }
  #Ys() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "delete",
      })
    );
  }
  #Ma() {
    this.dispatchEvent(new CustomEvent("prioritychange"));
  }
  #Aa() {
    this.dispatchEvent(new CustomEvent("statuschange"));
  }
  #Xs() {
    this.dispatchEvent(new CustomEvent("tagschange"));
  }
}
customElements.define("bx-ideasettings", Ys);
class Xs extends HTMLElement {
  static observedAttributes = ["condensed"];
  static #C = ie` <template> <div id="status" part="status"><x-message id="status-message"></x-message></div> <header id="header" part="header"> <div id="header-left-column"> <a id="author-avatar-anchor"> <bx-avatar id="author-avatar"></bx-avatar> </a> <bx-userbadges id="author-badges"></bx-userbadges> <a id="author-anchor"></a> <span id="wrote-span"></span> <a id="thread-anchor" hidden></a> </div> <div id="header-right-column"> <x-button id="translate-button" togglable> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <x-box id="actions-box"> <x-buttons id="vote-buttons"> <x-button id="downvote-button" value="downvote"> <x-icon id="downvote-icon" href="#downvote"></x-icon> <x-tooltip><x-message href="#downvote"></x-message></x-tooltip> </x-button> <x-button id="votes-count-button"> <x-label id="votes-count-label">0</x-label> </x-button> <x-button id="upvote-button" value="upvote"> <x-icon id="upvote-icon" href="#upvote"></x-icon> <x-tooltip><x-message href="#upvote"></x-message></x-tooltip> </x-button> </x-buttons> <x-button id="watch-button"> <x-icon href="#watch"></x-icon> <x-tooltip><x-message href="#watch"></x-message></x-tooltip> </x-button> <x-button id="edit-button" hidden> <x-icon href="#edit"></x-icon> </x-button> <x-button id="settings-button" hidden> <x-icon href="#hamburger-menu"></x-icon> <x-popover id="settings-popover" modal> <bx-ideasettings id="settings"></bx-ideasettings> </x-popover> </x-button> </x-box> </div> </header> <main id="main" part="main"> <article id="article"> <h2 id="title"> <span id="title-span"></span> <span id="hashtag-span" part="hashtag"></span> </h2> <div id="tags"></div> <section id="description"></section> </article> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      margin: 8px 0;
    }

    /**
     * Header
     */

    #header {
      display: flex;
      align-items: center;
      height: 40px;
      padding: 0 20px;
      border-width: 1px;
      border-style: solid;
      font-size: 14.5px;
    }

    #header-left-column {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    #header-right-column {
      display: flex;
      align-items: center;
      margin-left: auto;
    }

    /* Avatar */

    #author-avatar-anchor {
      display: inline-block;
      vertical-align: middle;
    }
    #author-avatar-anchor[hidden] {
      display: none;
    }

    /* Author badges */

    #author-badges {
      display: inline-block;
      vertical-align: middle;
      margin-left: 2px;
    }
    #author-badges[hidden],
    #author-badges[empty] {
      display: none;
    }

    /* Author name */

    #author-anchor {
      font-weight: 700;
      line-height: 31px;
      margin-left: 2px;
      text-decoration: none;
      color: inherit;
    }
    #author-anchor:hover {
      text-decoration: underline;
    }

    /* Thread anchor */

    #thread-anchor {
      font-weight: 700;
      border-left: 1.5px solid var(--text-color);
      padding-left: 10px;
      margin-left: 6px;
      color: inherit;
      text-decoration: none;
    }
    #thread-anchor:hover {
      text-decoration: underline;
    }

    /* Status badge */

    #status {
      display: none;
      position: absolute;
      top: 95px;
      left: 0;
      margin-left: 100%;
      padding: 3px 6px;
      transform: translateX(-30%) rotate(40deg);
      transform-origin: 0% 0%;
      box-sizing: border-box;
      border-width: 3px;
      border-style: solid;
      font-size: 17px;
      font-weight: 700;
      text-transform: uppercase;
      white-space: pre;
      line-height: 1;
      user-select: none;
      -webkit-user-select: none;
    }
    :host([status="duplicate"]) #status:not([hidden]),
    :host([status="out-of-date"]) #status:not([hidden]),
    :host([status="rejected"]) #status:not([hidden]),
    :host([status="done"]) #status:not([hidden]) {
      display: block;
    }

    /* "Translate" button */

    #translate-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    /* "Watch" button */

    #watch-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #watch-button x-icon {
      margin: 0;
    }

    /* "Edit" button */

    #edit-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #edit-button x-icon {
      margin: 0;
      width: 14px;
      height: 14px;
    }

    /* "Settings" button */

    #settings-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #settings-button::part(arrow) {
      display: none;
    }

    #settings-button > x-icon {
      width: 15px;
      height: 15px;
    }

    /* "Downvote" and "Upvote" buttons */

    #downvote-button {
      min-height: 25px;
      margin: 0 0 0 8px;
      padding: 0px 9px;
    }

    #upvote-button {
      min-height: 25px;
      padding: 0px 9px;
    }

    #downvote-icon,
    #upvote-icon {
      width: 14px;
      height: 14px;
    }
    #downvote-icon {
      transform: translateY(2px);
    }
    #upvote-icon {
      transform: translateY(-1px);
    }

    /* Votes count */

    #votes-count-button {
      min-height: 25px;
      padding: 0px 9px;
      pointer-events: none;
    }

    /**
     * Main
     */

    #main {
      padding: 22px 24px;
      border-width: 1px;
      border-style: solid;
      border-top: none;
    }
    :host([condensed]) #main {
      padding: 10px 18px;
    }

    /* Title */

    #title {
      margin: 0;
    }

    #title #hashtag-span {
      font-size: 20px;
      vertical-align: middle;
      text-transform: lowercase;
    }

    /* Tags */

    #tags {
      display: flex;
      margin-top: 5px;
    }
    #tags:empty,
    #tags[hidden] {
      display: none;
    }

    #tags a {
      display: flex;
      margin: 0 0 0 6px;
      text-decoration: none;
    }
    #tags a:first-child {
      margin-left: 0;
    }
    #tags a:active {
      outline: none;
    }

    /* Description */

    #description {
      margin-top: 20px;
    }
    #title[hidden] + #tags[hidden] + #description {
      margin-top: 0;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    if (this.isConnected) {
      this.#A();
    }
  }
  get condensed() {
    return this.hasAttribute("condensed");
  }
  set condensed(af) {
    if (af === true) {
      this.setAttribute("condensed", "");
    } else {
      this.removeAttribute("condensed");
    }
  }
  get status() {
    return this.getAttribute("status");
  }
  #T;
  #P;
  #Gt;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Xs.#S];
    this.#P.append(document.importNode(Xs.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("click", (ag) => this.#Rs(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
    this["#watch-button"].addEventListener("click", () => this.#Js());
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#upvote-button"].addEventListener("click", (ag) => this.#Ba(ag));
    this["#downvote-button"].addEventListener("click", (ag) => this.#Ba(ag));
    this["#settings"].addEventListener("buttonclick", (ag) => this.#Qs(ag));
    this["#settings"].addEventListener("prioritychange", () => this.#Ra());
    this["#settings"].addEventListener("statuschange", () => this.#Ia());
    this["#settings"].addEventListener("tagschange", () => this.#ea());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#A();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "condensed") {
      this.#js();
    }
  }
  #js() {
    this["#title"].hidden = this.condensed === true;
    this["#author-avatar-anchor"].hidden = this.condensed === true;
    this["#author-badges"].hidden = this.condensed === true;
    this["#hashtag-span"].hidden = this.condensed === true;
    this["#thread-anchor"].hidden = this.condensed === false;
    this["#tags"].hidden = this.condensed === true;
    this["#actions-box"].hidden = this.condensed === true;
    this["#status"].hidden = this.condensed === true;
  }
  #Rs(af) {
    if (af.target.closest("a")) {
      this.#Ks(af);
    } else if (af.target.localName === "img") {
      this.#pi(af);
    }
  }
  async #Ks(af) {
    let ag = af.target.closest("a");
    if (
      ag.origin === location.origin &&
      (ag.pathname.startsWith("/ideas") || ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  #pi(af) {
    this.#T.imageViewer.showModal(af.target);
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  async #Ba(af) {
    let ag = af.target.closest("x-button");
    let ah = ag.toggled ? "unvote" : ag.value;
    let aj = this["#upvote-button"].toggled;
    let ak = this["#downvote-button"].toggled;
    this["#upvote-button"].disabled = true;
    this["#upvote-button"].toggled = ah === "upvote";
    this["#downvote-button"].disabled = true;
    this["#downvote-button"].toggled = ah === "downvote";
    this["#votes-count-button"].disabled = true;
    if (Bi.auth.userEmailVerified === false) {
      this["#upvote-button"].toggled = aj;
      this["#downvote-button"].toggled = ak;
      if (Bi.auth.userID === null) {
        this.#T.navigate(qi(location.href, "dialog", "login"));
      } else {
        this.#T.openEmailVerifyMessageDialog();
      }
    } else {
      let al = this.#Ui.id;
      let am = Bi.auth.userID;
      let an = null;
      try {
        if (ah === "upvote") {
          await Bi.functions.postMessage("upvotePost", al);
        } else if (ah === "downvote") {
          await Bi.functions.postMessage("downvotePost", al);
        } else if (ah === "unvote") {
          await Bi.functions.postMessage("unvotePost", al);
        }
      } catch (ap) {
        an = ap;
      }
      if (an === null) {
        this.#Ui.upvoters = this.#Ui.upvoters.filter((aq) => aq !== am);
        this.#Ui.downvoters = this.#Ui.downvoters.filter((aq) => aq !== am);
        if (ah === "upvote") {
          this.#Ui.upvoters.push(am);
        } else if (ah === "downvote") {
          this.#Ui.downvoters.push(am);
        }
        this.#Ui.votesCount =
          this.#Ui.upvoters.length - this.#Ui.downvoters.length;
        this["#votes-count-label"].textContent = this.#Ui.votesCount;
      } else {
        if (ah === "upvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-upvote-post",
            },
            detail: bi(an),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else if (ah === "downvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-downvote-post",
            },
            detail: bi(an),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else if (ah === "unvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-unvote-post",
            },
            detail: bi(an),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        this["#upvote-button"].toggled = aj;
        this["#downvote-button"].toggled = ak;
      }
    }
    this["#downvote-button"].disabled = false;
    this["#upvote-button"].disabled = false;
    this["#votes-count-button"].disabled = false;
  }
  async #Js() {
    let af = this["#watch-button"].toggled === true ? "unwatch" : "watch";
    let ag = this["#watch-button"].toggled;
    this["#watch-button"].disabled = true;
    this["#watch-button"].toggled = af === "watch";
    if (Bi.auth.userEmailVerified === false) {
      this["#watch-button"].toggled = ag;
      if (Bi.auth.userID === null) {
        this.#T.navigate(qi(location.href, "dialog", "login"));
      } else {
        this.#T.openEmailVerifyMessageDialog();
      }
    } else {
      let ah = this.#Ui.id;
      let aj = Bi.auth.userID;
      let ak = null;
      try {
        if (af === "watch") {
          await Bi.functions.postMessage("watchPost", ah);
        } else {
          await Bi.functions.postMessage("unwatchPost", ah);
        }
      } catch (al) {
        ak = al;
      }
      if (ak === null) {
        this.#Ui.watchers = this.#Ui.watchers.filter((am) => am !== aj);
        if (af === "watch") {
          this.#Ui.watchers.push(aj);
        }
      } else {
        if (af === "watch") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-watch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-unwatch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        this["#watch-button"].toggled = ag;
      }
    }
    this["#watch-button"].disabled = false;
  }
  #Zs() {
    let af = new URL(location.href);
    let ag = new URLSearchParams(location.search);
    ag.set("dialog", "edit-idea");
    af.search = ag.toString();
    this.#T.navigate(af.toString());
  }
  async #Qs(af) {
    if (af.detail === "edit") {
      let ag = new URL(location.href);
      let ah = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ah.set("dialog", "edit-idea");
      ag.search = ah.toString();
      await it(400);
      this.#T.navigate(ag.toString());
    } else if (af.detail === "move") {
      let aj = new URL(location.href);
      let ak = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ak.set("dialog", "move-idea");
      aj.search = ak.toString();
      await it(400);
      this.#T.navigate(aj.toString());
    } else if (af.detail === "delete") {
      let al = new URL(location.href);
      let am = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      am.set("dialog", "delete-idea");
      al.search = am.toString();
      await it(400);
      this.#T.navigate(al.toString());
    }
  }
  async #Ra() {
    let af = this["#settings"].priority;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        priority: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.priority = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-priority",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].priority = this.#Ui.priority;
    }
  }
  async #Ia() {
    let af = this["#settings"].status;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        status: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.status = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-status",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].status = this.#Ui.status;
    }
  }
  async #ea() {
    let af = this["#settings"].tags;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        tags: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.tags = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-tags",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].tags = this.#Ui.tags;
    }
  }
  #A() {
    let af = Bi.auth.userID !== null;
    let ag = Bi.auth.isModerator;
    let ah = af ? Bi.auth.userID : null;
    let aj = this.#Ui;
    if (aj !== null) {
      this["#author-avatar-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-avatar"].type = aj.authorAvatar || "random";
      this["#author-avatar"].value = aj.authorID;
      this["#author-badges"].userAgent = aj.authorUserAgent;
      this["#author-badges"].staff = aj.authorID === "0000000000";
      this["#author-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-anchor"].textContent = aj.authorName;
      this["#wrote-span"].innerHTML =
        '<x-message href="#date-wrote" args="date: ' +
        aj.createdTime +
        '}"></x-message>';
      {
        let ak = aj.id.split("-").at(-1);
        this["#thread-anchor"].innerHTML = Te(aj.title);
        this["#thread-anchor"].href = "/ideas/" + ak + "/" + aj.threadSlug;
      }
      if (aj.locale === aj.srcLocale && aj.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = aj.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (aj.srcLocale || aj.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      this.setAttribute("status", aj.status);
      this["#status-message"].href = "#idea." + aj.status;
      if (af === false) {
        this["#upvote-button"].toggled = false;
        this["#downvote-button"].toggled = false;
      } else {
        this["#upvote-button"].toggled = aj.upvoters.includes(ah);
        this["#downvote-button"].toggled = aj.downvoters.includes(ah);
      }
      this["#votes-count-label"].textContent = aj.votesCount;
      this["#watch-button"].toggled = af === true && aj.watchers.includes(ah);
      this["#edit-button"].hidden = ag === true || ah !== aj.authorID;
      this["#settings-button"].hidden = ag === false;
      if (this["#settings-popover"].opened === false) {
        this["#settings"].priority = aj.priority;
        this["#settings"].status = aj.status;
        this["#settings"].tags = aj.tags;
      }
      this["#title"].lang = aj.locale;
      this["#title-span"].innerHTML = Te(aj.title);
      this["#hashtag-span"].textContent = "#" + aj.id.split("-").at(-1);
      {
        let al = "";
        for (let am of aj.tags) {
          let an = "/ideas?tag=" + ye(am, " ", "+");
          let ap = Vt(am);
          if (am.includes(":")) {
            let [aq, ar] = am.split(":").map((au) => au.trim());
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label slot="scope">' +
              aq +
              "</x-label>\n                <x-label>" +
              ar +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          } else {
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label>' +
              am +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          }
        }
        this["#tags"].innerHTML = al;
      }
      this["#description"].innerHTML = Te(aj.description);
      this["#description"].lang = aj.locale;
      for (let au of this["#description"].querySelectorAll("code")) {
        if (au.hasAttribute("data-language")) {
          au.innerHTML = ds(au.textContent, au.getAttribute("data-language"));
        }
      }
      if (CSS.highlights && aj.keywords) {
        let av = ai(aj.keywords, [this["#title"], this["#description"]]);
        let aw = CSS.highlights.get("mark") || new Highlight();
        for (let ax of av) {
          aw.add(ax);
        }
        CSS.highlights.set("mark", aw);
      }
      Bi.auth.whenReady.then(() => {
        if (Bi.auth.isModerator) {
          for (let ay of this["#description"].querySelectorAll("img")) {
            Bi.storage.getMetadata(ay.src).then((az) => {
              let aA = fe(az.size);
              ay.setAttribute("data-file-size", aA);
            });
          }
        }
      });
    }
  }
}
customElements.define("bx-ideablock", Xs);
class Js extends bs {
  static v = ie` <template> <h2><x-message href="#move-post"></x-message></h2> <p><x-message href="#move-post.detail"></x-message></p> <p><x-message href="#new-category"></x-message>:</p> <x-radios id="radios"> <x-radio value="bug" toggled> <x-label><x-message href="#bugs"></x-message></x-label> </x-radio> <x-radio value="question"> <x-label><x-message href="#questions"></x-message></x-label> </x-radio> </x-radios> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#move-post"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:480px}p:last-of-type{margin-bottom:6px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(
      new CustomEvent("submit", {
        detail: this["#radios"].value,
      })
    );
  }
}
customElements.define("bx-ideamoveform", Js);
class Qs extends bs {
  static v = ie` <template> <h2><x-message href="#confirm-delete-post"></x-message></h2> <p><x-message href="#confirm-delete-post.detail"></x-message></p> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"><x-label><x-message href="#cancel"></x-message></x-label></x-button> <x-button id="submit-button" toggled><x-label><x-message href="#delete"></x-message></x-label></x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:400px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
}
customElements.define("bx-ideadeleteform", Qs);
class ea extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <bx-ideablock id="idea-block"></bx-ideablock> <hr id="separator"> <h3 id="comments-heading"> <x-message id="comments-message" href="#comments" args="count: 0"></x-message> </h3> <div id="comments"></div> <a id="new-comment-anchor"> <x-button id="new-comment-button" toggled> <x-label><strong><x-message href="new-comment"></x-message></strong></x-label> </x-button> </a> </main> <div id="dialogs"> <dialog id="idea-dialog"> <bx-ideaform id="idea-form" type="edit"></bx-ideaform> </dialog> <dialog id="idea-move-dialog"> <bx-ideamoveform id="idea-move-form"></bx-ideamoveform> </dialog> <dialog id="idea-delete-dialog"> <bx-ideadeleteform id="idea-delete-form"></bx-ideadeleteform> </dialog> <dialog id="comment-dialog"> <bx-commentform id="comment-form"></bx-commentform> </dialog> <dialog id="comment-delete-dialog"> <bx-commentdeleteform id="comment-delete-form"></bx-commentdeleteform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#separator{margin:35px 0 27px}#idea-block{margin:20px 0 8px 0}#comments-heading{font-size:28px}#new-comment-anchor{display:block;margin-top:15px}#new-comment-button{width:100%;min-height:36px}#new-comment-button x-label{cursor:pointer}#comment-dialog,#idea-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = this["#idea-block"].data.id.split("-")[1];
    let ag = this["#idea-block"].data.threadSlug;
    return location.origin + "/ideas/" + af + "/" + ag;
  }
  #Xt;
  #ys;
  #Gt;
  #sa = null;
  constructor() {
    super();
    this["#idea-dialog"].addEventListener("userclose", (af) => this.#aa(af));
    this["#idea-form"].addEventListener("cancel", (af) => this.#Ha(af));
    this["#idea-form"].addEventListener("submit", (af) => this.#Wa(af));
    this["#idea-move-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#idea-move-form"].addEventListener("submit", (af) => this.#Za(af));
    this["#idea-move-form"].addEventListener("cancel", (af) => this.#Ya(af));
    this["#idea-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#idea-delete-form"].addEventListener("submit", (af) => this.#Xa(af));
    this["#idea-delete-form"].addEventListener("cancel", (af) => this.#Ja(af));
    this["#comment-dialog"].addEventListener("userclose", (af) => this.#aa(af));
    this["#comment-form"].addEventListener("submit", (af) => this.#la(af));
    this["#comment-form"].addEventListener("cancel", (af) => this.#ra(af));
    this["#comment-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#comment-delete-form"].addEventListener("submit", (af) =>
      this.#ha(af)
    );
    this["#comment-delete-form"].addEventListener("cancel", (af) =>
      this.#ca(af)
    );
  }
  async connectedCallback() {
    super.connectedCallback();
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = (af) => {
        this.#da(af);
      })
    );
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    await this.#A();
    {
      let af = new URLSearchParams(location.search).get("dialog");
      if (af !== null) {
        if (af === "edit-idea") {
          this.#Qa();
        } else if (af === "move-idea") {
          this.#eo();
        } else if (af === "delete-idea") {
          this.#to();
        } else if (af === "new-comment") {
          this.#ma();
        } else if (af.startsWith("reply-comment-")) {
          this.#xa();
        } else if (af.startsWith("edit-comment-")) {
          this.#ga();
        } else if (af.startsWith("delete-comment-")) {
          this.#ba();
        }
      }
    }
    this.u();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#A();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname.startsWith("/ideas/")) {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      if (V([...ak.keys(), ...al.keys()]).includes("dialog")) {
        let am = ak.get("dialog");
        let an = al.get("dialog");
        if (am !== an) {
          if (an === null) {
            if (am !== null) {
              if (am === "edit-idea") {
                this["#idea-dialog"].close();
              } else if (am === "move-idea") {
                this["#idea-move-dialog"].close();
              } else if (am === "delete-idea") {
                this["#idea-delete-dialog"].close();
              } else if (
                am === "new-comment" ||
                am.startsWith("reply-comment-") ||
                am.startsWith("edit-comment-")
              ) {
                this["#comment-dialog"].close();
              } else if (am.startsWith("delete-comment-")) {
                this["#comment-delete-dialog"].close();
              }
            }
          } else if (an === "edit-idea") {
            this.#Qa();
          } else if (an === "move-idea") {
            this.#eo();
          } else if (an === "delete-idea") {
            this.#to();
          } else if (an === "new-comment") {
            this.#ma();
          } else if (an.startsWith("reply-comment-")) {
            this.#xa();
          } else if (an.startsWith("edit-comment-")) {
            this.#ga();
          } else if (an.startsWith("delete-comment-")) {
            this.#ba();
          }
        }
      }
    }
  }
  #da(af) {
    let ag = Bi.auth.isModerator;
    let ah = Bi.auth.userProfile;
    for (let aj of this["#comments"].querySelectorAll("bx-commentblock")) {
      aj.editable = ag;
      aj.indentable = ag;
      aj.deletable = ag;
    }
    if (ah) {
      let ak = Bi.auth.userID;
      let al = this["#idea-block"].data;
      if (al?.authorID === ak && al.authorName !== ah.name) {
        al.authorName = ah.name;
        this["#idea-block"].data = al;
      }
    }
    if (ah) {
      let am = Bi.auth.userID;
      for (let an of this["#comments"].children) {
        if (am !== null && am === an.data.authorID) {
          let ap = an.data;
          if (ap.authorName !== ah.name) {
            ap.authorName = ah.name;
            an.data = ap;
          }
        }
      }
    }
  }
  #aa() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #Wa() {
    if (this["#idea-form"].reportValidity() === true) {
      let af = "idea-" + location.pathname.split("/")[2];
      let ag = [];
      let ah = null;
      let aj = {
        id: af,
        title: this["#idea-form"].title,
        description: this["#idea-form"].description,
        attachments: {},
      };
      this["#idea-form"].throbber = true;
      for (let ak of this["#idea-form"].attachments) {
        let al = await (await fetch(ak)).blob();
        let am = Kt(30) + "." + we(al.type);
        let an = Bi.storage.uploadFile("temp/" + am, al);
        aj.attachments[ak] = am;
        ag.push(an);
      }
      try {
        await Promise.all(ag);
        await Bi.functions.postMessage("editPost", aj);
      } catch (ap) {
        ah = ap;
      }
      if (ah === null) {
        await Bi.index.whenPostEdited(
          af,
          a2.locale,
          this["#idea-form"].revision
        );
        await this["#idea-dialog"].close();
        await it(150);
        await this.#A();
        this.o.navigate(qi(location.href, "dialog", null));
      } else {
        this["#idea-dialog"].hidden = true;
        await it(150);
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-edit-post",
          },
          detail: bi(ah),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#idea-form"].throbber = false;
        this["#idea-dialog"].hidden = false;
      }
    }
  }
  async #la() {
    if (this["#comment-form"].reportValidity() === true) {
      let af = new URLSearchParams(location.search).get("dialog");
      this["#comment-form"].throbber = true;
      if (af === "new-comment" || af.startsWith("reply-comment-")) {
        let ag = "idea-" + location.pathname.split("/")[2];
        let ah = await Xe();
        let aj = [];
        let ak = null;
        let al = null;
        let am = {
          type: "comment",
          description: this["#comment-form"].description,
          attachments: {},
          watchThread: this["#comment-form"].watchThread,
          parentID: af.startsWith("reply-comment-") ? af.substring(6) : ag,
        };
        if (ah !== null) {
          am.userAgent = ah;
        }
        for (let an of this["#comment-form"].attachments) {
          let ap = await (await fetch(an)).blob();
          let aq = Kt(30) + "." + we(ap.type);
          let ar = Bi.storage.uploadFile("temp/" + aq, ap);
          am.attachments[an] = aq;
          aj.push(ar);
        }
        try {
          await Promise.all(aj);
          ak = await Bi.functions.postMessage("newPost", am);
        } catch (au) {
          al = au;
        }
        if (al === null) {
          let av = ak.data;
          await Bi.index.whenPostCreated(av, a2.locale);
          this["#comment-form"].throbber = false;
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          let aw = this["#comments"].querySelector("#" + av);
          if (aw) {
            aw.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-add-comment",
            },
            detail: bi(al),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-dialog"].hidden = false;
        }
      } else if (af.startsWith("edit-comment-")) {
        let ax = af.substring(5);
        let ay = this["#comments"].querySelector("#" + ax);
        let az = [];
        let aA = null;
        let aB = null;
        let aC = {
          id: ax,
          description: this["#comment-form"].description,
          attachments: {},
        };
        for (let aD of this["#comment-form"].attachments) {
          let aE = await (await fetch(aD)).blob();
          let aF = Kt(30) + "." + we(aE.type);
          let aG = Bi.storage.uploadFile("temp/" + aF, aE);
          aC.attachments[aD] = aF;
          az.push(aG);
        }
        try {
          await Promise.all(az);
          aA = await Bi.functions.postMessage("editPost", aC);
        } catch (aH) {
          aB = aH;
        }
        if (aB === null) {
          await Bi.index.whenPostEdited(
            ax,
            a2.locale,
            this["#comment-form"].revision
          );
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          ay = this["#comments"].querySelector("#" + ax);
          if (ay) {
            ay.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-edit-comment",
            },
            detail: bi(aB),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = false;
        }
      }
    }
  }
  async #Za(af) {
    let ag = "idea-" + location.pathname.split("/")[2];
    let ah = null;
    let aj = null;
    this["#idea-move-form"].focus();
    this["#idea-move-form"].throbber = true;
    try {
      ah = (
        await Bi.functions.postMessage("convertPost", {
          id: ag,
          type: af.detail,
        })
      ).data;
    } catch (ak) {
      aj = ak;
    }
    if (aj === null) {
      await Bi.index.whenPostCreated(ag, a2.locale);
      await this["#idea-move-dialog"].close();
      let [al, am] = ah.split("-");
      let an = al === "blog" ? al : al + "s";
      this.o.navigate("/" + an + "/" + am, true);
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-move-post",
        },
        detail: bi(aj),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  async #Xa() {
    let af = "idea-" + location.pathname.split("/")[2];
    let ag = null;
    this["#idea-delete-form"].focus();
    this["#idea-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      await this["#idea-delete-dialog"].close();
      this.o.navigate("/ideas");
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-post",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  async #ha() {
    let af = new URLSearchParams(location.search).get("dialog").substring(7);
    let ag = null;
    this["#comment-delete-form"].focus();
    this["#comment-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      this.o.navigate(qi(location.href, "dialog", null));
      await this.#A();
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-comment",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  #Ha() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #Ya() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #Ja() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ra() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ca() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #Qa() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = "idea-" + location.pathname.split("/")[2];
      let { title, description, revision } = await Bi.database.getDocument(
        "posts",
        af
      );
      this["#idea-form"].clear();
      this["#idea-form"].title = title;
      this["#idea-form"].description = description;
      this["#idea-form"].revision = revision;
      this["#idea-form"].throbber = false;
      this["#idea-dialog"].hidden = false;
      this["#idea-dialog"].showModal();
    }
  }
  async #eo() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#idea-move-form"].throbber = false;
      this["#idea-move-dialog"].hidden = false;
      this["#idea-move-dialog"].showModal();
    }
  }
  async #to() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#idea-delete-form"].throbber = false;
      this["#idea-delete-dialog"].hidden = false;
      this["#idea-delete-dialog"].showModal();
    }
  }
  async #ma() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-form"].clear();
      this["#comment-form"].type = "new";
      this["#comment-form"].description = "";
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #xa() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-form"].clear();
      this["#comment-form"].type = "new";
      this["#comment-form"].description = "";
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ga() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = new URLSearchParams(location.search).get("dialog").substring(5);
      let { description, revision } = await Bi.database.getDocument(
        "posts",
        af
      );
      this["#comment-form"].clear();
      this["#comment-form"].type = "edit";
      this["#comment-form"].description = description;
      this["#comment-form"].revision = revision;
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ba() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-delete-form"].throbber = false;
      this["#comment-delete-form"].hidden = false;
      this["#comment-delete-dialog"].showModal();
    }
  }
  async #A() {
    if (this.#sa) {
      await this.#sa;
    }
    return (this.#sa = new Promise(async (af) => {
      this.lang = a2.locale;
      this["#comments"].innerHTML = "";
      let ag = "idea-" + location.pathname.split("/")[2];
      let ah = await Bi.index.getPost(ag, a2.locale);
      let aj = ag.split("-")[1];
      if (ah) {
        {
          let ak = "/ideas/" + aj + "/" + ah.threadSlug;
          if (location.pathname !== ak) {
            let al = location.href.replace(location.pathname, ak);
            this.o.navigate(al, true);
          }
        }
        this["#idea-block"].data = ah;
        this["#comments-message"].args = {
          count: ah.commentsCount,
        };
        this["#new-comment-anchor"].href = qi(
          location.href,
          "dialog",
          "new-comment"
        );
        if (ah.commentsCount === 0) {
          this["#comments"].innerHTML = "";
        } else {
          {
            let aq = "";
            for (let ar = 0; ar < Math.min(ah.commentsCount, 10); ar += 1) {
              aq += "<bx-commentblock skeleton></bx-commentblock>";
            }
            this["#comments"].innerHTML = aq;
          }
          let am = await Bi.index.getThreadComments(ag, a2.locale);
          let an = document.createDocumentFragment();
          let ap = (au) => {
            let av = document.createElement("bx-commentblock");
            av.id = au.id;
            av.data = au;
            av.threaded = true;
            av.editable = Bi.auth.isModerator;
            av.indentable = Bi.auth.isModerator;
            av.deletable = Bi.auth.isModerator;
            let aw = am.filter((ax) => ax.parentID === au.id);
            for (let ax of aw) {
              let ay = ap(ax);
              av.append(ay);
            }
            return av;
          };
          for (let au of am) {
            if (au.parentID === ag) {
              let av = ap(au);
              an.append(av);
            }
          }
          this["#comments"].innerHTML = "";
          this["#comments"].append(an);
        }
      }
      this.#sa = null;
      af();
    }));
  }
}
customElements.define("bx-ideassubpage", ea);
class ta extends HTMLElement {
  static #C = ie` <template> <main id="main"> <x-input id="search-input" type="search"> <x-icon href="#search"></x-icon> <x-label><x-message href="#search" autocapitalize ellipsis></x-message></x-label> </x-input> <x-buttons id="status-buttons" tracking="1"> <x-button value="all" condensed> <x-label><x-message href="#questions.all" autocapitalize></x-message></x-label> </x-button> <x-button value="open" condensed> <x-label><x-message href="#questions.open" autocapitalize></x-message></x-label> </x-button> <x-button value="closed" condensed> <x-label><x-message href="#questions.closed" autocapitalize></x-message></x-label> </x-button> </x-buttons> <x-button id="advanced-filters-button"> <x-icon id="advanced-filters-icon" href="#switch"></x-icon> <x-popover id="advanced-filters-popover" modal> <main> <x-switch id="upvoted-by-me-switch"> <x-label><x-message href="#upvoted-by-me"></x-message></x-label> </x-switch> <x-switch id="watched-by-me-switch"> <x-label><x-message href="#watched-by-me"></x-message></x-label> </x-switch> <x-switch id="created-by-me-switch"> <x-label><x-message href="#created-by-me"></x-message></x-label> </x-switch> </main> </x-popover> </x-button> <x-select id="sort-select"> <x-menu> <x-menuitem value="createdTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="createdTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="threadUpdatedTime:desc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="threadUpdatedTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#updated-time"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="votesCount:desc"> <x-icon href="#upvote"></x-icon> <x-label> <x-message href="#votes"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="votesCount:asc"> <x-icon href="#upvote"></x-icon> <x-label> <x-message href="#votes"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="commentsCount:desc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="commentsCount:asc"> <x-icon href="#comment-outline"></x-icon> <x-label> <x-message href="#comments" args="count: unknown"></x-message> <span>↑</span> </x-label> </x-menuitem> <hr> <x-menuitem value="relevance"> <x-icon href="#search"></x-icon> <x-label><x-message href="#relevance"></x-message></x-label> </x-menuitem> </x-menu> </x-select> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Main
     */

    #main {
      display: flex;
      padding: 8px;
    }

    /* Search input */

    #search-input {
      flex: 1;
      min-width: 60px;
      max-width: none;
    }

    /* Status buttons */

    #status-buttons {
      margin-left: 8px;
    }

    /* Advanced filters button */

    #advanced-filters-button {
      margin-left: 8px;
      padding: 2px 9px;
    }

    #advanced-filters-button::part(arrow) {
      display: none;
    }

    #advanced-filters-icon {
      width: 19px;
      height: 19px;
    }

    #advanced-filters-popover > main {
      padding: 12px;
    }

    #advanced-filters-popover #watched-by-me-switch {
      margin-top: 12px;
    }

    #advanced-filters-popover #created-by-me-switch {
      margin-top: 12px;
    }

    /* Sort select */

    #sort-select {
      margin-left: 8px;
    }
    #sort-select:focus {
      z-index: 1;
    }
    @media all and (max-width: 650px) {
      #sort-select {
        width: 120px;
        min-width: 0px;
      }
    }
    @media all and (max-width: 539px) {
      #sort-select {
        width: 100px;
      }
    }
  `;
  get search() {
    let [af] = this["#search-input"].value.split("#");
    return af.trim();
  }
  set search(af) {
    let [, ag] = this["#search-input"].value.split("#");
    af = af.trim();
    ag = ag === undefined ? null : ag.trim();
    let ah = af;
    if (ag !== null) {
      if (af.length > 0) {
        ah += " #" + ag;
      } else {
        ah += "#" + ag;
      }
    }
    this["#search-input"].value = ah;
  }
  get tag() {
    let [af, ag] = this["#search-input"].value.split("#");
    if (ag === undefined) {
      return null;
    } else {
      return ag.trim();
    }
  }
  set tag(af) {
    let [ag] = this["#search-input"].value.split("#");
    ag = ag.trim();
    let ah = ag;
    if ((af = af === null ? null : af.trim()) !== null) {
      if (ag.length > 0) {
        ah += " #" + af;
      } else {
        ah += "#" + af;
      }
    }
    this["#search-input"].value = ah;
  }
  get status() {
    return this["#status-buttons"].value;
  }
  set status(af) {
    this["#status-buttons"].value = af;
  }
  get upvotedBy() {
    return this.#Ta;
  }
  set upvotedBy(af) {
    this.#Ta = af;
    this["#upvoted-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get watchedBy() {
    return this.#Ci;
  }
  set watchedBy(af) {
    this.#Ci = af;
    this["#watched-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get createdBy() {
    return this.#Ti;
  }
  set createdBy(af) {
    this.#Ti = af;
    this["#created-by-me-switch"].toggled = af !== null;
    this.#Si();
  }
  get sort() {
    return this["#sort-select"].value;
  }
  set sort(af) {
    this["#sort-select"].value = af;
  }
  #P;
  #Gt;
  #Ta = null;
  #Ci = null;
  #Ti = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, ta.#S];
    this.#P.append(document.importNode(ta.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#search-input"].addEventListener("change", () => this.#$i());
    this["#status-buttons"].addEventListener("toggle", () => this.#$a());
    this["#upvoted-by-me-switch"].addEventListener("toggle", () => this.#Pa());
    this["#watched-by-me-switch"].addEventListener("toggle", () => this.#Pi());
    this["#created-by-me-switch"].addEventListener("toggle", () => this.#Ei());
    this["#sort-select"].addEventListener("change", () => this.#Li());
  }
  connectedCallback() {
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#Si();
      })
    );
    this.#Si();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  #$i() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "search",
      })
    );
  }
  #$a() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "status",
      })
    );
  }
  #Pa() {
    this.#Ta = this["#upvoted-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "upvotedBy",
      })
    );
    this.#Si();
  }
  #Pi() {
    this.#Ci = this["#watched-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "watchedBy",
      })
    );
    this.#Si();
  }
  #Ei() {
    this.#Ti = this["#created-by-me-switch"].toggled ? Bi.auth.userID : null;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "createdBy",
      })
    );
    this.#Si();
  }
  #Li() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "sort",
      })
    );
  }
  async #Si() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this["#advanced-filters-button"].hidden = true;
    } else {
      this["#advanced-filters-button"].hidden = false;
      if (this.upvotedBy || this.watchedBy || this.createdBy) {
        this["#advanced-filters-icon"].style.color = "var(--accent-color)";
        this["#advanced-filters-icon"].style.transform = "scaleX(-1)";
      } else {
        this["#advanced-filters-icon"].style.color = null;
        this["#advanced-filters-icon"].style.transform = null;
      }
    }
  }
}
customElements.define("bx-questionsfilterblock", ta);
class ia extends HTMLElement {
  static observedAttributes = ["details"];
  static #C = ie` <template> <main id="main"> <div id="title" part="title"> <a id="title-anchor"></a> <span id="hashtag-span" part="hashtag"></span> </div> <x-button id="translate-button" size="small" condensed togglable hidden> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <div id="details" part="details"> <span id="created-detail"> <a id="created-author-anchor"></a> <span id="created-time-span"></span> </span> <span id="updated-detail"> <a id="updated-author-anchor"></a> <span id="updated-time-span"></span> </span> <div id="comments-detail"> <x-icon id="comments-icon" href="#comment-outline"></x-icon> <div id="comments-label"></div> </div> <div id="votes-detail"> <x-icon id="votes-icon" href="#vote"></x-icon> <div id="votes-label"></div> </div> </div> <div id="skeleton"> <div id="skeleton-title" part="skeleton-item"></div> <div id="skeleton-details" part="skeleton-item"></div> </div> </main> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      align-items: stretch;
      box-sizing: border-box;
      width: 100%;
      padding: 12px 15px;
      position: relative;
    }

    a {
      color: inherit;
      text-decoration: none;
      font-weight: inherit;
    }
    a:hover {
      text-decoration: underline;
    }

    #main {
      width: 100%;
    }

    /**
     * Title
     */

    #title {
      font-weight: 700;
      font-size: 20px;
      line-height: 1.2;
    }
    :host([skeleton]) #title {
      display: none;
    }

    #title a {
      color: inherit;
      filter: none;
    }

    #title #hashtag-span {
      position: relative;
      bottom: 1px;
      margin-left: 4px;
      vertical-align: middle;
      font-size: 13px;
      text-transform: lowercase;
    }

    /**
     * "Translate" button
     */

    #translate-button {
      float: right;
    }
    :host([skeleton]) #translate-button {
      display: none;
    }

    /**
     * Details
     */

    #details {
      display: flex;
      flex-flow: wrap;
      align-items: center;
      margin-top: 3px;
      font-size: 14.5px;
      line-height: 1.2;
    }
    #details[hidden] {
      display: none;
    }
    :host([skeleton]) #details {
      display: none;
    }

    /* Created */

    #created-detail {
      margin: 2px 12px 2px 0px;
    }

    #created-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #created-author-anchor {
      display: inline;
    }

    /* Updated */

    #updated-detail {
      margin: 2px 12px 2px 0px;
    }

    #updated-author-anchor {
      display: none;
      font-weight: 700;
    }
    :host([details*="author"]) #updated-author-anchor {
      display: inline;
    }

    /* Comments */

    #comments-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #comments-detail[hidden] {
      display: none;
    }

    #comments-icon {
      margin-left: 2px;
      transform: translateY(1px);
    }

    #comments-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Votes */

    #votes-detail {
      display: flex;
      align-items: center;
      margin-right: 12px;
    }
    #votes-detail[hidden] {
      display: none;
    }

    #votes-icon {
      width: 16px;
      height: 16px;
      margin-bottom: 2px;
    }

    #votes-label {
      margin-left: 6px;
      font-size: 13px;
      font-weight: 700;
      line-height: 1;
    }

    /* Tags */

    a.tag-anchor {
      display: inline-block;
      margin: 2px 6px 2px 0;
      text-decoration: none;
      vertical-align: middle;
    }
    a.tag-anchor:last-of-type {
      margin-right: 12px;
    }

    x-tag {
      vertical-align: middle;
    }

    /**
     * Skeleton
     */

    #skeleton-title {
      display: none;
      height: 20px;
      width: 50%;
    }
    :host([skeleton]) #skeleton-title {
      display: block;
    }

    #skeleton-details {
      display: none;
      height: 13px;
      width: 30%;
      margin-top: 14px;
      opacity: 0.7;
    }
    :host([skeleton]) #skeleton-details {
      display: block;
    }
  `;
  get details() {
    if (this.hasAttribute("details")) {
      return this.getAttribute("details")
        .split(" ")
        .filter((af) => af.trim() !== "");
    } else {
      return ["created", "tags"];
    }
  }
  set details(af) {
    this.setAttribute("details", af.join(""));
  }
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    this.#A();
  }
  get skeleton() {
    return this.hasAttribute("skeleton");
  }
  set skeleton(af) {
    if (af) {
      this.setAttribute("skeleton", "");
    } else {
      this.removeAttribute("skeleton");
    }
  }
  get status() {
    return this.getAttribute("status");
  }
  #T;
  #P;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, ia.#S];
    this.#P.append(document.importNode(ia.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#skeleton-title"].style.width = Ht(50, 90) + "%";
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "details") {
      this.#A();
    }
  }
  blink() {
    return new Promise(async (af) => {
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      await it(200);
      this.setAttribute("blink", "");
      await it(200);
      this.removeAttribute("blink");
      af();
    });
  }
  #Ye(af) {
    if (af.target.closest("a")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest("a");
    if (
      ag?.origin === location.origin &&
      (ag.pathname.startsWith("/questions") ||
        ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  #A() {
    let af = this.#Ui;
    let ag = this.details;
    if (af !== null) {
      this["#details"].hidden = ag.length === 0;
      {
        let ah = Te(af.title);
        let aj = this.data.id.split("-")[1];
        this.setAttribute("status", af.status);
        this["#title-anchor"].href = "/questions/" + aj + "/" + af.threadSlug;
        this["#title-anchor"].innerHTML = ah;
        if (ag.includes("hashtag")) {
          this["#hashtag-span"].textContent = "#" + aj;
        } else {
          this["#hashtag-span"].textContent = "";
        }
        if (CSS.highlights && af.keywords) {
          let ak = ai(af.keywords, [this["#title"]]);
          let al = CSS.highlights.get("mark") || new Highlight();
          for (let am of ak) {
            al.add(am);
          }
          CSS.highlights.set("mark", al);
        }
      }
      if (af.locale === af.srcLocale && af.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = af.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (af.srcLocale || af.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      if (ag.includes("created")) {
        let an = af.createdTime;
        this["#created-detail"].hidden = false;
        this["#created-detail"].style.order = ag.indexOf("created");
        this["#created-author-anchor"].href =
          "/profiles/" + af.authorID + "/" + $e(af.authorName);
        this["#created-author-anchor"].textContent = af.authorName;
        if (this.details.includes("author")) {
          this["#created-time-span"].innerHTML =
            '<x-message href="#date-created" args="date: ' +
            an +
            '}"></x-message>';
        } else {
          this["#created-time-span"].innerHTML =
            '<x-message href="#date-rel" args="date:' + an + '}"></x-message>';
        }
      } else {
        this["#created-detail"].hidden = true;
      }
      if (ag.includes("updated")) {
        let ap;
        let aq;
        let ar;
        this["#updated-detail"].hidden = false;
        this["#updated-detail"].style.order = ag.indexOf("updated");
        if (af.commentsCount === 0) {
          ap = af.createdTime;
          aq = "/profiles/" + af.authorID + "/" + $e(af.authorName);
          ar = af.authorName;
        } else {
          ap = af.threadUpdatedTime;
          aq =
            "/profiles/" +
            af.threadUpdatedAuthorID +
            "/" +
            $e(af.threadUpdatedAuthorName);
          ar = af.threadUpdatedAuthorName;
        }
        this["#updated-author-anchor"].href = aq;
        this["#updated-author-anchor"].textContent = ar;
        if (this.details.includes("author")) {
          this["#updated-time-span"].innerHTML =
            '<x-message href="#date-wrote" args="date:' +
            ap +
            '}"></x-message>';
        } else {
          this["#updated-time-span"].innerHTML =
            '<x-message href="#date-rel" args="date:' + ap + '}"></x-message>';
        }
      } else {
        this["#updated-detail"].hidden = true;
      }
      if (ag.includes("comments")) {
        this["#comments-detail"].hidden = af.commentsCount === 0;
        this["#comments-detail"].style.order = ag.indexOf("comments");
        this["#comments-label"].textContent = af.commentsCount;
      } else {
        this["#comments-detail"].hidden = true;
      }
      if (ag.includes("votes")) {
        this["#votes-detail"].hidden = af.votesCount === 0;
        this["#votes-detail"].style.order = ag.indexOf("votes");
        this["#votes-icon"].href = af.votesCount < 0 ? "#downvote" : "#upvote";
        this["#votes-label"].textContent = af.votesCount;
      } else {
        this["#votes-detail"].hidden = true;
      }
      for (let au of this["#details"].querySelectorAll("a.tag-anchor")) {
        au.remove();
      }
      if (ag.includes("tags") && af.tags.length > 0) {
        let av = "";
        let aw = ag.indexOf("tags");
        for (let ax of af.tags) {
          let ay = "/questions?tag=" + ye(ax, " ", "+");
          let az = Vt(ax);
          if (ax.includes(":")) {
            let [aA, aB] = ax.split(":").map((aC) => aC.trim());
            av +=
              '\n              <a class="tag-anchor" href="' +
              ay +
              '" style="order: ' +
              aw +
              ';">\n                <x-tag value="' +
              ax +
              '" skin="colored" style="background: ' +
              az +
              ';">\n                  <x-label slot="scope">' +
              aA +
              "</x-label>\n                  <x-label>" +
              aB +
              "</x-label>\n                </x-tag>\n              </a>\n            ";
          } else {
            av +=
              '\n              <a class="tag-anchor" href="' +
              ay +
              '" style="order: ' +
              aw +
              ';">\n                <x-tag value="' +
              ax +
              '" skin="colored" style="background: ' +
              az +
              ';">\n                  <x-label>' +
              ax +
              "</x-label>\n                </x-tag>\n              </a>\n            ";
          }
        }
        this["#details"].insertAdjacentHTML("beforeend", av);
      }
    }
  }
}
customElements.define("bx-questionpreviewblock", ia);
class sa extends bs {
  static observedAttributes = ["type"];
  static v = ie` <template> <x-box id="heading-box"> <h2 id="heading"><x-message id="heading-message"></x-message></h2> <bx-avatar id="avatar"></bx-avatar> </x-box> <section id="title-section"> <h3><x-message href="#title"></x-message></h3> <x-input id="title-input" validation="manual" maxlength="135"></x-input> </section> <section id="description-section"> <h3><x-message href="#description"></x-message></h3> <bx-richtextarea id="description-textarea" spellcheck></bx-richtextarea> </section> <section id="options-section"> <x-checkbox id="watch-checkbox" toggled> <x-label><strong><x-message href="#watch-thread"></x-message></strong></x-label> <x-label><x-message href="#watch-thread.detail"></x-message></x-label> </x-checkbox> </section> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#save"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%}#main{display:flex;flex-flow:column}h2{margin:0;font-size:28px}h3{margin-bottom:6px}#heading-box{margin-bottom:8px}#avatar{width:40px;height:40px;margin-left:auto}#textarea{min-height:0;margin-top:8px;flex:1}#title-section{margin-top:0}#title-input{width:100%;max-width:none}#title-input[error]::before{top:-20px;right:-4px;left:auto}#description-section{display:flex;flex-flow:column;flex:1;height:100%;min-height:0;margin-top:16px}#description-textarea{height:100%;min-height:0}#description-textarea[error]::before{top:-20px;right:-4px;left:auto}#options-section{margin-top:16px}`;
  get type() {
    if (this.hasAttribute("type")) {
      return this.getAttribute("type");
    } else {
      return "new";
    }
  }
  set type(af) {
    this.setAttribute("type", af);
  }
  get title() {
    return Ce(this["#title-input"].value);
  }
  set title(af) {
    this["#title-input"].value = Se(af);
  }
  get description() {
    return this["#description-textarea"].value;
  }
  set description(af) {
    this["#description-textarea"].value = Te(af);
  }
  get attachments() {
    return this["#description-textarea"].blobUrls;
  }
  get watchThread() {
    return this["#watch-checkbox"].toggled;
  }
  #at;
  constructor() {
    super();
    this["#title-input"].addEventListener("input", () => this.#us());
    this["#description-textarea"].addEventListener("input", () => this.#ps());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
    this["#cancel-button"].addEventListener("click", (af) => this.#Pt(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#xs();
    this.#gs();
    this.#bs();
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#gs();
      })
    );
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "type") {
      this.#xs();
    }
  }
  clear() {
    super.clear();
    this["#title-input"].value = "";
    this["#title-input"].setCustomValidity("");
    this["#description-textarea"].value = "";
    this["#description-textarea"].setCustomValidity("");
    this["#watch-checkbox"].toggled = true;
  }
  reportValidity() {
    let af = true;
    if (this["#description-textarea"].value.trim() === "") {
      this["#description-textarea"].setCustomValidity("This field is required");
      this["#description-textarea"].focus();
      af = false;
    }
    if (this["#title-input"].value.trim() === "") {
      this["#title-input"].setCustomValidity("This field is required");
      this["#title-input"].focus();
      af = false;
    }
    return af;
  }
  #us() {
    this.p = true;
    this["#title-input"].setCustomValidity("");
  }
  #ps() {
    this.p = true;
    this["#description-textarea"].setCustomValidity("");
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #Pt(af) {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #xs() {
    this["#heading-message"].href =
      this.type === "edit" ? "#edit-question" : "#new-question";
  }
  async #gs() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID !== null) {
      this["#avatar"].type = Bi.auth.userProfile.avatar || "random";
      this["#avatar"].value = Bi.auth.userID;
    }
  }
  #bs() {
    this["#options-section"].hidden = this.type === "edit";
  }
}
customElements.define("bx-questionform", sa);
class aa extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <div id="header"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <a id="new-question-anchor" href="/questions?dialog=new-question"> <x-button id="new-question-button" toggled> <x-label><strong><x-message href="#new-question"></x-message></strong></x-label> </x-button> </a> </div> <bx-questionsfilterblock id="filter-block"></bx-questionsfilterblock> <div id="previews"></div> <div id="previews-skeleton"></div> <bx-placeholderblock id="previews-placeholder" hidden></bx-placeholderblock> <bx-pager id="pager" value="1" max="1"></bx-pager> </main> <div id="dialogs"> <dialog id="question-dialog"> <bx-questionform id="question-form" type="new"></bx-questionform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#header{display:flex;width:100%}#new-question-anchor{height:fit-content;margin-left:auto;filter:none;text-decoration:none}#new-question-button x-label{cursor:pointer}#previews{margin-top:14px}#previews>*{margin:12px 0}#previews>:first-child{margin-top:0}#previews-skeleton>*{margin:12px 0}#previews-skeleton>:first-child{margin-top:0}#pager{margin-top:24px}#question-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = location.origin + "/questions";
    let ag = new URLSearchParams(location.search);
    let ah = false;
    for (let [aj, ak] of ag.entries()) {
      if (aj !== "page" || parseInt(ak) <= 1) {
        ah = false;
        break;
      }
      ah = true;
    }
    if (ah) {
      af += "?" + ag.toString();
    }
    return af;
  }
  #ys;
  #Xt;
  #ks = null;
  constructor() {
    super();
    this["#filter-block"].addEventListener("change", (af) => this.#Cs(af));
    this["#question-dialog"].addEventListener("userclose", (af) =>
      this.#io(af)
    );
    this["#question-form"].addEventListener("cancel", (af) => this.#so(af));
    this["#question-form"].addEventListener("submit", (af) => this.#ao(af));
    {
      let af = "";
      for (let ag = 0; ag < 10; ag += 1) {
        af +=
          "\n          <x-card>\n            <bx-questionpreviewblock skeleton></bx-questionpreviewblock>\n          </x-card>\n        ";
      }
      this["#previews-skeleton"].innerHTML = af;
    }
  }
  async connectedCallback() {
    super.connectedCallback();
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    this.#Es();
    await this.#Ls();
    if (new URLSearchParams(location.search).get("dialog") === "new-question") {
      this.#oo();
    }
    this.u();
  }
  disconnectedCallback() {
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#Ls();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname === "/questions") {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      let am = _i(ak, al);
      {
        let an = [
          "search",
          "status",
          "upvoted-by",
          "watched-by",
          "created-by",
          "sort",
          "tag",
          "page",
        ];
        if (am.find((ap) => an.includes(ap)) !== undefined) {
          if (method === "push" || method === "replace") {
            this.o.resetScrollOffset();
          }
          this.#Es();
          await this.#Ls();
          if (method === "pop") {
            this.o.restoreScrollOffset();
          }
        }
      }
      if (am.includes("dialog")) {
        let ap = ak.get("dialog");
        let aq = al.get("dialog");
        if (aq === null) {
          if (ap === "new-question") {
            this["#question-dialog"].close();
          }
        } else if (aq === "new-question") {
          this.#oo();
        }
      }
    }
  }
  #Cs(af) {
    let ag = new URL(location.href);
    let ah = new URLSearchParams(location.search);
    ah.delete("page");
    if (this["#filter-block"].search === "") {
      ah.delete("search");
    } else {
      ah.set("search", this["#filter-block"].search);
    }
    if (this["#filter-block"].status === "all") {
      ah.delete("status");
    } else {
      ah.set("status", this["#filter-block"].status);
    }
    if (this["#filter-block"].upvotedBy === null) {
      ah.delete("upvoted-by");
    } else {
      ah.set("upvoted-by", this["#filter-block"].upvotedBy);
    }
    if (this["#filter-block"].watchedBy === null) {
      ah.delete("watched-by");
    } else {
      ah.set("watched-by", this["#filter-block"].watchedBy);
    }
    if (this["#filter-block"].createdBy === null) {
      ah.delete("created-by");
    } else {
      ah.set("created-by", this["#filter-block"].createdBy);
    }
    if (af.detail === "search" && this["#filter-block"].search.trim() !== "") {
      ah.set("sort", "relevance");
    } else if (this["#filter-block"].sort === "createdTime:desc") {
      ah.set("sort", "created");
    } else if (this["#filter-block"].sort === "createdTime:asc") {
      ah.set("sort", "created-asc");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:desc") {
      ah.delete("sort");
    } else if (this["#filter-block"].sort === "threadUpdatedTime:asc") {
      ah.set("sort", "updated-asc");
    } else if (this["#filter-block"].sort === "commentsCount:desc") {
      ah.set("sort", "comments");
    } else if (this["#filter-block"].sort === "commentsCount:asc") {
      ah.set("sort", "comments-asc");
    } else if (this["#filter-block"].sort === "votesCount:desc") {
      ah.set("sort", "votes");
    } else if (this["#filter-block"].sort === "votesCount:asc") {
      ah.set("sort", "votes-asc");
    } else if (this["#filter-block"].sort === "relevance") {
      ah.set("sort", "relevance");
    }
    if (this["#filter-block"].tag === null) {
      ah.delete("tag");
    } else {
      ah.set("tag", this["#filter-block"].tag);
    }
    ag.search = ah.toString();
    this.o.navigate(ag.href);
  }
  async #ao() {
    if (this["#question-form"].reportValidity() === true) {
      let af = await Xe();
      let ag = [];
      let ah = null;
      let aj = null;
      let ak = {
        type: "question",
        title: this["#question-form"].title,
        description: this["#question-form"].description,
        attachments: {},
        watchThread: this["#question-form"].watchThread,
      };
      if (af !== null) {
        ak.userAgent = af;
      }
      this["#question-form"].throbber = true;
      for (let al of this["#question-form"].attachments) {
        let am = await (await fetch(al)).blob();
        let an = Kt(30) + "." + we(am.type);
        let ap = Bi.storage.uploadFile("temp/" + an, am);
        ak.attachments[al] = an;
        ag.push(ap);
      }
      try {
        await Promise.all(ag);
        ah = await Bi.functions.postMessage("newPost", ak);
      } catch (aq) {
        aj = aq;
      }
      if (aj === null) {
        let ar = ah.data;
        let au = ar.split("-")[1];
        await Bi.index.whenPostCreated(ar, a2.locale);
        this["#question-form"].throbber = false;
        this["#question-dialog"].close();
        this.o.navigate("/questions/" + au);
      } else {
        this["#question-dialog"].hidden = true;
        this["#question-form"].throbber = false;
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-add-post",
          },
          detail: bi(aj),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#question-dialog"].hidden = false;
      }
    }
  }
  #so() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #io() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #oo() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#question-form"].clear();
      this["#question-form"].throbber = false;
      this["#question-dialog"].hidden = false;
      this["#question-dialog"].showModal();
    }
  }
  #Es() {
    let af = new URLSearchParams(location.search);
    let ag = af.get("sort");
    this["#filter-block"].search = af.get("search") || "";
    this["#filter-block"].status = af.get("status") || "all";
    this["#filter-block"].upvotedBy = af.get("upvoted-by") || null;
    this["#filter-block"].watchedBy = af.get("watched-by") || null;
    this["#filter-block"].createdBy = af.get("created-by") || null;
    this["#filter-block"].tag = af.get("tag") || null;
    this["#filter-block"].sort =
      ag === "relevance"
        ? "relevance"
        : ag === "created"
        ? "createdTime:desc"
        : ag === "created-asc"
        ? "createdTime:asc"
        : ag === "updated"
        ? "threadUpdatedTime:desc"
        : ag === "updated-asc"
        ? "threadUpdatedTime:asc"
        : ag === "comments"
        ? "commentsCount:desc"
        : ag === "comments-asc"
        ? "commentsCount:asc"
        : ag === "votes"
        ? "votesCount:desc"
        : ag === "votes-asc"
        ? "votesCount:asc"
        : "threadUpdatedTime:desc";
  }
  async #Ls() {
    if (this.#ks) {
      await this.#ks;
    }
    return (this.#ks = new Promise(async (af) => {
      let ag = new URLSearchParams(location.search);
      let ah = {
        query: this["#filter-block"].search,
        locale: a2.locale,
        type: "question",
        sort: this["#filter-block"].sort,
        page: parseInt(ag.get("page") || "1"),
        perPage: 10,
        preview: true,
      };
      {
        let { tag, status, createdBy, watchedBy, upvotedBy } =
          this["#filter-block"];
        if (tag !== null) {
          ah.tag = tag;
        }
        if (status === "open") {
          ah.closed = false;
        } else if (status === "closed") {
          ah.closed = true;
        }
        if (createdBy !== null || watchedBy !== null || upvotedBy !== null) {
          await Bi.auth.whenReady;
          if (Bi.auth.userID !== null) {
            if (createdBy !== null) {
              ah.authorID = createdBy;
            }
            if (watchedBy !== null) {
              ah.watchedBy = watchedBy;
            }
            if (upvotedBy !== null) {
              ah.upvotedBy = upvotedBy;
            }
          }
        }
      }
      this.lang = ah.locale;
      this["#new-question-anchor"].href = qi(
        location.href,
        "dialog",
        "new-question"
      );
      this["#previews"].innerHTML = "";
      this["#previews-placeholder"].hidden = true;
      this["#previews-placeholder"].title = "#no-results";
      this["#previews-placeholder"].description =
        "#try-redefining-search-criteria";
      this["#previews-skeleton"].hidden = false;
      let [aj, ak] = await Bi.index.searchThreads(ah);
      this["#pager"].max = ak;
      this["#pager"].value = ah.page;
      if (CSS.highlights) {
        CSS.highlights.clear();
      }
      for (let ar of aj) {
        let au = document.createElement("x-card");
        let av = document.createElement("bx-questionpreviewblock");
        if (ah.sort === "createdTime:desc" || ah.sort === "createdTime:asc") {
          av.setAttribute("details", "author created tags comments hashtag");
        } else if (
          ah.sort === "threadUpdatedTime:desc" ||
          ah.sort === "threadUpdatedTime:asc"
        ) {
          av.setAttribute("details", "author updated tags comments hashtag");
        } else if (
          ah.sort === "commentsCount:desc" ||
          ah.sort === "commentsCount:asc"
        ) {
          av.setAttribute("details", "author created tags comments hashtag");
        } else if (
          ah.sort === "votesCount:desc" ||
          ah.sort === "votesCount:asc"
        ) {
          av.setAttribute(
            "details",
            "author created tags comments votes hashtag"
          );
        } else if (ah.sort === "relevance") {
          av.setAttribute("details", "author created tags comments hashtag");
        }
        av.id = ar.id;
        av.data = ar;
        au.append(av);
        this["#previews"].append(au);
      }
      this["#previews-placeholder"].hidden =
        this["#previews"].childElementCount > 0;
      this["#previews-skeleton"].hidden = true;
      {
        let aw = this.o.oldLocation;
        if (aw?.pathname.startsWith("/questions/")) {
          let ax = "question-" + aw.pathname.split("/")[2];
          let ay = this["#previews"].querySelector(
            'bx-questionpreviewblock[id="' + ax + '"]'
          );
          if (ay) {
            ay.blink();
          }
        }
      }
      this.#ks = null;
      af();
    }));
  }
}
customElements.define("bx-questionspage", aa);
class oa extends Ts {
  static _shadowTemplate = ie` <template> <section id="actions-section"> <h3><x-message href="#actions" autocapitalize></x-message></h3> <x-buttons id="action-buttons"> <x-button id="edit-button" condensed> <x-icon href="#edit"></x-icon> <x-label><x-message href="#edit--verb" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="move-button" condensed> <x-icon href="#move"></x-icon> <x-label><x-message href="#move" autocapitalize ellipsis></x-message></x-label> </x-button> <x-button id="delete-button" condensed> <x-icon href="#trash"></x-icon> <x-label><x-message href="#delete" autocapitalize ellipsis></x-message></x-label> </x-button> </x-buttons> </section> <hr> <section id="status-section"> <h3><x-message href="#status" autocapitalize></x-message></h3> <x-select id="status-select"> <x-menu> <x-menuitem value="open" toggled> <x-label><x-message href="#question.open" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="answered"> <x-label><x-message href="#question.answered" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="duplicate"> <x-label><x-message href="#question.duplicate" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="out-of-date"> <x-label><x-message href="#question.out-of-date" autocapitalize></x-message></x-label> </x-menuitem> </x-menu> </x-select> </section> <hr> <section id="tags-section"> <h3><x-message href="#tags" autocapitalize></x-message></h3> <x-tagsinput id="tags-input"></x-tagsinput> </section> </template>
  `;
  static _shadowStyleSheet = se`#action-buttons{width:100%}#action-buttons x-button{flex:1}#status-select{width:100%}`;
  get status() {
    return this["#status-select"].value;
  }
  set status(af) {
    this["#status-select"].value = af;
  }
  get tags() {
    return this["#tags-input"].value;
  }
  set tags(af) {
    let ag = "";
    for (let ah of af) {
      if (ah.includes(":")) {
        let [aj, ak] = ah.split(":").map((al) => al.trim());
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label slot="scope">' +
          aj +
          "</x-label>\n            <x-label>" +
          ak +
          "</x-label>\n          </x-tag>\n        ";
      } else {
        ag +=
          '\n          <x-tag value="' +
          ah +
          '">\n            <x-label>' +
          ah +
          "</x-label>\n          </x-tag>\n        ";
      }
      this["#tags-input"].innerHTML = ag;
    }
  }
  constructor() {
    super();
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#move-button"].addEventListener("click", () => this.#za());
    this["#delete-button"].addEventListener("click", () => this.#Ys());
    this["#status-select"].addEventListener("change", () => this.#Aa());
    this["#tags-input"].addEventListener("change", () => this.#Xs());
  }
  #Zs() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "edit",
      })
    );
  }
  #za() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "move",
      })
    );
  }
  #Ys() {
    this.dispatchEvent(
      new CustomEvent("buttonclick", {
        detail: "delete",
      })
    );
  }
  #Aa() {
    this.dispatchEvent(new CustomEvent("statuschange"));
  }
  #Xs() {
    this.dispatchEvent(new CustomEvent("tagschange"));
  }
}
customElements.define("bx-questionsettings", oa);
class na extends HTMLElement {
  static observedAttributes = ["condensed"];
  static #C = ie` <template> <div id="status" part="status"><x-message id="status-message"></x-message></div> <header id="header" part="header"> <div id="header-left-column"> <a id="author-avatar-anchor"> <bx-avatar id="author-avatar"></bx-avatar> </a> <bx-userbadges id="author-badges"></bx-userbadges> <a id="author-anchor"></a> <span id="wrote-span"></span> <a id="thread-anchor" hidden></a> </div> <div id="header-right-column"> <x-button id="translate-button" togglable> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <x-box id="actions-box"> <x-buttons id="vote-buttons"> <x-button id="downvote-button" value="downvote"> <x-icon id="downvote-icon" href="#downvote"></x-icon> <x-tooltip><x-message href="#downvote"></x-message></x-tooltip> </x-button> <x-button id="votes-count-button"> <x-label id="votes-count-label">0</x-label> </x-button> <x-button id="upvote-button" value="upvote"> <x-icon id="upvote-icon" href="#upvote"></x-icon> <x-tooltip><x-message href="#upvote"></x-message></x-tooltip> </x-button> </x-buttons> <x-button id="watch-button"> <x-icon href="#watch"></x-icon> <x-tooltip><x-message href="#watch"></x-message></x-tooltip> </x-button> <x-button id="edit-button" hidden> <x-icon href="#edit"></x-icon> </x-button> <x-button id="settings-button" hidden> <x-icon href="#hamburger-menu"></x-icon> <x-popover id="settings-popover" modal> <bx-questionsettings id="settings"></bx-questionsettings> </x-popover> </x-button> </x-box> </div> </header> <main id="main" part="main"> <article id="article"> <h2 id="title"> <span id="title-span"></span> <span id="hashtag-span" part="hashtag"></span> </h2> <div id="tags"></div> <section id="description"></section> </article> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      margin: 8px 0;
    }

    /**
     * Header
     */

    #header {
      display: flex;
      align-items: center;
      height: 40px;
      padding: 0 20px;
      border-width: 1px;
      border-style: solid;
      font-size: 14.5px;
    }

    #header-left-column {
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;
    }

    #header-right-column {
      display: flex;
      align-items: center;
      margin-left: auto;
    }

    /* Avatar */

    #author-avatar-anchor {
      display: inline-block;
      vertical-align: middle;
    }
    #author-avatar-anchor[hidden] {
      display: none;
    }

    /* Author badges */

    #author-badges {
      display: inline-block;
      vertical-align: middle;
      margin-left: 2px;
    }
    #author-badges[hidden],
    #author-badges[empty] {
      display: none;
    }

    /* Author name */

    #author-anchor {
      font-weight: 700;
      line-height: 31px;
      margin-left: 2px;
      text-decoration: none;
      color: inherit;
    }
    #author-anchor:hover {
      text-decoration: underline;
    }

    /* Thread anchor */

    #thread-anchor {
      font-weight: 700;
      border-left: 1.5px solid var(--text-color);
      padding-left: 10px;
      margin-left: 6px;
      color: inherit;
      text-decoration: none;
    }
    #thread-anchor:hover {
      text-decoration: underline;
    }

    /* Status badge */

    #status {
      display: none;
      position: absolute;
      top: 95px;
      left: 0;
      margin-left: 100%;
      padding: 3px 6px;
      transform: translateX(-30%) rotate(40deg);
      transform-origin: 0% 0%;
      box-sizing: border-box;
      border-width: 3px;
      border-style: solid;
      font-size: 17px;
      font-weight: 700;
      text-transform: uppercase;
      white-space: pre;
      line-height: 1;
      user-select: none;
      -webkit-user-select: none;
    }
    :host([status="duplicate"]) #status:not([hidden]),
    :host([status="out-of-date"]) #status:not([hidden]),
    :host([status="answered"]) #status:not([hidden]) {
      display: block;
    }

    /* "Translate" button */

    #translate-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    /* "Watch" button */

    #watch-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #watch-button x-icon {
      margin: 0;
    }

    /* "Edit" button */

    #edit-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #edit-button x-icon {
      margin: 0;
      width: 14px;
      height: 14px;
    }

    /* "Settings" button */

    #settings-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    #settings-button::part(arrow) {
      display: none;
    }

    #settings-button > x-icon {
      width: 15px;
      height: 15px;
    }

    /* "Downvote" and "Upvote" buttons */

    #downvote-button {
      min-height: 25px;
      margin: 0 0 0 8px;
      padding: 0px 9px;
    }

    #upvote-button {
      min-height: 25px;
      padding: 0px 9px;
    }

    #downvote-icon,
    #upvote-icon {
      width: 14px;
      height: 14px;
    }
    #downvote-icon {
      transform: translateY(2px);
    }
    #upvote-icon {
      transform: translateY(-1px);
    }

    /* Votes count */

    #votes-count-button {
      min-height: 25px;
      padding: 0px 9px;
      pointer-events: none;
    }

    /**
     * Main
     */

    #main {
      padding: 22px 24px;
      border-width: 1px;
      border-style: solid;
      border-top: none;
    }
    :host([condensed]) #main {
      padding: 10px 18px;
    }

    /* Title */

    #title {
      margin: 0;
    }

    #title #hashtag-span {
      font-size: 20px;
      vertical-align: middle;
      text-transform: lowercase;
    }

    /* Tags */

    #tags {
      display: flex;
      margin-top: 5px;
    }
    #tags:empty,
    #tags[hidden] {
      display: none;
    }

    #tags a {
      display: flex;
      margin: 0 0 0 6px;
      text-decoration: none;
    }
    #tags a:first-child {
      margin-left: 0;
    }
    #tags a:active {
      outline: none;
    }

    /* Description */

    #description {
      margin-top: 20px;
    }
    #title[hidden] + #tags[hidden] + #description {
      margin-top: 0;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    if (this.isConnected) {
      this.#A();
    }
  }
  get condensed() {
    return this.hasAttribute("condensed");
  }
  set condensed(af) {
    if (af === true) {
      this.setAttribute("condensed", "");
    } else {
      this.removeAttribute("condensed");
    }
  }
  get status() {
    return this.getAttribute("status");
  }
  #T;
  #P;
  #Gt;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, na.#S];
    this.#P.append(document.importNode(na.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("click", (ag) => this.#Rs(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
    this["#watch-button"].addEventListener("click", () => this.#Js());
    this["#edit-button"].addEventListener("click", () => this.#Zs());
    this["#upvote-button"].addEventListener("click", (ag) => this.#Ba(ag));
    this["#downvote-button"].addEventListener("click", (ag) => this.#Ba(ag));
    this["#settings"].addEventListener("buttonclick", (ag) => this.#Qs(ag));
    this["#settings"].addEventListener("statuschange", () => this.#Ia());
    this["#settings"].addEventListener("tagschange", () => this.#ea());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = () => {
        this.#A();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "condensed") {
      this.#js();
    }
  }
  #js() {
    this["#title"].hidden = this.condensed === true;
    this["#author-avatar-anchor"].hidden = this.condensed === true;
    this["#author-badges"].hidden = this.condensed === true;
    this["#hashtag-span"].hidden = this.condensed === true;
    this["#thread-anchor"].hidden = this.condensed === false;
    this["#tags"].hidden = this.condensed === true;
    this["#actions-box"].hidden = this.condensed === true;
    this["#status"].hidden = this.condensed === true;
  }
  #Rs(af) {
    if (af.target.closest("a")) {
      this.#Ks(af);
    } else if (af.target.localName === "img") {
      this.#pi(af);
    }
  }
  async #Ks(af) {
    let ag = af.target.closest("a");
    if (
      ag.origin === location.origin &&
      (ag.pathname.startsWith("/questions") ||
        ag.pathname.startsWith("/profiles"))
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  #pi(af) {
    this.#T.imageViewer.showModal(af.target);
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  async #Ba(af) {
    let ag = af.target.closest("x-button");
    let ah = ag.toggled ? "unvote" : ag.value;
    let aj = this["#upvote-button"].toggled;
    let ak = this["#downvote-button"].toggled;
    this["#upvote-button"].disabled = true;
    this["#upvote-button"].toggled = ah === "upvote";
    this["#downvote-button"].disabled = true;
    this["#downvote-button"].toggled = ah === "downvote";
    this["#votes-count-button"].disabled = true;
    if (Bi.auth.userEmailVerified === false) {
      this["#upvote-button"].toggled = aj;
      this["#downvote-button"].toggled = ak;
      if (Bi.auth.userID === null) {
        this.#T.navigate(qi(location.href, "dialog", "login"));
      } else {
        this.#T.openEmailVerifyMessageDialog();
      }
    } else {
      let al = this.#Ui.id;
      let am = Bi.auth.userID;
      let an = null;
      try {
        if (ah === "upvote") {
          await Bi.functions.postMessage("upvotePost", al);
        } else if (ah === "downvote") {
          await Bi.functions.postMessage("downvotePost", al);
        } else if (ah === "unvote") {
          await Bi.functions.postMessage("unvotePost", al);
        }
      } catch (ap) {
        an = ap;
      }
      if (an === null) {
        this.#Ui.upvoters = this.#Ui.upvoters.filter((aq) => aq !== am);
        this.#Ui.downvoters = this.#Ui.downvoters.filter((aq) => aq !== am);
        if (ah === "upvote") {
          this.#Ui.upvoters.push(am);
        } else if (ah === "downvote") {
          this.#Ui.downvoters.push(am);
        }
        this.#Ui.votesCount =
          this.#Ui.upvoters.length - this.#Ui.downvoters.length;
        this["#votes-count-label"].textContent = this.#Ui.votesCount;
      } else {
        if (ah === "upvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-upvote-post",
            },
            detail: bi(an),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else if (ah === "downvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-downvote-post",
            },
            detail: bi(an),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else if (ah === "unvote") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-unvote-post",
            },
            detail: bi(an),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        this["#upvote-button"].toggled = aj;
        this["#downvote-button"].toggled = ak;
      }
    }
    this["#downvote-button"].disabled = false;
    this["#upvote-button"].disabled = false;
    this["#votes-count-button"].disabled = false;
  }
  async #Js() {
    let af = this["#watch-button"].toggled === true ? "unwatch" : "watch";
    let ag = this["#watch-button"].toggled;
    this["#watch-button"].disabled = true;
    this["#watch-button"].toggled = af === "watch";
    if (Bi.auth.userEmailVerified === false) {
      this["#watch-button"].toggled = ag;
      if (Bi.auth.userID === null) {
        this.#T.navigate(qi(location.href, "dialog", "login"));
      } else {
        this.#T.openEmailVerifyMessageDialog();
      }
    } else {
      let ah = this.#Ui.id;
      let aj = Bi.auth.userID;
      let ak = null;
      try {
        if (af === "watch") {
          await Bi.functions.postMessage("watchPost", ah);
        } else {
          await Bi.functions.postMessage("unwatchPost", ah);
        }
      } catch (al) {
        ak = al;
      }
      if (ak === null) {
        this.#Ui.watchers = this.#Ui.watchers.filter((am) => am !== aj);
        if (af === "watch") {
          this.#Ui.watchers.push(aj);
        }
      } else {
        if (af === "watch") {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-watch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else {
          await this.#T.openMessageDialog({
            title: {
              href: "#failed-to-unwatch-post",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
        this["#watch-button"].toggled = ag;
      }
    }
    this["#watch-button"].disabled = false;
  }
  #Zs() {
    let af = new URL(location.href);
    let ag = new URLSearchParams(location.search);
    ag.set("dialog", "edit-question");
    af.search = ag.toString();
    this.#T.navigate(af.toString());
  }
  async #Qs(af) {
    if (af.detail === "edit") {
      let ag = new URL(location.href);
      let ah = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ah.set("dialog", "edit-question");
      ag.search = ah.toString();
      await it(400);
      this.#T.navigate(ag.toString());
    } else if (af.detail === "move") {
      let aj = new URL(location.href);
      let ak = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      ak.set("dialog", "move-question");
      aj.search = ak.toString();
      await it(400);
      this.#T.navigate(aj.toString());
    } else if (af.detail === "delete") {
      let al = new URL(location.href);
      let am = new URLSearchParams(location.search);
      this["#settings-button"].collapse();
      am.set("dialog", "delete-question");
      al.search = am.toString();
      await it(400);
      this.#T.navigate(al.toString());
    }
  }
  async #Ia() {
    let af = this["#settings"].status;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        status: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.status = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-status",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].status = this.#Ui.status;
    }
  }
  async #ea() {
    let af = this["#settings"].tags;
    let ag = this.#Ui.id;
    let ah = null;
    try {
      await Bi.functions.postMessage("editPost", {
        id: ag,
        tags: af,
      });
    } catch (aj) {
      ah = aj;
    }
    if (ah === null) {
      this.#Ui.tags = af;
      this.#A();
    } else {
      await this.#T.openMessageDialog({
        title: {
          href: "#failed-to-change-post-tags",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#settings"].tags = this.#Ui.tags;
    }
  }
  #A() {
    let af = Bi.auth.userID !== null;
    let ag = Bi.auth.isModerator;
    let ah = af ? Bi.auth.userID : null;
    let aj = this.#Ui;
    if (aj !== null) {
      this["#author-avatar-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-avatar"].type = aj.authorAvatar || "random";
      this["#author-avatar"].value = aj.authorID;
      this["#author-badges"].userAgent = aj.authorUserAgent;
      this["#author-badges"].staff = aj.authorID === "0000000000";
      this["#author-anchor"].href =
        "/profiles/" + aj.authorID + "/" + $e(aj.authorName);
      this["#author-anchor"].textContent = aj.authorName;
      this["#wrote-span"].innerHTML =
        '<x-message href="#date-wrote" args="date: ' +
        aj.createdTime +
        '}"></x-message>';
      {
        let ak = aj.id.split("-").at(-1);
        this["#thread-anchor"].innerHTML = Te(aj.title);
        this["#thread-anchor"].href = "/questions/" + ak + "/" + aj.threadSlug;
      }
      if (aj.locale === aj.srcLocale && aj.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = aj.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (aj.srcLocale || aj.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      this.setAttribute("status", aj.status);
      this["#status-message"].href = "#question." + aj.status;
      if (af === false) {
        this["#upvote-button"].toggled = false;
        this["#downvote-button"].toggled = false;
      } else {
        this["#upvote-button"].toggled = aj.upvoters.includes(ah);
        this["#downvote-button"].toggled = aj.downvoters.includes(ah);
      }
      this["#votes-count-label"].textContent = aj.votesCount;
      this["#watch-button"].toggled = af === true && aj.watchers.includes(ah);
      this["#edit-button"].hidden = ag === true || ah !== aj.authorID;
      this["#settings-button"].hidden = ag === false;
      if (this["#settings-popover"].opened === false) {
        this["#settings"].status = aj.status;
        this["#settings"].tags = aj.tags;
      }
      this["#title"].lang = aj.locale;
      this["#title-span"].innerHTML = Te(aj.title);
      this["#hashtag-span"].textContent = "#" + aj.id.split("-").at(-1);
      {
        let al = "";
        for (let am of aj.tags) {
          let an = "/questions?tag=" + ye(am, " ", "+");
          let ap = Vt(am);
          if (am.includes(":")) {
            let [aq, ar] = am.split(":").map((au) => au.trim());
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label slot="scope">' +
              aq +
              "</x-label>\n                <x-label>" +
              ar +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          } else {
            al +=
              '\n            <a href="' +
              an +
              '">\n              <x-tag value="' +
              am +
              '" skin="colored" style="background: ' +
              ap +
              ';">\n                <x-label>' +
              am +
              "</x-label>\n              </x-tag>\n            </a>\n          ";
          }
        }
        this["#tags"].innerHTML = al;
      }
      this["#description"].innerHTML = Te(aj.description);
      this["#description"].lang = aj.locale;
      for (let au of this["#description"].querySelectorAll("code")) {
        if (au.hasAttribute("data-language")) {
          au.innerHTML = ds(au.textContent, au.getAttribute("data-language"));
        }
      }
      if (CSS.highlights && aj.keywords) {
        let av = ai(aj.keywords, [this["#title"], this["#description"]]);
        let aw = CSS.highlights.get("mark") || new Highlight();
        for (let ax of av) {
          aw.add(ax);
        }
        CSS.highlights.set("mark", aw);
      }
      Bi.auth.whenReady.then(() => {
        if (Bi.auth.isModerator) {
          for (let ay of this["#description"].querySelectorAll("img")) {
            Bi.storage.getMetadata(ay.src).then((az) => {
              let aA = fe(az.size);
              ay.setAttribute("data-file-size", aA);
            });
          }
        }
      });
    }
  }
}
customElements.define("bx-questionblock", na);
class la extends bs {
  static v = ie` <template> <h2><x-message href="#move-post"></x-message></h2> <p><x-message href="#move-post.detail"></x-message></p> <p><x-message href="#new-category"></x-message>:</p> <x-radios id="radios"> <x-radio value="bug" toggled> <x-label><x-message href="#bugs"></x-message></x-label> </x-radio> <x-radio value="idea"> <x-label><x-message href="#ideas"></x-message></x-label> </x-radio> </x-radios> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#move-post"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:480px}p:last-of-type{margin-bottom:6px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(
      new CustomEvent("submit", {
        detail: this["#radios"].value,
      })
    );
  }
}
customElements.define("bx-questionmoveform", la);
class ra extends bs {
  static v = ie` <template> <h2><x-message href="#confirm-delete-post"></x-message></h2> <p><x-message href="#confirm-delete-post.detail"></x-message></p> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"><x-label><x-message href="#cancel"></x-message></x-label></x-button> <x-button id="submit-button" toggled><x-label><x-message href="#delete"></x-message></x-label></x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:400px}`;
  constructor() {
    super();
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
}
customElements.define("bx-questiondeleteform", ra);
class ha extends ns {
  static _shadowTemplate = ie` <template> <main id="main"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <bx-questionblock id="question-block"></bx-questionblock> <hr id="separator"> <h3 id="comments-heading"> <x-message id="comments-message" href="#comments" args="count: 0"></x-message> </h3> <div id="comments"></div> <a id="new-comment-anchor"> <x-button id="new-comment-button" toggled> <x-label><strong><x-message href="new-comment"></x-message></strong></x-label> </x-button> </a> </main> <div id="dialogs"> <dialog id="question-dialog"> <bx-questionform id="question-form" type="edit"></bx-questionform> </dialog> <dialog id="question-move-dialog"> <bx-questionmoveform id="question-move-form"></bx-questionmoveform> </dialog> <dialog id="question-delete-dialog"> <bx-questiondeleteform id="question-delete-form"></bx-questiondeleteform> </dialog> <dialog id="comment-dialog"> <bx-commentform id="comment-form"></bx-commentform> </dialog> <dialog id="comment-delete-dialog"> <bx-commentdeleteform id="comment-delete-form"></bx-commentdeleteform> </dialog> </div> </template>
  `;
  static _shadowStyleSheet = se`#separator{margin:35px 0 27px}#question-block{margin:20px 0 8px 0}#comments-heading{font-size:28px}#new-comment-anchor{display:block;margin-top:15px}#new-comment-button{width:100%;min-height:36px}#new-comment-button x-label{cursor:pointer}#comment-dialog,#question-dialog{width:95%;height:95%;max-width:750px}`;
  get canonicalURL() {
    let af = this["#question-block"].data.id.split("-")[1];
    let ag = this["#question-block"].data.threadSlug;
    return location.origin + "/questions/" + af + "/" + ag;
  }
  #Xt;
  #ys;
  #Gt;
  #sa = null;
  constructor() {
    super();
    this["#question-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#question-form"].addEventListener("cancel", (af) => this.#so(af));
    this["#question-form"].addEventListener("submit", (af) => this.#ao(af));
    this["#question-move-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#question-move-form"].addEventListener("submit", (af) =>
      this.#no(af)
    );
    this["#question-move-form"].addEventListener("cancel", (af) =>
      this.#lo(af)
    );
    this["#question-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#question-delete-form"].addEventListener("submit", (af) =>
      this.#ro(af)
    );
    this["#question-delete-form"].addEventListener("cancel", (af) =>
      this.#ho(af)
    );
    this["#comment-dialog"].addEventListener("userclose", (af) => this.#aa(af));
    this["#comment-form"].addEventListener("submit", (af) => this.#la(af));
    this["#comment-form"].addEventListener("cancel", (af) => this.#ra(af));
    this["#comment-delete-dialog"].addEventListener("userclose", (af) =>
      this.#aa(af)
    );
    this["#comment-delete-form"].addEventListener("submit", (af) =>
      this.#ha(af)
    );
    this["#comment-delete-form"].addEventListener("cancel", (af) =>
      this.#ca(af)
    );
  }
  async connectedCallback() {
    super.connectedCallback();
    Bi.auth.addEventListener(
      "userprofilechange",
      (this.#Gt = (af) => {
        this.#da(af);
      })
    );
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    await this.#A();
    {
      let af = new URLSearchParams(location.search).get("dialog");
      if (af !== null) {
        if (af === "edit-question") {
          this.#co();
        } else if (af === "move-question") {
          this.#do();
        } else if (af === "delete-question") {
          this.#uo();
        } else if (af === "new-comment") {
          this.#ma();
        } else if (af.startsWith("reply-comment-")) {
          this.#xa();
        } else if (af.startsWith("edit-comment-")) {
          this.#ga();
        } else if (af.startsWith("delete-comment-")) {
          this.#ba();
        }
      }
    }
    this.u();
  }
  disconnectedCallback() {
    Bi.auth.removeEventListener("userprofilechange", this.#Gt);
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #si() {
    if (this.lang !== a2.locale) {
      this.#A();
    }
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname.startsWith("/questions/")) {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      if (V([...ak.keys(), ...al.keys()]).includes("dialog")) {
        let am = ak.get("dialog");
        let an = al.get("dialog");
        if (am !== an) {
          if (an === null) {
            if (am !== null) {
              if (am === "edit-question") {
                this["#question-dialog"].close();
              } else if (am === "move-question") {
                this["#question-move-dialog"].close();
              } else if (am === "delete-question") {
                this["#question-delete-dialog"].close();
              } else if (
                am === "new-comment" ||
                am.startsWith("reply-comment-") ||
                am.startsWith("edit-comment-")
              ) {
                this["#comment-dialog"].close();
              } else if (am.startsWith("delete-comment-")) {
                this["#comment-delete-dialog"].close();
              }
            }
          } else if (an === "edit-question") {
            this.#co();
          } else if (an === "move-question") {
            this.#do();
          } else if (an === "delete-question") {
            this.#uo();
          } else if (an === "new-comment") {
            this.#ma();
          } else if (an.startsWith("reply-comment-")) {
            this.#xa();
          } else if (an.startsWith("edit-comment-")) {
            this.#ga();
          } else if (an.startsWith("delete-comment-")) {
            this.#ba();
          }
        }
      }
    }
  }
  #da(af) {
    let ag = Bi.auth.isModerator;
    let ah = Bi.auth.userProfile;
    for (let aj of this["#comments"].querySelectorAll("bx-commentblock")) {
      aj.editable = ag;
      aj.indentable = ag;
      aj.deletable = ag;
    }
    if (ah) {
      let ak = Bi.auth.userID;
      let al = this["#question-block"].data;
      if (al?.authorID === ak && al.authorName !== ah.name) {
        al.authorName = ah.name;
        this["#question-block"].data = al;
      }
    }
    if (ah) {
      let am = Bi.auth.userID;
      for (let an of this["#comments"].children) {
        if (am !== null && am === an.data.authorID) {
          let ap = an.data;
          if (ap.authorName !== ah.name) {
            ap.authorName = ah.name;
            an.data = ap;
          }
        }
      }
    }
  }
  #aa() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #ao() {
    if (this["#question-form"].reportValidity() === true) {
      let af = "question-" + location.pathname.split("/")[2];
      let ag = [];
      let ah = null;
      let aj = {
        id: af,
        title: this["#question-form"].title,
        description: this["#question-form"].description,
        attachments: {},
      };
      this["#question-form"].throbber = true;
      for (let ak of this["#question-form"].attachments) {
        let al = await (await fetch(ak)).blob();
        let am = Kt(30) + "." + we(al.type);
        let an = Bi.storage.uploadFile("temp/" + am, al);
        aj.attachments[ak] = am;
        ag.push(an);
      }
      try {
        await Promise.all(ag);
        await Bi.functions.postMessage("editPost", aj);
      } catch (ap) {
        ah = ap;
      }
      if (ah === null) {
        await Bi.index.whenPostEdited(
          af,
          a2.locale,
          this["#question-form"].revision
        );
        await this["#question-dialog"].close();
        await it(150);
        await this.#A();
        this.o.navigate(qi(location.href, "dialog", null));
      } else {
        this["#question-dialog"].hidden = true;
        await it(150);
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-edit-post",
          },
          detail: bi(ah),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        this["#question-form"].throbber = false;
        this["#question-dialog"].hidden = false;
      }
    }
  }
  async #la() {
    if (this["#comment-form"].reportValidity() === true) {
      let af = new URLSearchParams(location.search).get("dialog");
      this["#comment-form"].throbber = true;
      if (af === "new-comment" || af.startsWith("reply-comment-")) {
        let ag = "question-" + location.pathname.split("/")[2];
        let ah = await Xe();
        let aj = [];
        let ak = null;
        let al = null;
        let am = {
          type: "comment",
          description: this["#comment-form"].description,
          attachments: {},
          watchThread: this["#comment-form"].watchThread,
          parentID: af.startsWith("reply-comment-") ? af.substring(6) : ag,
        };
        if (ah !== null) {
          am.userAgent = ah;
        }
        for (let an of this["#comment-form"].attachments) {
          let ap = await (await fetch(an)).blob();
          let aq = Kt(30) + "." + we(ap.type);
          let ar = Bi.storage.uploadFile("temp/" + aq, ap);
          am.attachments[an] = aq;
          aj.push(ar);
        }
        try {
          await Promise.all(aj);
          ak = await Bi.functions.postMessage("newPost", am);
        } catch (au) {
          al = au;
        }
        if (al === null) {
          let av = ak.data;
          await Bi.index.whenPostCreated(av, a2.locale);
          this["#comment-form"].throbber = false;
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          let aw = this["#comments"].querySelector("#" + av);
          if (aw) {
            aw.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-add-comment",
            },
            detail: bi(al),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-dialog"].hidden = false;
        }
      } else if (af.startsWith("edit-comment-")) {
        let ax = af.substring(5);
        let ay = this["#comments"].querySelector("#" + ax);
        let az = [];
        let aA = null;
        let aB = null;
        let aC = {
          id: ax,
          description: this["#comment-form"].description,
          attachments: {},
        };
        for (let aD of this["#comment-form"].attachments) {
          let aE = await (await fetch(aD)).blob();
          let aF = Kt(30) + "." + we(aE.type);
          let aG = Bi.storage.uploadFile("temp/" + aF, aE);
          aC.attachments[aD] = aF;
          az.push(aG);
        }
        try {
          await Promise.all(az);
          aA = await Bi.functions.postMessage("editPost", aC);
        } catch (aH) {
          aB = aH;
        }
        if (aB === null) {
          await Bi.index.whenPostEdited(
            ax,
            a2.locale,
            this["#comment-form"].revision
          );
          this.o.navigate(qi(location.href, "dialog", null));
          await this.#A();
          ay = this["#comments"].querySelector("#" + ax);
          if (ay) {
            ay.scrollIntoViewIfNeeded();
          }
        } else {
          this["#comment-dialog"].hidden = true;
          await it(150);
          await this.o.openMessageDialog({
            title: {
              href: "#failed-to-edit-comment",
            },
            detail: bi(aB),
            buttons: [
              {
                href: "#back-to-form",
              },
            ],
          });
          this["#comment-form"].throbber = false;
          this["#comment-dialog"].hidden = false;
        }
      }
    }
  }
  async #no(af) {
    let ag = "question-" + location.pathname.split("/")[2];
    let ah = null;
    let aj = null;
    this["#question-move-form"].focus();
    this["#question-move-form"].throbber = true;
    try {
      ah = (
        await Bi.functions.postMessage("convertPost", {
          id: ag,
          type: af.detail,
        })
      ).data;
    } catch (ak) {
      aj = ak;
    }
    if (aj === null) {
      await Bi.index.whenPostCreated(ag, a2.locale);
      await this["#question-move-dialog"].close();
      let [al, am] = ah.split("-");
      let an = al === "blog" ? al : al + "s";
      this.o.navigate("/" + an + "/" + am, true);
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-move-post",
        },
        detail: bi(aj),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  async #ro() {
    let af = "question-" + location.pathname.split("/")[2];
    let ag = null;
    this["#question-delete-form"].focus();
    this["#question-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      await this["#question-delete-dialog"].close();
      this.o.navigate("/questions");
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-post",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  async #ha() {
    let af = new URLSearchParams(location.search).get("dialog").substring(7);
    let ag = null;
    this["#comment-delete-form"].focus();
    this["#comment-delete-form"].throbber = true;
    try {
      await Bi.functions.postMessage("deletePost", af);
    } catch (ah) {
      ag = ah;
    }
    if (ag === null) {
      await Bi.index.whenPostDeleted(af, a2.locale);
      this.o.navigate(qi(location.href, "dialog", null));
      await this.#A();
    } else {
      this.o.navigate(qi(location.href, "dialog", null));
      await this.o.openMessageDialog({
        title: {
          href: "#failed-to-delete-comment",
        },
        detail: bi(ag),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  #so() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #lo() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ho() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ra() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  #ca() {
    this.o.navigate(qi(location.href, "dialog", null));
  }
  async #co() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = "question-" + location.pathname.split("/")[2];
      let { title, description, revision } = await Bi.database.getDocument(
        "posts",
        af
      );
      this["#question-form"].clear();
      this["#question-form"].title = title;
      this["#question-form"].description = description;
      this["#question-form"].revision = revision;
      this["#question-form"].throbber = false;
      this["#question-dialog"].hidden = false;
      this["#question-dialog"].showModal();
    }
  }
  async #do() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#question-move-form"].throbber = false;
      this["#question-move-dialog"].hidden = false;
      this["#question-move-dialog"].showModal();
    }
  }
  async #uo() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#question-delete-form"].throbber = false;
      this["#question-delete-dialog"].hidden = false;
      this["#question-delete-dialog"].showModal();
    }
  }
  async #ma() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-form"].clear();
      this["#comment-form"].type = "new";
      this["#comment-form"].description = "";
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #xa() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-form"].clear();
      this["#comment-form"].type = "new";
      this["#comment-form"].description = "";
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ga() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      let af = new URLSearchParams(location.search).get("dialog").substring(5);
      let { description, revision } = await Bi.database.getDocument(
        "posts",
        af
      );
      this["#comment-form"].clear();
      this["#comment-form"].type = "edit";
      this["#comment-form"].description = description;
      this["#comment-form"].revision = revision;
      this["#comment-form"].throbber = false;
      this["#comment-dialog"].hidden = false;
      this["#comment-dialog"].showModal();
    }
  }
  async #ba() {
    await this.whenReady;
    await Bi.auth.whenReady;
    if (Bi.auth.userID === null) {
      this.o.navigate(qi(location.href, "dialog", "login"), true);
    } else if (Bi.auth.userEmailVerified === false) {
      this.o.openEmailVerifyMessageDialog();
    } else {
      this["#comment-delete-form"].throbber = false;
      this["#comment-delete-form"].hidden = false;
      this["#comment-delete-dialog"].showModal();
    }
  }
  async #A() {
    if (this.#sa) {
      await this.#sa;
    }
    return (this.#sa = new Promise(async (af) => {
      this.lang = a2.locale;
      this["#comments"].innerHTML = "";
      let ag = "question-" + location.pathname.split("/")[2];
      let ah = await Bi.index.getPost(ag, a2.locale);
      let aj = ag.split("-")[1];
      if (ah) {
        {
          let ak = "/questions/" + aj + "/" + ah.threadSlug;
          if (location.pathname !== ak) {
            let al = location.href.replace(location.pathname, ak);
            this.o.navigate(al, true);
          }
        }
        this["#question-block"].data = ah;
        this["#comments-message"].args = {
          count: ah.commentsCount,
        };
        this["#new-comment-anchor"].href = qi(
          location.href,
          "dialog",
          "new-comment"
        );
        if (ah.commentsCount === 0) {
          this["#comments"].innerHTML = "";
        } else {
          {
            let aq = "";
            for (let ar = 0; ar < Math.min(ah.commentsCount, 10); ar += 1) {
              aq += "<bx-commentblock skeleton></bx-commentblock>";
            }
            this["#comments"].innerHTML = aq;
          }
          let am = await Bi.index.getThreadComments(ag, a2.locale);
          let an = document.createDocumentFragment();
          let ap = (au) => {
            let av = document.createElement("bx-commentblock");
            av.id = au.id;
            av.data = au;
            av.threaded = true;
            av.editable = Bi.auth.isModerator;
            av.indentable = Bi.auth.isModerator;
            av.deletable = Bi.auth.isModerator;
            let aw = am.filter((ax) => ax.parentID === au.id);
            for (let ax of aw) {
              let ay = ap(ax);
              av.append(ay);
            }
            return av;
          };
          for (let au of am) {
            if (au.parentID === ag) {
              let av = ap(au);
              an.append(av);
            }
          }
          this["#comments"].innerHTML = "";
          this["#comments"].append(an);
        }
      }
      this.#sa = null;
      af();
    }));
  }
}
customElements.define("bx-questionssubpage", ha);
class ca extends ns {
  static _shadowTemplate = ie` <template> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <img id="preview"> </template>
  `;
  static _shadowStyleSheet = se`#breadcrumb{margin-bottom:20px}#preview{background:var(--checkboard-background);border-width:1px;border-style:solid;border-color:var(--border-color)}`;
  get artworkID() {
    return location.pathname.split("/")[2];
  }
  get canonicalURL() {
    return location.origin + "/artworks/" + this.artworkID;
  }
  get robots() {
    return "noindex, nofollow";
  }
  #sa = null;
  async connectedCallback() {
    super.connectedCallback();
    await this.#A();
    this.u();
  }
  async #A() {
    if (this.#sa) {
      await this.#sa;
    }
    return (this.#sa = new Promise(async (af) => {
      let ag =
        "./storage/artworks/" + this.artworkID + ".svg";
      let ah = null;
      let aj = null;
      let ak = null;
      try {
        ah = await fetch(ag, {
          cache: "reload",
          headers: {
            Pragma: "no-cache",
          },
        });
        if (ah.ok === false) {
          ak = ah.status;
        }
      } catch (am) {
        aj = am;
      }
      if (aj) {
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-open-file",
          },
          detail: {
            href: "#cant-connect-to-server",
          },
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      } else if (ak) {
        await this.o.openMessageDialog({
          title: {
            href: "#failed-to-open-file",
          },
          detail: {
            href: "#failed-to-open-file.file-not-found",
            args: {
              serverError: ak,
            },
          },
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      } else {
        let an = await ah.text();
        let ap = await ((al = an),
        new Promise(async (ar) => {
          let au;
          let av;
          let aw = new Blob([al], {
            type: "image/svg+xml",
          });
          let ax = new FileReader();
          ax.readAsDataURL(aw);
          ax.addEventListener(
            "load",
            (au = (ay) => {
              ax.removeEventListener("load", au);
              ax.removeEventListener("error", av);
              let az = ay.target.result;
              ar(az);
            })
          );
          ax.addEventListener(
            "error",
            (av = (ay) => {
              ax.removeEventListener("load", au);
              ax.removeEventListener("error", av);
              ar(null);
            })
          );
        }));
        this["#preview"].src = ap;
        let aq = await Bi.database.getDocument("artworks", this.artworkID);
        this["#breadcrumb"].arg = aq.name;
      }
      var al;
      this.#sa = null;
      af();
    }));
  }
}
customElements.define("bx-sharepage", ca);
class da extends HTMLElement {
  static #C = ie` <template> <aside> <bx-avatar id="avatar"></bx-avatar> </aside> <main id="main"> <article> <section id="name-section"></section> <section id="bio-section"></section> <section id="website-section"> <span><strong>Website:</strong></span> <a rel="nofollow noopener" id="website-anchor"></a> </section> <section id="created-section"> <span><strong>Joined:</strong></span> <span id="created-date-span"></span> </section> </article> </main> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      border-width: 1px;
      border-style: solid;
      padding: 14px;
      font-size: 14.5px;
    }

    #main {
      margin-left: 16px;
    }

    #avatar {
      width: 110px;
      height: 110px;
    }

    #bio-section {
      margin: 5px 0px;
    }

    #name-section {
      margin: 0;
      padding: 0;
      line-height: 1.15;
      font-size: 22px;
      font-weight: 700;
    }

    #website-anchor:hover {
      text-decoration: underline;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    this.#A();
  }
  #P;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, da.#S];
    this.#P.append(document.importNode(da.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
  connectedCallback() {
    this.#A();
  }
  async #A() {
    if (this.#Ui) {
      this["#avatar"].hidden = false;
      this["#avatar"].type = (this.#Ui && this.#Ui.avatar) || "random";
      this["#avatar"].value = this.#Ui.id;
    } else {
      this["#avatar"].hidden = true;
    }
    if (this.#Ui) {
      this["#name-section"].textContent = this.#Ui.name;
    } else {
      this["#name-section"].textContent = "";
    }
    if (this.#Ui?.bio) {
      this["#bio-section"].innerHTML = Te(this.#Ui.bio);
    } else {
      this["#bio-section"].innerHTML = "";
    }
    if (this.#Ui?.websiteURL) {
      this["#website-section"].hidden = false;
      this["#website-anchor"].href = this.#Ui.websiteURL;
      this["#website-anchor"].textContent = this.#Ui.websiteURL;
    } else {
      this["#website-section"].hidden = true;
      this["#website-anchor"].href = "";
      this["#website-anchor"].textContent = "";
    }
    if (this.#Ui) {
      let af = this.#Ui.createdTime.seconds * 1000;
      this["#created-section"].hidden = false;
      this["#created-date-span"].innerHTML =
        '<x-message href="#date-abs" args="date:' + af + '"></x-message>';
    } else {
      this["#created-section"].hidden = true;
      this["#created-date-span"].textContent = "";
    }
  }
}
customElements.define("bx-profileblock", da);
class ua extends ns {
  static observedAttributes = ["userid"];
  static _shadowTemplate = ie` <template> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <bx-profileblock id="profile-block"></bx-profileblock> <x-box id="nav-buttons"> <a id="activity-anchor"> <x-button id="activity-button" value="activity" condensed togglable> <x-icon href="#login"></x-icon> <x-label><x-message href="#activity" autocapitalize></x-message></x-label> </x-button> </a> <a id="ideas-anchor"> <x-button id="ideas-button" value="ideas" condensed togglable> <x-icon href="#ideas"></x-icon> <x-label><x-message href="#ideas"></x-message></x-label> </x-button> </a> <a id="bugs-anchor"> <x-button id="bugs-button" value="bugs" condensed togglable> <x-icon href="#bugs"></x-icon> <x-label><x-message href="#bugs"></x-message></x-label> </x-button> </a> <a id="questions-anchor"> <x-button id="questions-button" value="questions" condensed togglable> <x-icon href="#questions"></x-icon> <x-label><x-message href="#questions"></x-message></x-label> </x-button> </a> </x-box> <div id="previews"></div> <bx-placeholderblock id="previews-placeholder" hidden></bx-placeholderblock> <bx-pager id="pager" value="1" max="1"></bx-pager> </template>
  `;
  static _shadowStyleSheet = se`#breadcrumb{margin-bottom:20px}#nav-buttons{margin-top:20px;width:100%}#nav-buttons>a{flex:1;margin-left:7px;text-decoration:none;filter:none}#nav-buttons>a:first-child{margin-left:0}#nav-buttons>a>x-button{width:100%}#nav-buttons>a>x-button[toggled]{z-index:1}#previews{margin-top:20px}#previews bx-commentblock,#previews x-card{margin:12px 0}#pager{margin-top:24px}`;
  get userID() {
    return this.getAttribute("userid");
  }
  set userID(af) {
    if (af === null) {
      this.removeAttribute("userid");
    } else {
      this.setAttribute("userid", af);
    }
  }
  get canonicalURL() {
    let af = $e(this["#profile-block"].data.name);
    return location.origin + "/profiles/" + this.userID + "/" + af;
  }
  #sa = null;
  #Xt;
  #ys;
  async connectedCallback() {
    super.connectedCallback();
    a2.addEventListener(
      "localeschange",
      (this.#Xt = () => {
        this.#si();
      })
    );
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    await this.#A();
    this.u();
  }
  disconnectedCallback() {
    a2.removeEventListener("localeschange", this.#Xt);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "userid" && this.o) {
      this.#A();
    }
  }
  #si() {
    this.#A();
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname.startsWith("/profiles/")) {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      let am = _i(ak, al);
      {
        let an = ["category", "page"];
        if (am.find((ap) => an.includes(ap)) !== undefined) {
          if (method === "push" || method === "replace") {
            this.o.resetScrollOffset();
          }
          await this.#A();
          if (method === "pop") {
            this.o.restoreScrollOffset();
          }
        }
      }
    }
  }
  async #A() {
    if (this.#sa) {
      await this.#sa;
    }
    return (this.#sa = new Promise(async (af) => {
      let [, , ag] = location.pathname.split("/");
      let ah = await Bi.database.getDocument("profiles", ag);
      let aj = $e(ah.name);
      let ak = new URLSearchParams(location.search);
      let al = parseInt(ak.get("page") || "1");
      let am = ak.get("category") || "activity";
      ah.id = ag;
      {
        let an = "/profiles/" + this.userID + "/" + aj;
        if (location.pathname !== an) {
          let ap = location.href.replace(location.pathname, an);
          this.o.navigate(ap, true);
        }
      }
      this["#breadcrumb"].arg = ah.name;
      this["#profile-block"].data = ah;
      this["#nav-buttons"].value = am;
      this["#activity-anchor"].href = "/profiles/" + ag + "/" + aj;
      this["#bugs-anchor"].href =
        "/profiles/" + ag + "/" + aj + "?category=bugs";
      this["#ideas-anchor"].href =
        "/profiles/" + ag + "/" + aj + "?category=ideas";
      this["#questions-anchor"].href =
        "/profiles/" + ag + "/" + aj + "?category=questions";
      this["#activity-button"].toggled = am === "activity";
      this["#bugs-button"].toggled = am === "bugs";
      this["#ideas-button"].toggled = am === "ideas";
      this["#questions-button"].toggled = am === "questions";
      {
        let aq;
        if (am === "activity") {
          let av = {
            authorID: ag,
            locale: a2.locale,
            page: al,
          };
          aq = await Bi.index.searchPosts(av);
        } else if (am === "blog") {
          let aw = {
            type: "blog",
            authorID: ag,
            locale: a2.locale,
            page: al,
          };
          aq = await Bi.index.searchThreads(aw);
        } else if (am === "bugs") {
          let ax = {
            type: "bug",
            authorID: ag,
            locale: a2.locale,
            page: al,
          };
          aq = await Bi.index.searchThreads(ax);
        } else if (am === "ideas") {
          let ay = {
            type: "idea",
            authorID: ag,
            locale: a2.locale,
            page: al,
          };
          aq = await Bi.index.searchThreads(ay);
        } else if (am === "questions") {
          let az = {
            type: "question",
            authorID: ag,
            locale: a2.locale,
            page: al,
          };
          aq = await Bi.index.searchThreads(az);
        }
        let [ar, au] = aq;
        this["#pager"].max = au;
        this["#pager"].value = al;
        this["#previews"].innerHTML = "";
        for (let aA of ar) {
          let aB;
          if (aA.type === "blog") {
            if (am === "activity") {
              aB = document.createElement("bx-blogblock");
              aB.setAttribute("condensed", "");
            } else {
              aB = document.createElement("bx-blogpreviewblock");
            }
          } else if (aA.type === "idea") {
            if (am === "activity") {
              aB = document.createElement("bx-ideablock");
              aB.setAttribute("condensed", "");
            } else {
              aB = document.createElement("bx-ideapreviewblock");
              aB.setAttribute("details", "created");
            }
          } else if (aA.type === "bug") {
            if (am === "activity") {
              aB = document.createElement("bx-bugblock");
              aB.setAttribute("condensed", "");
            } else {
              aB = document.createElement("bx-bugpreviewblock");
              aB.setAttribute("details", "created");
            }
          } else if (aA.type === "question") {
            if (am === "activity") {
              aB = document.createElement("bx-questionblock");
              aB.setAttribute("condensed", "");
            } else {
              aB = document.createElement("bx-questionpreviewblock");
              aB.setAttribute("details", "created");
            }
          } else if (aA.type === "comment") {
            aB = document.createElement("bx-commentblock");
            aB.setAttribute("condensed", "");
          }
          aB.uid = aA.id;
          aB.data = aA;
          if (
            aA.type === "comment" ||
            aB.localName.includes("preview") === false
          ) {
            this["#previews"].append(aB);
          } else {
            let aC = document.createElement("x-card");
            aC.append(aB);
            this["#previews"].append(aC);
          }
        }
        if (this["#previews"].childElementCount > 0) {
          this["#previews-placeholder"].hidden = true;
        } else {
          this["#previews-placeholder"].title = "#no-results";
          this["#previews-placeholder"].hidden = false;
        }
      }
      {
        let aD = this.o.oldLocation;
        if (aD) {
          let aE = null;
          if (aD.pathname.startsWith("/bugs/")) {
            let aF = aD.pathname.split("/")[2];
            aE = this["#previews"].querySelector(
              'bx-bugpreviewblock[uid="' + aF + '"]'
            );
          } else if (aD.pathname.startsWith("/ideas/")) {
            let aG = aD.pathname.split("/")[2];
            aE = this["#previews"].querySelector(
              'bx-ideapreviewblock[uid="' + aG + '"]'
            );
          } else if (aD.pathname.startsWith("/questions/")) {
            let aH = aD.pathname.split("/")[2];
            aE = this["#previews"].querySelector(
              'bx-questionpreviewblock[uid="' + aH + '"]'
            );
          }
          if (aE) {
            aE.blink();
          }
        }
      }
      this.#sa = null;
      af();
    }));
  }
}
customElements.define("bx-profilepage", ua);
class pa extends ns {
  static _shadowTemplate = ie` <template> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <main id="main"> <section> <hgroup> <x-icon href="#logo-svg"></x-icon> <h2><x-message href="#web-app"></x-message> (boxy-svg.com)</h2> </hgroup> <x-card> <h3><a href="/legal/web-terms"><x-message href="#legal.terms-of-use"></x-message></a></h3> </x-card> <x-card> <h3><a href="/legal/web-privacy"><x-message href="#legal.privacy-policy"></x-message></a></h3> </x-card> </section> <hr> <section> <hgroup> <x-icon href="#linux"></x-icon> <h2><x-message href="#linux-app"></x-message> (Flathub)</h2> </hgroup> <x-card hidden> <h3><a href="/legal/linux-eula"><x-message href="#legal.eula"></x-message></a></h3> </x-card> <x-card> <h3><a href="/legal/linux-privacy"><x-message href="#legal.privacy-policy"></x-message></a></h3> </x-card> </section> <hr> <section> <hgroup> <x-icon href="#macos"></x-icon> <h2><x-message href="#macos-app"></x-message> (Mac App Store)</h2> </hgroup> <x-card hidden> <h3><a href="/legal/macos-eula"><x-message href="#legal.eula"></x-message></a></h3> </x-card> <x-card> <h3><a href="/legal/macos-privacy"><x-message href="#legal.privacy-policy"></x-message></a></h3> </x-card> </section> <hr> <section hidden> <hgroup> <x-icon href="#settings-markup"></x-icon> <h2><x-message href="#web-component"></x-message></h2> </hgroup> <x-card> <h3><a href="/legal/component-terms"><x-message href="#legal.terms-of-use"></x-message></a></h3> </x-card> <x-card> <h3><a href="/legal/component-privacy"><x-message href="#legal.privacy-policy"></x-message></a></h3> </x-card> </section> <hr hidden> <section> <hgroup> <x-icon href="#copyright"></x-icon> <h2><x-message href="#legal.other"></x-message></h2> </hgroup> <x-card> <h3><a href="/legal/dmca"><x-message href="#legal.dmca-policy"></x-message></a></h3> </x-card> </section> </main> </template>
  `;
  static _shadowStyleSheet = se`#breadcrumb{margin-bottom:20px}hr{margin:28px 0 26px}section>hgroup{display:flex;align-items:center;margin-bottom:20px}section>hgroup>x-icon{width:24px;height:24px;min-width:24px;margin-right:8px}section>hgroup>h2{margin:0;box-sizing:border-box;line-height:1.1;font-size:22px;font-weight:700}x-card{margin:0;min-height:0}x-card+x-card{margin-top:12px}x-card>h3{margin:0;font-weight:700;font-size:16px;line-height:1.2}x-card>h3>a{display:block;color:inherit;padding:12px 12px;text-decoration:none;font-weight:inherit}x-card>h3>a:hover{text-decoration:underline}`;
  get canonicalURL() {
    return location.origin + "/legal";
  }
  connectedCallback() {
    super.connectedCallback();
    this.u();
  }
}
customElements.define("bx-legalpage", pa);
class ma extends ns {
  static _shadowTemplate = ie` <template> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <x-card> <x-button id="translate-button" togglable hidden> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> <main id="main"></main> </x-card> </template>
  `;
  static _shadowStyleSheet = se`#breadcrumb{margin-bottom:20px}x-card{position:relative}x-card:first-of-type{margin-top:20px}x-card:last-of-type{margin-bottom:0}x-card>main{padding:20px 24px}article hgroup{margin-bottom:20px}article hgroup>h2{font-size:32px;font-weight:700;margin:0}article hgroup>p{margin-top:2px}article h4{margin-top:20px}article li{margin-top:16px}article ol>li::marker{font-weight:700}article p:first-child{margin-top:0}article>:last-child{margin-bottom:0}article table{width:100%;margin:20px 0;border-collapse:collapse}article table td,article table th{padding:3px 13px;text-align:start;min-width:105px}#footnote{margin-top:-8px;font-size:12px;opacity:.8}#translate-button{float:right;min-height:25px;margin:20px 20px 0 8px;padding:0 9px}#translate-button x-tooltip{min-width:160px}`;
  get canonicalURL() {
    return location.origin + "/legal";
  }
  #Xt;
  #Ui;
  constructor() {
    super();
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
  }
  async connectedCallback() {
    super.connectedCallback();
    this.#Ui = await Bi.index.getPost(
      "legal-" + location.pathname.split("/")[2],
      a2.locale
    );
    a2.addEventListener(
      "localeschange",
      (this.#Xt = async () => {
        this.#Ui = await Bi.index.getPost(this.#Ui.id, a2.locale);
        this.#A();
      })
    );
    await this.#A();
    this.u();
  }
  disconnectedCallback() {
    a2.removeEventListener("localeschange", this.#Xt);
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af)) {
      this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    } else {
      this.#Ui = await Bi.database.getDocument("posts", this.#Ui.id);
    }
    this.#A();
  }
  #A() {
    return new Promise(async (af) => {
      this["#main"].innerHTML = this.#Ui.description;
      if (
        this.#Ui.locale === this.#Ui.srcLocale &&
        this.#Ui.locale === a2.locale
      ) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = this.#Ui.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (this.#Ui.srcLocale || this.#Ui.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      {
        let ag = this["#main"].querySelector("mark");
        if (ag) {
          ag.hidden = this.#Ui.locale === "en";
        }
      }
      af();
    });
  }
}
customElements.define("bx-legalsubpage", ma);
let xa = [
  "./storage/linux/screenshot-1.png",
  "./storage/linux/screenshot-2.png",
  "./storage/linux/screenshot-3.png",
  "./storage/linux/screenshot-4.png",
  "./storage/linux/screenshot-5.png",
];
class ga extends ns {
  static _shadowTemplate = ie` <template> <header id="header"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> </header> <main id="main"> <x-card> <main> <article> <h2><x-message href="#press"></x-message></h2> <x-message href="#press-hint"></x-message> </article> </main> </x-card> <hr> <x-card id="icons-card" skin="document"> <main> <article> <h2><x-message href="#icons"></x-message></h2> <x-box> <x-box vertical> <h3><x-message href="#icon.normal"></x-message></h3> <img id="normal-icon-img" src="./images/boxy-svg.svg"> </x-box> <x-box vertical> <h3><x-message href="#icon.monochromatic"></x-message></h3> <img id="monochromatic-icon-img"> </x-box> </x-box> </article> </main> </x-card> <hr> <x-card id="screenshots-card" skin="document"> <main> <article> <h2><x-message href="#screenshots"></x-message></h2> <a href="${xa[0]}" target="_blank"> <img src="${xa[0]}"> </a> <a href="${xa[1]}" target="_blank"> <img src="${xa[1]}"> </a> <a href="${xa[2]}" target="_blank"> <img src="${xa[2]}"> </a> <a href="${xa[3]}" target="_blank"> <img src="${xa[3]}"> </a> <a href="${xa[4]}" target="_blank"> <img src="${xa[4]}"> </a> </article> </main> </x-card> <hr> <x-card id="description-card" skin="document"> <main> <article> <h2><x-message href="#description"></x-message></h2> <h3>Boxy SVG</h3> <p><strong><x-message href="#scalable-vector-graphics-editor"></x-message></strong></p> <x-message href="#app-description-long"></x-message> </article> </main> </x-card> </main> </template>
  `;
  get canonicalURL() {
    return location.origin + "/press";
  }
  static _shadowStyleSheet = se`article h2{margin-top:0;font-size:30px}article h3{margin-top:20px;font-weight:700;font-size:18px;line-height:1.2}#main>x-card:last-child{margin-bottom:0}header{margin-bottom:26px}header #breadcrumb{margin:0 0 20px 0}header p{font-weight:500}#icons-card x-box>x-box:last-child{margin-left:24px}#icons-card img{width:160px;height:160px;margin:0}#screenshots-card a:focus{z-index:1}#screenshots-card img{width:100%;margin:24px 0 0 0}#description-card ul:last-child{margin-bottom:0}`;
  constructor() {
    super();
    this["#normal-icon-img"].addEventListener("click", (af) => this.#pi(af));
    this["#monochromatic-icon-img"].addEventListener("click", (af) =>
      this.#pi(af)
    );
    this["#screenshots-card"].addEventListener("click", (af) => this.#po(af));
  }
  async connectedCallback() {
    super.connectedCallback();
    await this.#A();
    this.u();
  }
  #pi(af) {
    this.o.imageViewer.showModal(af.target);
  }
  #po(af) {
    if (af.target.localName === "img") {
      af.preventDefault();
      this.o.imageViewer.showModal(af.target);
    }
  }
  #A() {
    let af = a2.queryIcon("#boxy-svg-monochromatic").innerHTML;
    let ag = new Blob(
      [
        '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="1024px" height="1024px">' +
          af +
          "</svg>",
      ],
      {
        type: "image/svg+xml",
      }
    );
    let ah = URL.createObjectURL(ag);
    this["#monochromatic-icon-img"].src = ah;
  }
}
customElements.define("bx-presspage", ga);
class ba extends HTMLElement {
  static #C = ie` <template> <header id="header"> <div id="title-and-date"> <h3 id="title"> <x-message href="#version"></x-message> <span id="version"></span> <a id="version-anchor" href="/changelog?year=2023#v4.14.2"> <x-icon href="#link"></x-icon> </a> </h3> <h4 id="date"><x-message id="date-message" href="#date-abs"></x-message></h4> </div> <x-button id="translate-button" togglable> <x-icon href="#translate"></x-icon> <x-tooltip> <x-message href="#machine-translation"></x-message> <br> (<x-message id="src-locale-message"></x-message> → <x-message id="locale-message"></x-message>) </x-tooltip> </x-button> </header> <main id="main"> <ul id="changes"></ul> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      position: relative;
      padding: 16px 20px;
      box-sizing: border-box;
    }

    /**
     * Header
     */

    #header {
      display: flex;
    }

    #title-and-date {
      flex: 1;
    }

    /* Title */

    #title {
      position: relative;
      margin: 0;
      font-weight: 700;
      font-size: 18px;
      line-height: 1.2;
    }

    #title #version-anchor {
      text-decoration: none;
      vertical-align: middle;
      margin-left: 2px;
      visibility: hidden;
    }
    #title:hover #version-anchor {
      visibility: visible;
    }

    #title #version-anchor x-icon {
      width: 18px;
      height: 18px;
      display: inline-block;
    }

    /* Date */

    #date {
      margin: 2px 0 0 0;
      opacity: 0.6;
      font-size: 13px;
    }

    /* "Translate" button */

    #translate-button {
      min-height: 25px;
      padding: 0px 9px;
      margin-left: 8px;
    }

    /**
     * Main
     */

    #main ul {
      margin-bottom: 0;
    }

    #main x-tag {
      vertical-align: middle;
      margin-bottom: 2px;
      margin-right: 4px;
      background: #ec407a;
      font-size: 13px;
    }
    #main x-tag[value="added"] {
      background: var(--blue-color);
    }
    #main x-tag[value="removed"] {
      background: var(--red-color);
    }
    #main x-tag[value="fixed"] {
      background: var(--green-color);
    }
    #main x-tag[value="improved"] {
      background: var(--purple-color);
    }

    #main p {
      display: inline;
    }
  `;
  get data() {
    return this.#Ui;
  }
  set data(af) {
    this.#Ui = af;
    if (this.isConnected) {
      this.#A();
    }
  }
  #T;
  #P;
  #mo;
  #Ui = null;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, ba.#S];
    this.#P.append(document.importNode(ba.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("click", (ag) => this.#Rs(ag));
    this["#translate-button"].addEventListener("toggle", () => this.#Di());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    a2.addEventListener("themechange", (this.#mo = () => this.#xo()));
    this.#A();
  }
  disconnectedCallback() {
    a2.removeEventListener("themechange", this.#mo);
  }
  #Rs(af) {
    let ag = af.target.closest("a");
    if (
      ag &&
      ag.origin === location.origin &&
      ag.pathname.startsWith("/changelog")
    ) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  async #Di() {
    let af = this["#translate-button"].toggled ? a2.locale : this.#Ui.srcLocale;
    if (He.includes(af) === false) {
      af = "en";
    }
    this.#Ui = await Bi.index.getPost(this.#Ui.id, af);
    this.#A();
  }
  #A() {
    let af = this.#Ui;
    if (af !== null) {
      {
        let ag = new Date(af.createdTime).getFullYear();
        this["#version"].textContent = af.version;
        this["#version-anchor"].setAttribute(
          "href",
          "/changelog?year=" + ag + "#v" + af.version
        );
      }
      this["#date-message"].setAttribute("args", "date: " + af.createdTime);
      if (af.locale === af.srcLocale && af.locale === a2.locale) {
        this["#translate-button"].hidden = true;
      } else {
        this["#translate-button"].toggled = af.locale === a2.locale;
        this["#translate-button"].hidden = false;
        this["#src-locale-message"].href =
          "#language." + (af.srcLocale || af.locale || "en");
        this["#locale-message"].href = "#language." + a2.locale;
      }
      {
        let ah = "";
        for (let aj of af.changes) {
          ah +=
            "<li>" +
            ('\n          <x-tag size="small" skin="colored" value="' +
              aj.type +
              '">\n            <x-label><x-message href="#changelog.' +
              aj.type +
              '"></x-message></x-label>\n          </x-tag>\n        ') +
            " " +
            Ce(aj.description) +
            "</li>";
        }
        this["#changes"].innerHTML = ah;
      }
      this.#xo();
    }
  }
  #xo() {
    let af = a2.presetAccentColors;
    for (let [ag, ah] of Object.entries(af)) {
      this["#main"].style.setProperty("--" + ag + "-color", ah);
    }
  }
}
customElements.define("bx-changelogblock", ba);
class fa extends HTMLElement {
  static #C = ie` <template> <main id="main"> <x-buttons id="year-buttons" tracking="1"></x-buttons> <x-select id="sort-select"> <x-menu> <x-menuitem value="createdTime:desc" toggled> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↓</span> </x-label> </x-menuitem> <x-menuitem value="createdTime:asc"> <x-icon href="#time"></x-icon> <x-label> <x-message href="#created-time"></x-message> <span>↑</span> </x-label> </x-menuitem> </x-menu> </x-select> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Main
     */

    #main {
      display: flex;
      padding: 8px;
    }

    /* Year buttons */

    #year-buttons {
      margin-right: 8px;
    }

    /* Sort select */

    #sort-select {
      min-width: 1px;
      margin-left: auto;
    }
  `;
  get year() {
    let af = this["#year-buttons"].value;
    if (af === null) {
      return 2017;
    } else {
      return parseInt(af);
    }
  }
  set year(af) {
    this["#year-buttons"].value = "" + af;
  }
  get sort() {
    return this["#sort-select"].value;
  }
  set sort(af) {
    this["#sort-select"].value = af;
  }
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, fa.#S];
    this.#P.append(document.importNode(fa.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#year-buttons"].addEventListener("toggle", () => this.#go());
    this["#sort-select"].addEventListener("change", () => this.#Li());
    {
      let ag = "";
      for (let ah = at(); ah >= 2017; ah -= 1) {
        ag +=
          '<x-button value="' +
          ah +
          '" ' +
          (ah === 2017 ? " toggled" : "") +
          " condensed><x-label>" +
          ah +
          "</x-label></x-button>";
      }
      this["#year-buttons"].innerHTML = ag;
    }
  }
  #go() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "year",
      })
    );
  }
  #Li() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "sort",
      })
    );
  }
}
customElements.define("bx-changelogfilterblock", fa);
class wa extends bs {
  static observedAttributes = ["version", "minversion"];
  static v = ie` <template> <x-box> <h3 id="heading"><x-message href="#version"></x-message></h3> <x-box id="version-inputs"> <x-numberinput id="major-version-input" value="0" min="0" size="small" condensed required> <x-stepper></x-stepper> </x-numberinput> <span class="dot">.</span> <x-numberinput id="minor-version-input" value="0" min="0" size="small" condensed required> <x-stepper></x-stepper> </x-numberinput> <span class="dot">.</span> <x-numberinput id="patch-version-input" value="0" min="0" size="small" condensed required> <x-stepper></x-stepper> </x-numberinput> </x-box> </x-box> <h4 id="subheading"><x-message href="#version.pending"></x-message></h4> <div id="changes"> <ul id="changes-list"></ul> <div id="drop-indicator" hidden> <div id="drop-indicator-circle"></div> </div> </div> <x-button id="add-button" condensed> <x-icon href="#plus"></x-icon> <x-label><x-message href="#add-change"></x-message></x-label> </x-button> </template>
  `;
  static k = ie` <template> <x-button id="save-button"> <x-label><x-message href="#save"></x-message></x-label> </x-button> <x-button id="publish-button" toggled> <x-label><x-message href="#publish"></x-message></x-label> </x-button> </template>
  `;
  static #bo = ie` <template> <li> <x-box> <x-select class="type-select"> <x-menu> <x-menuitem value="added"> <x-label><x-message href="#changelog.added"></x-message></x-label> </x-menuitem> <x-menuitem value="improved"> <x-label><x-message href="#changelog.improved"></x-message></x-label> </x-menuitem> <x-menuitem value="fixed"> <x-label><x-message href="#changelog.fixed"></x-message></x-label> </x-menuitem> <x-menuitem value="removed"> <x-label><x-message href="#changelog.removed"></x-message></x-label> </x-menuitem> </x-menu> </x-select> <x-input class="description-input"></x-input> <x-button class="remove-button" condensed> <x-icon href="#trash"></x-icon> </x-button> <x-button class="reorder-button" skin="flat" tracking="0" condensed> <x-icon href="#reorder"></x-icon> </x-button> </x-box> </li> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%}#main{padding:16px 20px}h3{margin:0;font-weight:700;font-size:18px;line-height:1.2}h4{margin:2px 0 0;opacity:.6;font-size:13px}#version-inputs{margin-left:6px;font-weight:700}#version-inputs x-numberinput{min-width:52px;text-align:center}#version-inputs .dot{padding:0 2px;font-size:18px;font-weight:700}#changes{position:relative}#changes-list{margin:8px 0 0 0}#changes-list li{padding:5px 0}#changes-list x-select{min-width:120px}#changes-list x-input{max-width:none;flex:1;margin-left:6px}#changes-list .remove-button{margin-left:6px}#changes-list .reorder-button{margin-left:6px}#changes-list .reorder-button x-icon{width:20px;height:20px}#drop-indicator{position:absolute;z-index:100;top:0;width:100%;height:2px;margin-left:0;display:flex;align-items:center;color:var(--dark-accent-color);background:currentColor;box-shadow:0 0 0 1px rgba(255,255,255,.7);pointer-events:none}#drop-indicator[hidden]{display:none}#drop-indicator-circle{position:absolute;right:-6px;width:8px;height:8px;box-sizing:border-box;border:2px solid currentColor;background:#fff;border-radius:99px;box-shadow:0 0 0 1px rgba(255,255,255,.7)}#add-button{margin:15px auto 0;width:calc(100% - 19px);margin-left:19px}#add-button x-icon{width:13px;height:13px}#save-button{margin-left:auto}`;
  get version() {
    if (this.hasAttribute("version")) {
      return this.getAttribute("version");
    } else {
      return "0.0.0";
    }
  }
  set version(af) {
    this.setAttribute("version", af);
  }
  get minVersion() {
    if (this.hasAttribute("minversion")) {
      return this.getAttribute("minversion");
    } else {
      return "0.0.0";
    }
  }
  set minVersion(af) {
    this.setAttribute("minversion", af);
  }
  get changes() {
    return this.#fo;
  }
  set changes(af) {
    this.#fo = af;
    this.#wo();
    this.#vo();
  }
  #fo = [];
  constructor() {
    super();
    this["#changes-list"].addEventListener("pointerdown", (af) => this.#yo(af));
    this["#changes-list"].addEventListener("click", (af) => this.#ko(af));
    this["#changes-list"].addEventListener("change", (af) => this.#Co(af));
    this["#add-button"].addEventListener("click", () => this.#So());
    this["#version-inputs"].addEventListener("changeend", (af) => this.#To(af));
    this["#save-button"].addEventListener("click", () => this.#$o());
    this["#publish-button"].addEventListener("click", () => this.#Po());
  }
  connectedCallback() {
    super.connectedCallback();
    this.#Eo();
    this.#wo();
    this.#vo();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && (af === "version" || af === "minversion")) {
      this.#Eo();
      this.#vo();
    }
  }
  clear() {
    super.clear();
  }
  #To(af) {
    af.target;
    let ag = this["#major-version-input"].value;
    let ah = this["#minor-version-input"].value;
    let aj = this["#patch-version-input"].value;
    this.version = ag + "." + ah + "." + aj;
    this.p = true;
    this.#vo();
  }
  #yo(af) {
    let ag = af.target.closest("x-button");
    if (ag && ag.matches(".reorder-button")) {
      this.#Lo(af);
    }
  }
  #ko(af) {
    let ag = af.target.closest("x-button");
    if (ag && ag.matches(".remove-button")) {
      this.#Uo(af);
    }
  }
  #Co(af) {
    let ag = af.target.closest("x-input, x-select");
    if (ag) {
      if (ag.matches(".type-select")) {
        this.#Do(af);
      } else if (ag.matches(".description-input")) {
        this.#zo(af);
      }
    }
  }
  #Lo(af) {
    let ag;
    let ah;
    let aj = af.target.closest("li");
    let ak = null;
    let al = null;
    window.addEventListener(
      "pointermove",
      (ag = (am) => {
        let an;
        let ap = this.shadowRoot.elementFromPoint(am.clientX, am.clientY);
        let aq = ap ? ap.closest("li") : null;
        if (aq && aq !== aj) {
          ak = aq;
          an = aq.getBoundingClientRect();
          al = am.clientY < an.y + an.height / 2 ? "before" : "after";
          if (
            (al === "before" && ak === aj?.nextElementSibling) ||
            (al === "after" && ak === aj?.previousElementSibling)
          ) {
            al = null;
          }
        }
        if (al && an) {
          let ar = ak.offsetTop;
          if (al === "after") {
            ar += an.height;
          }
          if (ar < 1) {
            ar = 1;
          }
          this["#drop-indicator"].hidden = false;
          this["#drop-indicator"].style.top = ar - 1 + "px";
        } else {
          this["#drop-indicator"].hidden = true;
        }
      })
    );
    window.addEventListener(
      "pointerup",
      (ah = () => {
        window.removeEventListener("pointermove", ag);
        window.removeEventListener("pointerup", ah);
        if (ak && al) {
          let am = ii(aj);
          let an = ii(ak);
          let ap = this.#fo[am];
          this.#fo[am] = null;
          this.#fo.splice(al === "before" ? an : an + 1, 0, ap);
          this.#fo = this.#fo.filter((aq) => aq !== null);
          this.p = true;
          this.#wo();
          this.#vo();
        }
        this["#drop-indicator"].hidden = true;
      })
    );
  }
  #Uo(af) {
    let ag = af.target.closest("li");
    let ah = ii(ag);
    this.#fo = this.#fo.filter((aj, ak) => ak !== ah);
    this.p = true;
    this.#wo();
    this.#vo();
  }
  #Do(af) {
    let ag = af.target.closest("li");
    let ah = af.target;
    let aj = ii(ag);
    this.#fo[aj].type = ah.value;
    this.p = true;
    this.#vo();
  }
  #zo(af) {
    let ag = af.target.closest("li");
    let ah = af.target;
    let aj = ii(ag);
    this.#fo[aj].description = ah.value;
    this.p = true;
    this.#vo();
  }
  #So() {
    this.#fo.push({
      type: "added",
      description: "",
    });
    this.p = true;
    this.#wo();
    this.#vo();
  }
  #$o() {
    this.dispatchEvent(new CustomEvent("save"));
  }
  #Po() {
    this.dispatchEvent(new CustomEvent("publish"));
  }
  #Eo() {
    let [af, ag, ah] = this.version.split(".").map((am) => parseInt(am));
    let [aj, ak, al] = this.minVersion.split(".").map((am) => parseInt(am));
    this["#major-version-input"].value = af;
    this["#major-version-input"].min = aj;
    this["#minor-version-input"].value = ag;
    this["#minor-version-input"].min = af === aj ? ak : 0;
    if (this["#minor-version-input"].value < this["#minor-version-input"].min) {
      this["#minor-version-input"].value = this["#minor-version-input"].min;
    }
    this["#patch-version-input"].value = ah;
    this["#patch-version-input"].min = af === aj && ag === ak ? al : 0;
    if (this["#patch-version-input"].value < this["#patch-version-input"].min) {
      this["#patch-version-input"].value = this["#patch-version-input"].min;
    }
  }
  #wo() {
    this["#changes-list"].innerHTML = "";
    for (let af of this.#fo) {
      let ag = document.importNode(wa.#bo.content, true);
      ag.querySelector("x-select").value = af.type;
      ag.querySelector("x-input").value = af.description;
      this["#changes-list"].append(ag);
    }
  }
  #vo() {
    this["#save-button"].disabled = this.p === false;
    if (
      this.#fo.length === 0 ||
      this.#fo.find((af) => af.description.trim().length === 0)
    ) {
      this["#publish-button"].disabled = true;
    } else {
      this["#publish-button"].disabled = false;
    }
  }
}
customElements.define("bx-changelogform", wa);
class va extends ns {
  static _shadowTemplate = ie` <template> <div id="header"> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <x-box id="page-buttons"> <x-button id="print-button" condensed hidden> <x-icon href="#print"></x-icon> <x-tooltip><x-message href="#print"></x-message></x-tooltip> </x-button> <x-button id="watch-button" condensed hidden> <x-icon href="#watch"></x-icon> <x-tooltip><x-message href="#watch"></x-message></x-tooltip> </x-button> </x-box> </div> <bx-changelogfilterblock id="filter-block"></bx-changelogfilterblock> <x-card id="pending-version-card" hidden> <bx-changelogform id="changelog-form"></bx-changelogform> </x-card> <main id="main"> <article> <div id="items"></div> <bx-placeholderblock id="placeholder" hidden></bx-placeholderblock> </article> </main> </template>
  `;
  static _shadowStyleSheet = se`#header{display:flex;align-items:start;width:100%}#page-buttons{margin-left:auto}#page-buttons x-button{margin-left:8px}x-card{margin:14px 0}x-card:last-child{margin-bottom:0}#placeholder{margin:12px 0}`;
  get canonicalURL() {
    let af = new URLSearchParams(location.search);
    let ag = af.has("year") === false ? at() : af.get("year");
    return location.origin + "/changelog?year=" + ag;
  }
  #Xt;
  #at;
  #ys;
  constructor() {
    super();
    this["#print-button"].addEventListener("click", () => this.#Mo());
    this["#watch-button"].addEventListener("click", () => this.#Js());
    this["#filter-block"].addEventListener("change", (af) => this.#Cs(af));
    this["#changelog-form"].addEventListener("save", () => this.#Ao());
    this["#changelog-form"].addEventListener("publish", () => this.#Bo());
  }
  async connectedCallback() {
    super.connectedCallback();
    a2.addEventListener("localeschange", (this.#Xt = () => this.#si()));
    Bi.auth.addEventListener("userchange", (this.#at = () => this.#Ro()));
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    this.#Io();
    this.#Es();
    await this.#Fo();
    this.u();
    {
      let af = new URLSearchParams(location.search);
      if (af.get("print") === "ip-box") {
        let ag = af.has("year") ? parseInt(af.get("year")) : at();
        this.#No(ag);
      }
    }
  }
  disconnectedCallback() {
    a2.removeEventListener("localeschange", this.#Xt);
    Bi.auth.removeEventListener("userchange", this.#at);
    this.o.removeEventListener("locationchange", this.#ys);
  }
  #No(af, ag = true) {
    return new Promise(async (ah) => {
      let [aj, ak] = await Bi.index.searchPosts({
        query: "",
        type: "changelog",
        locale: "pl",
        createdYear: af,
        sort: "createdTime:asc",
        page: 1,
        perPage: 250,
      });
      aj = aj.filter((ap) => ap.id !== "changelog-x.y.z");
      let al = "";
      for (let ap = 0; ap < aj.length; ap += 1) {
        let aq = aj[ap];
        let ar = aj[ap - 1];
        let { version, createdTime, changes } = aq;
        let ax = "";
        let ay = new Date(createdTime).toISOString().split("T")[0];
        let az = ar
          ? new Date(ar.createdTime).toISOString().split("T")[0]
          : af + "-01-01";
        for (let aA of changes) {
          let aB;
          if (aA.type === "added") {
            aB = "Dodano";
          } else if (aA.type === "improved") {
            aB = "Poprawiono";
          } else if (aA.type === "fixed") {
            aB = "Naprawiono";
          } else if (aA.type === "removed") {
            aB = "Usunięto";
          }
          ax +=
            "<li><strong>[" + aB + "]</strong> " + Ce(aA.description) + "</li>";
        }
        al +=
          "\n          <section>\n            <h2>Wersja " +
          version +
          " <span>(" +
          az +
          " - " +
          ay +
          ")</span></h2>\n            <ul>" +
          ax +
          "</ul>\n          </section>\n        ";
      }
      let am =
        "\n        <html>\n          <head>\n            <title>Ewidencja prac - KPWI 1/" +
        af +
        "</title>\n            <style>\n              body {\n                margin: 30px;\n                font-family: sans-serif;\n              }\n\n              @media print {\n                section {\n                  page-break-inside: avoid;\n                }\n              }\n\n              section + section {\n                margin-top: 20px;\n              }\n\n              h1 {\n                text-align: center;\n                font-size: 30px;\n              }\n\n              h2 {\n                font-size: 20px;\n                font-weight: 700;\n              }\n              h2 span {\n                opacity: 0.6;\n              }\n\n              hr {\n                margin: 30px 0;\n              }\n            </style>\n          </head>\n          <body>\n            <h1>Plan i Harmonogram Prac Dla Projektu Badawczo-Rozwojowego Boxy SVG (KPWI 1/" +
        af +
        ")</h1>\n            <p>W tym dokumencie zastosowano następujące oznaczenia:</p>\n            <ul>\n              <li><strong>[Dodano]</strong> - Dodanie nowej funkcjonalności do programu</li>\n              <li><strong>[Poprawiono]</strong> - Poprawa działania w istniejącej funkcjonalności programu</li>\n              <li><strong>[Naprawiono]</strong> - Naprawa błędu w istniejącej funkcjonalności programu</li>\n              <li><strong>[Usunięto]</strong> - Usunięcie istniejącej funkcjonalności programu</li>\n            </ul>\n            <p>W nawiasach podana jest data rozpoczęcia oraz zakończenia prac nad daną wersją programu.</p>\n            <p>O ile nie napisano inaczej, funkcjonalność zaplanowa dla danej wersji programu została\n               zaimplementowana oraz wdrożona zgodnie z planem.</p>\n            <hr/>\n            " +
        al +
        "\n          </body>\n        </html>\n      ";
      let an = 0;
      if (ag) {
        an = await this.o.openMessageDialog({
          title: "Wygenerowano dokument",
          detail:
            '"Plan i Harmonogram Prac Dla Projektu Badawczo-Rozwojowego Boxy SVG (KPWI 1/' +
            af +
            ')" jest\n          gotowy do wydruku.',
          buttons: ["Drukuj", "Zamknij"],
        });
      }
      if (an === 0) {
        let aC = window.open("Ewidencja prac - KPWI 1/" + af, "PRINT");
        aC.document.write(am);
        aC.print();
      }
      ah();
    });
  }
  #si() {
    this.#Fo();
  }
  #Ro() {
    this.#Io();
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname === "/changelog") {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      let am = _i(ak, al);
      {
        let an = ["year", "sort"];
        if (am.find((ap) => an.includes(ap)) !== undefined) {
          this.#Es();
          await this.#Fo();
          if (method === "pop") {
            this.o.restoreScrollOffset();
          }
        }
      }
    }
  }
  #Mo() {
    let af = new URLSearchParams(location.search);
    let ag = af.has("year") ? parseInt(af.get("year")) : at();
    this.#No(ag, false);
  }
  async #Js() {
    let af = this["#watch-button"].toggled === true ? "unwatch" : "watch";
    let ag = this["#watch-button"].toggled;
    this["#watch-button"].disabled = true;
    this["#watch-button"].toggled = af === "watch";
    let ah = null;
    try {
      await Bi.functions.postMessage(
        af === "watch" ? "watchPost" : "unwatchPost",
        "changelog-x.y.z"
      );
    } catch (aj) {
      ah = aj;
    }
    if (ah) {
      await this.o.openMessageDialog({
        title: {
          href: "#internal-server-error",
        },
        detail: bi(ah),
        buttons: [
          {
            href: "#close",
          },
        ],
      });
      this["#watch-button"].toggled = ag;
    }
    this["#watch-button"].disabled = false;
  }
  #Cs(af) {
    let ag = new URL(location.href);
    let ah = new URLSearchParams(location.search);
    if (this["#filter-block"].year === at()) {
      ah.delete("year");
    } else {
      ah.set("year", this["#filter-block"].year);
    }
    if (this["#filter-block"].sort === "createdTime:desc") {
      ah.delete("sort");
    } else if (this["#filter-block"].sort === "createdTime:asc") {
      ah.set("sort", "created-asc");
    }
    ag.search = ah.toString();
    this.o.navigate(ag.href);
  }
  async #Ao() {
    this["#changelog-form"].throbber = true;
    let { version, changes } = this["#changelog-form"];
    let ah = await Bi.database.getDocument("posts", "changelog-x.y.z");
    ah.version = version;
    ah.changes = changes;
    await Bi.functions.postMessage("editPost", {
      id: "changelog-x.y.z",
      version: version,
      changes: changes,
    });
    this["#changelog-form"].throbber = false;
  }
  async #Bo() {
    this["#changelog-form"].throbber = true;
    let { version, changes } = this["#changelog-form"];
    await Bi.functions.postMessage("newPost", {
      type: "changelog",
      version: version,
      changes: changes,
    });
    await Bi.functions.postMessage("editPost", {
      id: "changelog-x.y.z",
      version: "x.y.z",
      changes: [],
    });
    await Bi.index.whenPostCreated("changelog-" + version, a2.locale);
    this["#changelog-form"].throbber = false;
    this.#Fo();
  }
  async #Io() {
    if (Bi.auth.userID !== null && Bi.auth.userEmailVerified === true) {
      let af = await Bi.index.getPost("changelog-x.y.z", "en");
      this["#print-button"].hidden = !Bi.auth.isModerator;
      this["#watch-button"].hidden = false;
      this["#watch-button"].toggled = af.watchers.includes(Bi.auth.userID);
    } else {
      this["#print-button"].hidden = true;
      this["#watch-button"].hidden = true;
    }
  }
  #Es() {
    let af = new URLSearchParams(location.search);
    let ag = af.get("year");
    let ah = af.get("sort");
    this["#filter-block"].year = ag === null ? at() : parseInt(ag);
    this["#filter-block"].sort =
      ah === "created-asc" ? "createdTime:asc" : "createdTime:desc";
  }
  #Fo() {
    return new Promise(async (af) => {
      let ag = this["#filter-block"].year;
      let ah = this["#filter-block"].sort;
      let [aj, ak] = await Bi.index.searchPosts({
        query: "",
        type: "changelog",
        locale: a2.locale,
        createdYear: ag,
        sort: ah,
        page: 1,
        perPage: 250,
      });
      let al = aj.filter((am) => am.id !== "changelog-x.y.z");
      if (al.length === 0) {
        this["#placeholder"].hidden = false;
        this["#placeholder"].description = "#no-versions-published-this-year";
        this["#items"].innerHTML = "";
      } else {
        this["#placeholder"].hidden = true;
        this["#items"].innerHTML = "";
        for (let am of al) {
          let an = document.createElement("x-card");
          let ap = document.createElement("bx-changelogblock");
          an.setAttribute("id", "v" + am.version);
          ap.id = am.id;
          ap.data = am;
          an.append(ap);
          this["#items"].append(an);
        }
      }
      await Bi.auth.whenReady;
      if (ag === at() && Bi.auth.isModerator) {
        let [[aq]] = await Bi.index.searchPosts({
          query: "",
          type: "changelog",
          locale: "en",
          sort: "createdTime:desc",
          page: 1,
          perPage: 1,
        });
        let ar = await Bi.index.getPost("changelog-x.y.z", "en");
        let [au, av, aw] = aq.version.split(".").map((ax) => parseInt(ax));
        this["#pending-version-card"].hidden = false;
        this["#changelog-form"].clear();
        if (ar.version === "x.y.z") {
          this["#changelog-form"].version = au + "." + av + "." + (aw + 1);
          this["#changelog-form"].minVersion = au + "." + av + "." + (aw + 1);
        } else {
          this["#changelog-form"].version = ar.version;
          this["#changelog-form"].minVersion = au + "." + av + "." + (aw + 1);
        }
        this["#changelog-form"].changes = ar.changes;
      } else {
        this["#pending-version-card"].hidden = true;
      }
      af();
    });
  }
}
customElements.define("bx-changelogpage", va);
class ya {
  #Oo = 0;
  #_o = {};
  #qo = {};
  #jo;
  constructor(af) {
    this.#jo = af;
    window.addEventListener("message", (ag) => this.#Vo(ag));
  }
  postMessage(af, ag = null, ah) {
    let aj = {
      channel: "request",
      id: this.#Oo++,
      name: af,
      arg: ag,
    };
    if (ah) {
      this.#qo[aj.id] = ah;
    }
    this.#jo.contentWindow.postMessage(aj);
  }
  addMessageListener(af, ag) {
    this.#_o[af] ||= [];
    this.#_o[af].push(ag);
  }
  removeMessageListener(af, ag) {
    this.#_o[af] &&= this.#_o[af].filter((ah) => ah !== ag);
  }
  #Vo(af) {
    if (af.source === this.#jo.contentWindow) {
      let ag = af.data;
      if (ag.channel === "request") {
        if (this.#_o[ag.name]) {
          this.#_o[ag.name].forEach((ah) => {
            ah(ag.arg, (aj) => {
              let ak = {
                channel: "response",
                id: ag.id,
                name: ag.name,
                arg: aj,
              };
              this.#jo.contentWindow.postMessage(ak);
            });
          });
        }
      } else if (ag.channel === "response" && this.#qo[ag.id]) {
        this.#qo[ag.id](ag.arg);
        delete this.#qo[ag.id];
      }
    }
  }
}
class ka extends HTMLElement {
  static observedAttributes = ["name", "locale", "theme", "accent"];
  static #C = ie` <template> <iframe src="/embedded-web-app.html" id="iframe" sandbox="allow-scripts allow-modals allow-same-origin" allow="clipboard-read; clipboard-write; local-fonts; ch-prefers-color-scheme" loading="lazy" hidden> </iframe> </template>
  `;
  static #S = se`
    :host {
      display: block;
      width: 100%;
      min-height: 600px;
      box-sizing: border-box;
      border: 1px solid #999999;
      contain: strict;
    }
    :host(:focus) {
      outline: none;
    }

    :host([theme="fluent"])         { border-color: #999999; }
    :host([theme="fluent-dark"])    { border-color: #666666; }
    :host([theme="cupertino"])      { border-color: #b0b0b0; }
    :host([theme="cupertino-dark"]) { border-color: #747474; }
    :host([theme="adwaita"])        { border-color: #d1d1d1; }
    :host([theme="adwaita-dark"])   { border-color: #525252; }

    #iframe {
      display: block;
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      min-height: inherit;
      margin: 0;
      padding: 0;
      border: none;
      user-select: none;
      contain: strict;
      -webkit-user-select: none;
    }
    #iframe[hidden] {
      visibility: hidden;
    }
  `;
  get name() {
    return this.getAttribute("name");
  }
  set name(af) {
    if (af === null) {
      this.removeAttribute("name");
    } else {
      this.setAttribute("name", af);
    }
  }
  get locale() {
    if (this.hasAttribute("locale")) {
      return this.getAttribute("locale");
    } else {
      return "en";
    }
  }
  set locale(af) {
    this.setAttribute("locale", af);
  }
  get theme() {
    if (this.hasAttribute("theme")) {
      return this.getAttribute("theme");
    } else {
      return "fluent";
    }
  }
  set theme(af) {
    this.setAttribute("theme", af);
  }
  get accent() {
    if (this.hasAttribute("accent")) {
      return this.getAttribute("accent");
    } else {
      return "blue";
    }
  }
  set accent(af) {
    this.setAttribute("accent", af);
  }
  get #Go() {
    return new Promise((af) => {
      if (this.#vi === null) {
        af();
      } else {
        this.#vi.push(af);
      }
    });
  }
  get #fa() {
    return this.#vi === null;
  }
  #P;
  #Ho;
  #vi = [];
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [ka.#S];
    this.#P.append(document.importNode(ka.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.setAttribute("tabindex", "0");
    this.#Ho = new ya(this["#iframe"]);
    this.#Ho.addMessageListener("beforeready", (ag, ah) => {
      let { name, locale, theme, accent } = this;
      ah({
        name: name,
        locale: locale,
        theme: theme,
        accent: accent,
      });
    });
    this.#Ho.addMessageListener("ready", () => {
      if (this.#vi !== null) {
        for (let ag of this.#vi) {
          ag();
        }
        this.#vi = null;
      }
      this["#iframe"].hidden = false;
    });
    this.#Ho.addMessageListener("command", (ag, ah) => {
      let aj = new CustomEvent("command", {
        detail: ag,
        cancelable: true,
      });
      this.dispatchEvent(aj);
      ah(aj.defaultPrevented);
    });
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && this.#fa !== false) {
      if (af === "name") {
        this.#Ho.postMessage("setName", this.name);
      } else if (af === "locale") {
        this.#Ho.postMessage("setLocale", this.locale);
      } else if (af === "theme") {
        this.#Ho.postMessage("setTheme", this.theme);
      } else if (af === "accent") {
        this.#Ho.postMessage("setAccent", this.accent);
      }
    }
  }
  getSVG() {
    return new Promise(async (af) => {
      await this.#Go;
      this.#Ho.postMessage("getSVG", null, (ag) => {
        af(ag);
      });
    });
  }
  setSVG(af) {
    return new Promise(async (ag) => {
      await this.#Go;
      this.#Ho.postMessage("setSVG", af, () => {
        ag();
      });
    });
  }
}
customElements.define("boxy-svg", ka);
class Ca extends HTMLElement {
  static #C = ie` <template> <main id="main"> <div id="row-1" class="row"> <section id="name-section"> <h4><x-message href="#name" autocapitalize></x-message></h4> <x-input id="name-input"> <x-label>Boxy SVG</x-label> </x-input> </section> <section id="locale-section"> <h4><x-message href="#language" autocapitalize></x-message></h4> <x-select id="locale-select"> <x-menu id="locale-select-menu"></x-menu> </x-select> </section> </div> <div id="row-2" class="row"> <section id="theme-section"> <h4><x-message href="#theme" autocapitalize></x-message></h4> <x-select id="theme-select"> <x-menu> <x-menuitem value="fluent"> <x-icon href="#windows"></x-icon> <x-label>Fluent</x-label> </x-menuitem> <x-menuitem value="fluent-dark"> <x-icon href="#windows"></x-icon> <x-label>Fluent Dark</x-label> </x-menuitem> <hr> <x-menuitem value="cupertino"> <x-icon href="#macos"></x-icon> <x-label>Cupertino</x-label> </x-menuitem> <x-menuitem value="cupertino-dark"> <x-icon href="#macos"></x-icon> <x-label>Cupertino Dark</x-label> </x-menuitem> <hr> <x-menuitem value="adwaita"> <x-icon href="#gnome"></x-icon> <x-label>Adwaita</x-label> </x-menuitem> <x-menuitem value="adwaita-dark"> <x-icon href="#gnome"></x-icon> <x-label>Adwaita Dark</x-label> </x-menuitem> </x-menu> </x-select> </section> <section id="accent-color-section"> <h4><x-message href="#accent-color" autocapitalize></x-message></h4> <x-box> <x-select id="accent-preset-select"> <x-menu id="accent-preset-menu"></x-menu> </x-select> <x-colorselect id="accent-color-select" spaces="srgb"></x-colorselect> </x-box> </section> </div> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
    }

    .row {
      display: flex;
    }
    .row + .row {
      margin-top: 8px;
    }

    /* Name */

    #name-input {
      min-width: 160px;
    }

    /* Locale */

    #locale-section {
      margin-left: 16px;
    }

    #locale-select {
      min-width: 130px;
    }

    /* Theme */

    #theme-select {
      min-width: 160px;
    }

    /* Accent color */

    #accent-color-section {
      margin-left: 16px;
    }

    #accent-color-select {
      margin-left: 4px;
    }

    #accent-preset-select {
      min-width: 130px;
    }
  `;
  get name() {
    return this.#Wo;
  }
  get locale() {
    return this.#Ko;
  }
  get theme() {
    return this.#Zo;
  }
  get accentColor() {
    return this.#Yo;
  }
  #Wo = null;
  #Ko = "en";
  #Zo = "fluent";
  #Yo = "blue";
  #Xo = {};
  #T;
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ca.#S];
    this.#P.append(document.importNode(Ca.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#name-input"].addEventListener("input", () => this.#_e());
    this["#locale-select"].addEventListener("change", () => this.#_());
    this["#theme-select"].addEventListener("change", () => this.#q());
    this["#accent-preset-select"].addEventListener("change", () => this.#Jo());
    this["#accent-color-select"].addEventListener("change", () => this.#Qo());
    {
      let ag = "";
      for (let ah of He) {
        ag +=
          '\n          <x-menuitem value="' +
          ah +
          '">\n            <x-label>' +
          Pe(ah) +
          "</x-label>\n          </x-menuitem>\n        ";
      }
      this["#locale-select-menu"].innerHTML = ag;
    }
    {
      let aj = "";
      for (let [ak, al] of Object.entries(a2.presetAccentColors)) {
        aj +=
          '\n          <x-menuitem value="' +
          ak +
          '">\n            <x-swatch value="' +
          al +
          '"></x-swatch>\n            <x-label><x-message href="#color.' +
          ak +
          '" autocapitalize></x-message></x-label>\n          </x-menuitem>\n        ';
      }
      aj +=
        '\n        <hr/>\n        <x-menuitem value="custom">\n          <x-icon href="#color-wheel"></x-icon>\n          <x-label>Custom</x-label>\n        </x-menuitem>\n      ';
      this["#accent-preset-menu"].innerHTML = aj;
    }
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#A();
  }
  #_e() {
    let af = this["#name-input"].value;
    this.#Wo = af === "" ? null : af;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "name",
      })
    );
    this.#A();
  }
  #_() {
    this.#Ko = this["#locale-select"].value;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "locale",
      })
    );
    this.#A();
  }
  #q() {
    this.#Zo = this["#theme-select"].value;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "theme",
      })
    );
    this.#A();
  }
  #Jo() {
    let af = this["#accent-preset-select"].value;
    this.#Yo = af === "custom" ? a2.presetAccentColors[a2.accentColor] : af;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "accentColor",
      })
    );
    this.#A();
  }
  #Qo() {
    this.#Yo = this["#accent-color-select"].value;
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "accentColor",
      })
    );
    this.#A();
  }
  #en(af) {
    return new Promise(async (ag) => {
      if (!this.#Xo[af]) {
        let ah = {};
        let aj = await (
          await fetch("../../libs/xel/themes/" + this.#Zo + ".css")
        ).text();
        let ak = new CSSStyleSheet();
        ak.replaceSync(aj);
        for (let al of ak.cssRules) {
          if (al.type === 1 && al.selectorText === "body") {
            let am = al.style.getPropertyValue("--preset-accent-colors");
            if (am !== "") {
              let an = am
                .split(",")
                .map((ap) => ap.trim())
                .map((ap) => ap.split(" "));
              ah = Object.fromEntries(an);
              break;
            }
          }
        }
        this.#Xo[af] = ah;
      }
      ag(this.#Xo[af]);
    });
  }
  async #A() {
    this["#name-input"].value = this.#Wo === null ? "" : this.#Wo;
    this["#locale-select"].value = He.includes(this.#Ko) ? this.#Ko : "en";
    this["#theme-select"].value = this.#Zo;
    {
      let af = await this.#en(this.#Zo);
      if (af[this.#Yo]) {
        this["#accent-preset-select"].value = this.#Yo;
        this["#accent-color-select"].value = af[this.#Yo];
        for (let ag of this["#accent-preset-menu"].children) {
          let ah = ag.querySelector("x-swatch");
          if (ah) {
            ah.value = af[ag.value];
          }
        }
      } else {
        this["#accent-preset-select"].value = "custom";
        this["#accent-color-select"].value = this.#Yo;
      }
      for (let aj of [
        ...this["#accent-color-select"].querySelectorAll("x-swatch"),
      ]) {
        let ak = aj.parentElement;
        aj.value = a2.presetAccentColors[ak.value];
      }
    }
  }
}
customElements.define("bx-embedsettings", Ca);
class Sa extends ns {
  static _shadowTemplate = ie` <template> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <main id="main"> <article> <x-card id="intro-card"> <main> <h2>Embed Boxy SVG</h2> <p>With the <strong>Boxy SVG Embedded</strong> component you can add a full blown vector graphics editor to your web site or web app with just several lines of code.</p> <p>This component is currently in beta stage and to use it in production you must get explicit permission from us (please use the <a href="/embed?dialog=contact">contact form</a>). Stable version is going to be released in 2024 with per-domain pricing starting from <strong>999 USD / year</strong>.</p> </main> </x-card> <x-card id="setup-card"> <main> <h2>Setup</h2> <section id="settings-section"> <h4>Settings</h4> <bx-embedsettings id="settings"></bx-embedsettings> </section> <hr> <section id="code-section"> <h4>Code</h4> <pre><code id="code"></code></pre> </section> <hr> <section id="preview-section"> <h4>Preview</h4> <boxy-svg id="editor"></boxy-svg> </section> </main> </x-card> <x-card id="api-card"> <main> <h2>API</h2> <h3>Element <code>&lt;boxy-svg&gt;</code></h3> <h4>Properties</h4> <ul> <li> <p> <code> <strong>name</strong><span class="type">: string</span> </code> </p> <p>App name shown in the top left corner and by the "About" dialog.</p> <p>Default: <code>"Boxy SVG"</code>.</p> </li> <li> <p> <code> <strong>locale</strong><span class="type">: "de" | "en" | "es" | "pl" </span></code> </p> <p>Language to be used by the app UI.</p> <p>Default: <code>"en"</code> (English).</p> </li> <li> <p> <code> <strong>theme</strong><span class="type">: "fluent" | "fluent-dark" | "cupertino" | "cupertino-dark" | "adwaita" | "adwaita-dark" </span></code> </p> <p>Theme to be used by the app UI.</p> <p>Default: <code>"fluent"</code> (Microsoft Fluent Design System).</p> </li> <li> <p> <code> <strong>accent</strong><span class="type">: "blue" | "purple" | "pink" | "red" | "orange" | "yellow" | "green" | "graphite" | string </span></code> </p> <p>Accent color to be used by the app UI. You can use either one of the preset names or a hex color code such as <code>"#bada55"</code>.</p> <p>Default: <code>"blue"</code>.</p> </li> </ul> <hr> <h4>Methods</h4> <ul> <li> <p><code><strong>getSVG()</strong><span class="type">: Promise&lt;string&gt;</span></code></p> <p>Get the edited SVG document, in form of XML-serialized string.</p> </li> <li> <p><code><strong>setSVG(svg</strong><span class="type">: string</span><strong>)</strong><span class="type">: Promise</span></code></p> <p>Set the edited SVG document.</p> </li> </ul> <hr> <h4>Events</h4> <ul> <li> <code><strong>command</strong></code> <p>Fired when user triggers a command by clicking a menu item or by pressing a keyboard shortcut.</p> <p>Your can read the ID of the command that was triggered from <code>event.detail.id</code> and prevent the default action by calling <code>event.preventDefault()</code>.</p> </li> </ul> </main> </x-card> </article> </main> </template>
  `;
  static _shadowStyleSheet = se`article h2{font-size:30px;margin:0 0 20px 0}article h3{margin-top:16px}article h4{margin-top:16px;margin-bottom:6px}article hr{margin:20px 0}x-card:first-child{margin-top:16px}x-card:last-child{margin-bottom:0}#editor{margin-top:14px}code span.type{opacity:.5}#api-card h4{margin-top:20px}#api-card ul+h4{margin-top:30px}#api-card ul li{margin-top:24px}#api-card ul li:first-child{margin-top:20px}#api-card ul li p{margin-top:4px}`;
  get canonicalURL() {
    return location.origin + "/embed";
  }
  constructor() {
    super();
    this["#settings"].addEventListener("change", (af) => this.#tn(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#A();
    this.u();
  }
  #tn(af) {
    let ag = af.detail;
    this.#in();
    if (ag === "accentColor") {
      this["#editor"].accent = this["#settings"][ag];
    } else {
      this["#editor"][ag] = this["#settings"][ag];
    }
  }
  #A() {
    this.#in();
  }
  #in() {
    let { name, locale, theme, accentColor } = this["#settings"];
    let ak =
      '\n      <!-- Add to <head> -->\n      <script src="./embed.js" async></script>\n\n      <!-- Add to <body> -->\n      <boxy-svg' +
      (name === null ? "" : ' name="' + name + '"') +
      (locale === "en" ? "" : ' locale="' + locale + '"') +
      (theme === "fluent" ? "" : ' theme="' + theme + '"') +
      (accentColor === "blue" ? "" : ' accent="' + accentColor + '"') +
      "></boxy-svg>\n    ";
    this["#code"].innerHTML = ds(
      ((al) => {
        for (let am of al.split(/[\r\n]+/)) {
          if (am.trim().length) {
            if (/^(\s+)/.test(am)) {
              al = al.replace(new RegExp("^" + RegExp.$1, "gm"), "");
            }
            break;
          }
        }
        return al.trim();
      })(ak),
      "html"
    );
  }
}
customElements.define("bx-embedpage", Sa);
class Ta extends HTMLElement {
  static #C = ie` <template> <main id="main"> <x-input id="query-input" type="search"> <x-icon href="#search"></x-icon> <x-label><x-message href="#search" autocapitalize ellipsis></x-message></x-label> </x-input> <x-select id="category-select"> <x-menu> <x-menuitem value="all" toggled> <x-icon href="#logo-svg"></x-icon> <x-label><x-message href="#search.all" autocapitalize></x-message></x-label> </x-menuitem> <hr> <x-menuitem value="blog"> <x-icon href="#blog"></x-icon> <x-label><x-message href="#blog" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="ideas"> <x-icon href="#ideas"></x-icon> <x-label><x-message href="#ideas" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="bugs"> <x-icon href="#bugs"></x-icon> <x-label><x-message href="#bugs" autocapitalize></x-message></x-label> </x-menuitem> <x-menuitem value="questions"> <x-icon href="#questions"></x-icon> <x-label><x-message href="#questions" autocapitalize></x-message></x-label> </x-menuitem> </x-menu> </x-select> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
    }
    :host([hidden]) {
      display: none;
    }

    /**
     * Main
     */

    #main {
      display: flex;
      padding: 8px;
    }

    /* Query input */

    #query-input {
      flex: 1;
      min-width: 60px;
      max-width: none;
    }

    /* Category select */

    #category-select {
      width: 140px;
      margin-left: 8px;
    }
  `;
  get query() {
    return this["#query-input"].value;
  }
  set query(af) {
    this["#query-input"].value = af;
  }
  get category() {
    return this["#category-select"].value;
  }
  set category(af) {
    this["#category-select"].value = af;
  }
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ta.#S];
    this.#P.append(document.importNode(Ta.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#query-input"].addEventListener("change", () => this.#sn());
    this["#category-select"].addEventListener("change", () => this.#an());
  }
  #sn() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "query",
      })
    );
  }
  #an() {
    this.dispatchEvent(
      new CustomEvent("change", {
        detail: "category",
      })
    );
  }
}
customElements.define("bx-searchblock", Ta);
class $a extends ns {
  static _shadowTemplate = ie` <template> <main> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <bx-searchblock id="search-block"></bx-searchblock> <bx-placeholderblock id="placeholder-block" hidden></bx-placeholderblock> <div id="previews" hidden></div> <bx-pager id="pager" value="1" max="2" hidden></bx-pager> </main> </template>
  `;
  static _shadowStyleSheet = se`#placeholder-block{margin:14px 0}#previews{margin-top:14px}#previews>*{margin:12px 0}#previews>:first-child{margin-top:0}#pager{margin-top:24px}`;
  get canonicalURL() {
    return location.origin + "/search";
  }
  #ys;
  #sa = null;
  constructor() {
    super();
    this["#search-block"].addEventListener("change", (af) => this.#on());
  }
  async connectedCallback() {
    super.connectedCallback();
    this.o.addEventListener(
      "locationchange",
      (this.#ys = (af) => {
        this.#ii(af);
      })
    );
    await this.#A();
    this.u();
  }
  disconnectedCallback() {
    this.o.removeEventListener("locationchange", this.#ys);
  }
  async #ii(af) {
    let { fromLocation, toLocation, method } = af.detail;
    if (toLocation.pathname === "/search") {
      let ak = new URLSearchParams(fromLocation ? fromLocation.search : "");
      let al = new URLSearchParams(toLocation.search);
      let am = _i(ak, al);
      if (
        am.includes("query") ||
        am.includes("category") ||
        am.includes("page")
      ) {
        if (method === "push" || method === "replace") {
          this.o.resetScrollOffset();
        }
        await this.#A();
        if (method === "pop") {
          this.o.restoreScrollOffset();
        }
      }
    }
  }
  #on() {
    let { query, category } = this["#search-block"];
    let ah = new URL(location.href);
    let aj = new URLSearchParams(location.search);
    if (query === "") {
      aj.delete("query");
    } else {
      aj.set("query", query);
    }
    if (category === "all") {
      aj.delete("category");
    } else {
      aj.set("category", category);
    }
    aj.delete("page");
    ah.search = aj.toString();
    this.o.navigate(ah.href);
  }
  async #A() {
    if (this.#sa) {
      await this.#sa;
    }
    return (this.#sa = new Promise(async (af) => {
      let ag = new URLSearchParams(location.search);
      let ah = ag.get("query") || "";
      let aj = ag.get("category") || "all";
      let ak = parseInt(ag.get("page") || "1");
      if (CSS.highlights) {
        CSS.highlights.clear();
      }
      this["#search-block"].query = ag.get("query") || "";
      this["#search-block"].category = ag.get("category") || "all";
      if (ah === "") {
        this["#previews"].hidden = true;
        this["#placeholder-block"].hidden = false;
        this["#placeholder-block"].title = "↑↑↑";
        this["#placeholder-block"].description = "#enter-your-search-query";
        this["#pager"].hidden = true;
      } else {
        this["#previews"].hidden = false;
        let al = {
          query: ah,
          locale: a2.locale,
          page: ak,
        };
        if (aj === "blog") {
          al.type = "blog";
        } else if (aj === "ideas") {
          al.type = "idea";
        } else if (aj === "bugs") {
          al.threadType = "bug";
        } else if (aj === "questions") {
          al.threadType = "question";
        }
        let am = null;
        try {
          am = await Bi.index.searchPosts(al);
        } catch (an) {
          console.error(an);
        }
        if (am === null) {
          this["#previews"].innerHTML = "";
          this["#placeholder-block"].hidden = false;
          this["#placeholder-block"].title = "Failed to connect";
          this["#placeholder-block"].description = "Please try again later.";
          this["#pager"].hidden = true;
        } else {
          let [ap, aq] = am;
          if (ap.length === 0) {
            this["#placeholder-block"].hidden = false;
            this["#placeholder-block"].title = "#no-results";
            this["#placeholder-block"].description =
              "#try-redefining-search-criteria";
            this["#pager"].hidden = true;
          } else {
            this["#placeholder-block"].hidden = true;
            this["#pager"].hidden = false;
            this["#pager"].max = aq;
            this["#pager"].value = ak;
          }
          this["#previews"].innerHTML = "";
          for (let ar of ap) {
            let au = null;
            if (ar.type === "blog") {
              au = document.createElement("bx-blogblock");
              au.setAttribute("condensed", "");
            } else if (ar.type === "idea") {
              au = document.createElement("bx-ideablock");
              au.setAttribute("condensed", "");
            } else if (ar.type === "bug") {
              au = document.createElement("bx-bugblock");
              au.setAttribute("condensed", "");
            } else if (ar.type === "question") {
              au = document.createElement("bx-questionblock");
              au.setAttribute("condensed", "");
            } else if (ar.type === "comment") {
              au = document.createElement("bx-commentblock");
              au.setAttribute("condensed", "");
            }
            if (au) {
              au.uid = ar.id;
              au.data = ar;
              this["#previews"].append(au);
            }
          }
        }
      }
      this.#sa = null;
      af();
    }));
  }
}
customElements.define("bx-searchpage", $a);
class Pa extends ns {
  static _shadowTemplate = ie` <template> <main> <bx-pagebreadcrumb id="breadcrumb"></bx-pagebreadcrumb> <x-card skin="document"> <main> <article> <h2 id="heading">Page not found</h2> <p>The page you requested does not exist.</p> </article> </main> </x-card> </main> </template>
  `;
  static _shadowStyleSheet = se`#breadcrumb{margin:0 0 20px 0}#heading{margin-top:0}`;
}
customElements.define("bx-errorpage", Pa);
class Ea extends bs {
  static v = ie` <template> <h2><x-message href="#contact"></x-message></h2> <x-label id="hint"> <x-message href="#contact-hint" args="email: ${Vi}"></x-message> </x-label> <x-box id="email-box" vertical> <h3><x-message href="#email"></x-message></h3> <x-input type="email" id="email-input" validation="manual" required></x-input> </x-box> <x-box id="subject-box" vertical> <h3><x-message href="#subject"></x-message></h3> <x-input id="subject-input"></x-input> </x-box> <x-box id="message-box" vertical> <h3><x-message href="#message"></x-message></h3> <x-texteditor id="message-editor" name="message" validation="manual" required></x-texteditor> </x-box> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#send"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:100%;height:100%}#main{display:flex;flex-flow:column;height:100%;padding:30px}h2{margin:0 0 20px 0;font-size:28px}h3{margin-bottom:6px}#hint{margin:0 0 21px 0;font-size:14px;user-select:text;-webkit-user-select:text}#email-input{width:100%;max-width:none}#subject-box{margin-top:20px}#subject-input{width:100%;max-width:none}#message-box{flex:1;margin-top:20px;min-height:1px}#message-editor{flex:1}`;
  get email() {
    return this["#email-input"].value;
  }
  get subject() {
    return this["#subject-input"].value;
  }
  get message() {
    return this["#message-editor"].value;
  }
  #at;
  constructor() {
    super();
    this["#email-input"].addEventListener("input", () => this.#ot());
    this["#subject-input"].addEventListener("input", () => this.#nn());
    this["#message-editor"].addEventListener("input", () => this.#ln());
    this["#submit-button"].addEventListener("click", (af) => this.#ms(af));
    this["#cancel-button"].addEventListener("click", (af) => this.#Pt(af));
  }
  connectedCallback() {
    super.connectedCallback();
    Bi.auth.addEventListener("userchange", (this.#at = () => this.#A()));
    this.#A();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  clear() {
    super.clear();
    this["#email-input"].value = "";
    this["#email-input"].setCustomValidity("");
    this["#subject-input"].value = "";
    this["#subject-input"].setCustomValidity("");
    this["#message-editor"].value = "";
    this["#message-editor"].setCustomValidity("");
    this.#A();
  }
  reportValidity() {
    let af = true;
    if (this["#email-input"].value.trim() === "") {
      this["#email-input"].setCustomValidity({
        href: "#required-field",
      });
      this["#email-input"].focus();
      af = false;
    }
    if (this["#subject-input"].value.trim() === "") {
      this["#subject-input"].setCustomValidity({
        href: "#required-field",
      });
      if (af === true) {
        this["#subject-input"].focus();
        af = false;
      }
    }
    if (this["#message-editor"].value.trim() === "") {
      this["#message-editor"].setCustomValidity({
        href: "#required-field",
      });
      if (af === true) {
        af = false;
        this["#message-editor"].focus();
      }
    }
    return af;
  }
  #ot() {
    this.p = true;
    this["#email-input"].setCustomValidity("");
  }
  #nn() {
    this.p = true;
    this["#subject-input"].setCustomValidity("");
  }
  #ln() {
    this.p = true;
    this["#message-editor"].setCustomValidity("");
  }
  #ms(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #Pt(af) {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  async #A() {
    await Bi.auth.whenReady;
    if (Bi.auth.userID !== null) {
      this["#email-input"].value = Bi.auth.userEmail;
      this["#email-input"].disabled = true;
    } else {
      this["#email-input"].disabled = false;
    }
  }
}
customElements.define("bx-contactform", Ea);
class La extends bs {
  static observedAttributes = ["value"];
  static v = ie` <template> <h2><x-message href="#share-file"></x-message></h2> <section id="url-section"> <h3><x-message href="#url"></x-message></h3> <p id="url-info"><x-message href="#share-file.url-hint"></x-message></p> <x-box> <x-input id="url-input" type="url" readonly="readonly"> <x-icon href="#share"></x-icon> </x-input> <x-button id="url-button"> <x-icon href="#copy"></x-icon> <x-label><x-message href="#copy"></x-message></x-label> </x-button> </x-box> </section> <hr id="library-separator" class="separator" hidden> <section id="library-section" hidden> <h3><x-message href="#library"></x-message></h3> <x-radios id="library-radios"> <x-radio value="none" toggled> <x-label><strong><x-message href="#library-scope.none"></x-message></strong></x-label> <x-label><x-message href="#library-scope.none-detail"></x-message></x-label> </x-radio> <x-radio value="personal"> <x-label><strong><x-message href="#library-scope.personal"></x-message></strong></x-label> <x-label><x-message href="#library-scope.personal-detail"></x-message></x-label> </x-radio> <x-radio value="org"> <x-label><strong><x-message href="#library-scope.organization"></x-message></strong></x-label> <x-label><x-message href="#library-scope.organization-detail"></x-message></x-label> </x-radio> </x-radios> </section> </template>
  `;
  static k = ie` <template> <x-button id="close-button" toggled> <x-label><x-message href="#close"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:540px}.separator{margin:20px 0}#url-info{margin-top:0}#url-input{width:100%;max-width:none}#url-button{margin-left:4px}`;
  get value() {
    if (this.hasAttribute("value")) {
      return this.getAttribute("value");
    } else {
      return "";
    }
  }
  set value(af) {
    this.setAttribute("value", af);
  }
  #T;
  #at;
  constructor() {
    super();
    this["#url-input"].addEventListener("focusin", () =>
      this["#url-input"].selectAll()
    );
    this["#url-input"].addEventListener("focusout", () =>
      window.getSelection().removeAllRanges()
    );
    this["#url-button"].addEventListener("click", (af) => this.#rn(af));
    this["#library-radios"].addEventListener("toggle", () => this.#hn());
    this["#close-button"].addEventListener("click", (af) => this.#cn(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#T = si(this, "#app");
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#Ro();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "value" && this.isConnected) {
      this.#A();
    }
  }
  #Ro() {
    if (this.isConnected) {
      this.#A();
    }
  }
  #rn() {
    navigator.clipboard.writeText(this["#url-input"].value);
    this.#T.openNotification("URL was copied to clipboard.");
  }
  async #hn() {
    let af = this.value;
    let ag = this["#library-radios"].value;
    if (af !== null) {
      let [ah, aj] = await this.#T.checkCloudFileWriteAccess(af);
      if (ah === "rejected") {
        this.#T.handleWriteAccessRejection(aj);
      } else if (ah === "granted") {
        try {
          await Bi.functions.postMessage("editArtwork", {
            artworkID: af,
            library: ag,
          });
        } catch (ak) {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-change-file-library",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      }
    }
  }
  #cn(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #A() {
    return new Promise(async (af, ag) => {
      if (this.value === null) {
        this["#url-input"].value = "";
      } else {
        await Bi.auth.whenReady;
        let ah = await Bi.database.getDocument("artworks", this.value);
        let aj = ah?.library ? ah.library : "none";
        this["#url-input"].value = "./share/" + this.value;
        if (Bi.auth.userID === ah.authorUID) {
          this["#library-section"].hidden = false;
          this["#library-separator"].hidden = false;
          this["#library-radios"].value = aj;
        } else {
          this["#library-section"].hidden = true;
          this["#library-separator"].hidden = true;
        }
      }
      af();
    });
  }
}
customElements.define("bx-fileshareform", La);
class Ua extends bs {
  static observedAttributes = ["value"];
  static v = ie` <template> <h2><x-message href="#embed-file"></x-message></h2> <section id="url-section"> <h3><x-message href="#url"></x-message></h3> <p id="url-info"><x-message href="#embed-file.url-hint"></x-message></p> <x-box> <x-input id="url-input" type="url" readonly="readonly"> <x-icon href="#share"></x-icon> </x-input> <x-button id="url-button"> <x-icon href="#copy"></x-icon> <x-label><x-message href="#copy"></x-message></x-label> </x-button> </x-box> </section> <hr id="cache-control-separator" class="separator" hidden> <section id="cache-control-section" hidden> <h3><x-message href="#caching"></x-message></h3> <p id="cache-control-info"><x-message href="#cache-control-hint"></x-message></p> <x-box> <x-select id="cache-control-select"> <x-menu> <x-menuitem value="no-cache, no-store, must-revalidate"> <x-label><x-message href="#cache-control.never-cache"></x-message></x-label> </x-menuitem> <x-menuitem value="max-age=600"> <x-label><x-message href="#cache-control.moderate"></x-message></x-label> </x-menuitem> <x-menuitem value="max-age=21600" toggled> <x-label><x-message href="#cache-control.normal"></x-message></x-label> </x-menuitem> <x-menuitem value="max-age=604800"> <x-label><x-message href="#cache-control.aggressive"></x-message></x-label> </x-menuitem> <x-menuitem value="max-age=31536000, immutable"> <x-label><x-message href="#cache-control.permanent"></x-message></x-label> </x-menuitem> <hr> <x-menuitem value="custom"> <x-label><x-message href="#cache-control.custom"></x-message></x-label> </x-menuitem> </x-menu> </x-select> <x-input id="cache-control-input"></x-input> <x-button id="cache-control-button" disabled="disabled" hidden> <x-label><x-message href="#change"></x-message></x-label> </x-button> </x-box> </section> </template>
  `;
  static k = ie` <template> <x-button id="close-button" toggled> <x-label><x-message href="#close"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:530px}.separator{margin:20px 0}#url-info{margin-top:0}#url-input{width:100%;max-width:none}#url-button{margin-left:4px}#cache-control-info{margin-top:0}#cache-control-select{width:130px;max-width:none}#cache-control-input{flex:1;max-width:none;margin-left:4px}#cache-control-button{min-width:85px;margin-left:4px}`;
  get value() {
    if (this.hasAttribute("value")) {
      return this.getAttribute("value");
    } else {
      return "";
    }
  }
  set value(af) {
    this.setAttribute("value", af);
  }
  #T;
  #at;
  constructor() {
    super();
    this["#url-input"].addEventListener("focusin", () =>
      this["#url-input"].selectAll()
    );
    this["#url-input"].addEventListener("focusout", () =>
      window.getSelection().removeAllRanges()
    );
    this["#url-button"].addEventListener("click", (af) => this.#rn(af));
    this["#cache-control-select"].addEventListener("change", () => this.#dn());
    this["#cache-control-input"].addEventListener("input", () => this.#un());
    this["#cache-control-button"].addEventListener("click", () => this.#pn());
    this["#close-button"].addEventListener("click", (af) => this.#cn(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#T = si(this, "#app");
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#Ro();
      })
    );
    this.#A();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    Bi.auth.removeEventListener("userchange", this.#at);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "value" && this.isConnected) {
      this.#A();
    }
  }
  #Ro() {
    if (this.isConnected) {
      this.#A();
    }
  }
  #rn() {
    navigator.clipboard.writeText(this["#url-input"].value);
    this.#T.openNotification("URL was copied to clipboard.");
  }
  async #dn() {
    let af = this.value;
    let ag = this["#cache-control-select"].value;
    if (af !== null) {
      let [ah, aj] = await this.#T.checkCloudFileWriteAccess(af);
      if (ah === "rejected") {
        this.#T.handleWriteAccessRejection(aj);
      } else if (ah === "granted") {
        if (ag === "custom") {
          ag = this["#cache-control-input"].value;
          this["#cache-control-input"].disabled = false;
          this["#cache-control-button"].hidden = false;
        } else {
          this["#cache-control-input"].value = ag;
          this["#cache-control-input"].disabled = true;
          this["#cache-control-button"].hidden = true;
        }
        try {
          await Bi.functions.postMessage("editArtwork", {
            artworkID: af,
            cacheControl: ag,
          });
        } catch (ak) {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-change-file-cache-control",
            },
            detail: bi(ak),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      }
    }
  }
  #un() {
    this["#cache-control-button"].disabled = false;
  }
  async #pn() {
    let af = this.value;
    if (af !== null) {
      let ag = this["#cache-control-input"].value;
      if (
        ((ah) => {
          let aj = true;
          let ak = [
            "public",
            "private",
            "immutable",
            "no-cache",
            "no-store",
            "no-transform",
            "must-revalidate",
            "proxy-revalidate",
            "only-if-cached",
            "max-stale",
          ];
          let al = [
            "max-age",
            "s-maxage",
            "max-stale",
            "min-fresh",
            "stale-while-revalidate",
            "stale-if-error",
          ];
          if ((typeof ah == "string") == 0) {
            aj = false;
          } else {
            let am = ah
              .trim()
              .split(",")
              .map((an) => an.trim().toLowerCase());
            for (let an of am) {
              if (ak.includes(an) === false) {
                let [ap, aq] = an.split("=");
                if (aq === undefined) {
                  aj = false;
                  break;
                }
                if (al.includes(ap) === false || Z(aq) === false) {
                  aj = false;
                }
              }
            }
          }
          return aj;
        })(ag)
      ) {
        this["#cache-control-button"].disabled = true;
        this["#cache-control-input"].setCustomValidity("");
        try {
          await Bi.functions.postMessage("editArtwork", {
            artworkID: af,
            cacheControl: ag,
          });
        } catch (ah) {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-change-file-cache-control",
            },
            detail: bi(ah),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
          this["#cache-control-button"].disabled = false;
        }
      } else {
        this["#cache-control-input"].setCustomValidity("Invalid directives");
      }
    }
  }
  #cn(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #A() {
    return new Promise(async (af, ag) => {
      if (this.value === null) {
        this["#url-input"].value = "";
      } else {
        await Bi.auth.whenReady;
        let ah = await Bi.database.getDocument("artworks", this.value);
        let aj = ah?.cacheControl ? ah.cacheControl : "max-age=21600";
        this["#url-input"].value =
          "./storage/artworks/" + this.value + ".svg";
        if (Bi.auth.userID === ah.authorUID) {
          this["#cache-control-section"].hidden = false;
          this["#cache-control-separator"].hidden = false;
          this["#cache-control-input"].value = aj;
          if (
            this["#cache-control-select"].querySelector(
              'x-menuitem[value="' + aj + '"]'
            ) !== null
          ) {
            this["#cache-control-select"].value = aj;
            this["#cache-control-input"].disabled = true;
            this["#cache-control-button"].hidden = true;
          } else {
            this["#cache-control-select"].value = "custom";
            this["#cache-control-input"].disabled = false;
            this["#cache-control-button"].hidden = false;
          }
        } else {
          this["#cache-control-section"].hidden = true;
          this["#cache-control-separator"].hidden = true;
        }
      }
      af();
    });
  }
}
customElements.define("bx-fileembedform", Ua);
class Da extends bs {
  static v = ie` <template> <h2><x-message href="#log-in"></x-message></h2> <x-input id="email-input" type="email" validation="manual" required> <x-icon href="#email"></x-icon> <x-label><x-message href="#email"></x-message></x-label> </x-input> <x-input id="password-input" type="password" validation="manual" required> <x-icon href="#password"></x-icon> <x-label><x-message href="#password"></x-message></x-label> </x-input> <p id="anchors"> <a id="register-anchor" tabindex="0"><x-message href="#register"></x-message></a> <a id="password-reset-anchor" tabindex="0"><x-message href="#reset-password"></x-message></a> </p> </template>
  `;
  static k = ie` <template> <x-button id="login-button" tabindex="0" toggled> <x-label><strong><x-message href="#log-in"></x-message></strong></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{min-width:250px}#email-input,#password-input{width:100%;max-width:none}#anchors{display:flex;align-items:center;justify-content:flex-end;font-size:13px;margin-top:10px}#password-reset-anchor{margin-left:8px}#login-button{width:100%;cursor:pointer}`;
  #T;
  #$;
  constructor() {
    super();
    this.addEventListener("keydown", (af) => this.#ie(af));
    this["#email-input"].addEventListener("input", () =>
      this["#email-input"].setCustomValidity("")
    );
    this["#password-input"].addEventListener("input", () =>
      this["#password-input"].setCustomValidity("")
    );
    this["#anchors"].addEventListener("pointerdown", (af) =>
      af.preventDefault()
    );
    this["#anchors"].addEventListener("click", (af) => this.#mn(af));
    this["#login-button"].addEventListener("pointerdown", (af) =>
      af.preventDefault()
    );
    this["#login-button"].addEventListener("click", (af) => this.#Kt(af));
  }
  connectedCallback() {
    super.connectedCallback();
    this.#T = si(this, "#app");
    this.#$ = si(this, "dialog");
    this["#register-anchor"].href = qi(location.href, "dialog", "register");
    this["#password-reset-anchor"].href = qi(
      location.href,
      "dialog",
      "password-reset"
    );
  }
  #ie(af) {
    if (this.throbber === false && af.key === "Enter") {
      this["#login-button"].click();
    }
  }
  #mn(af) {
    let ag = af.target.closest("a");
    if (ag) {
      af.preventDefault();
      this.#T.navigate(ag.href);
    }
  }
  async #Kt(af) {
    if (this["#email-input"].reportValidity() === false) {
      this["#email-input"].focus();
    } else if (this["#password-input"].reportValidity() === false) {
      this["#password-input"].focus();
    } else {
      this.throbber = true;
      this.#T.lockInput();
      let ag = this["#email-input"].value;
      let ah = this["#password-input"].value;
      let aj = null;
      try {
        await Bi.auth.logIn(ag, ah);
      } catch (ak) {
        aj = ak;
      }
      if (aj) {
        this.throbber = false;
        this.#T.unlockInput();
        if (aj.code === "auth/wrong-password") {
          this["#password-input"].setCustomValidity({
            href: "#wrong-password",
          });
          this["#password-input"].reportValidity();
        } else if (aj.code === "auth/invalid-email") {
          this["#email-input"].setCustomValidity({
            href: "#invalid-email",
          });
          this["#email-input"].reportValidity();
        } else if (aj.code === "auth/user-not-found") {
          this["#email-input"].setCustomValidity({
            href: "#user-not-found",
          });
          this["#email-input"].reportValidity();
        } else if (aj.code === "auth/network-request-failed") {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-log-in",
            },
            detail: {
              href: "#cant-connect-to-server",
            },
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-log-in",
            },
            detail: bi(aj),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      } else {
        this.throbber = false;
        this.#T.unlockInput();
        this.#$.close();
      }
    }
  }
}
customElements.define("bx-loginform", Da);
class za extends bs {
  static v = ie` <template> <h2><x-message href="#confirm-password"></x-message></h2> <p><x-message href="#confirm-password.detail"></x-message></p> <x-input id="password-input" type="password" validation="manual" required> <x-icon href="#password"></x-icon> <x-label><x-message href="#password"></x-message></x-label> </x-input> </template>
  `;
  static k = ie` <template> <x-button id="submit-button" toggled> <x-label><x-message href="#confirm"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:400px}#password-input{max-width:none}#password-input[error]{margin-bottom:10px}`;
  get value() {
    return this.#t;
  }
  #T;
  #$;
  #t = false;
  constructor() {
    super();
    this.addEventListener("keydown", (af) => this.#ie(af));
    this["#submit-button"].addEventListener("click", () => this.#ms());
  }
  connectedCallback() {
    super.connectedCallback();
    this.#T = si(this, "#app");
    this.#$ = si(this, "dialog");
  }
  #ie(af) {
    if (this.throbber === false && af.key === "Enter") {
      this["#submit-button"].click();
    }
  }
  async #ms() {
    if (this["#password-input"].reportValidity() === false) {
      this["#password-input"].focus();
    } else {
      this.throbber = true;
      let af = this["#password-input"].value;
      let ag = null;
      try {
        await Bi.auth.reauthenticate(af);
      } catch (ah) {
        ag = ah;
      }
      this.throbber = false;
      if (ag) {
        if (ag.code === "auth/wrong-password") {
          this["#password-input"].setCustomValidity("Wrong password");
        } else {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-confirm-password",
            },
            detail: authError.message + " (" + authError.code + ")",
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      } else {
        this.#t = true;
        await this.#$.close();
      }
    }
  }
}
customElements.define("bx-passwordconfirmform", za);
class Ma extends bs {
  static v = ie` <template> <h2><x-message href="#reset-password"></x-message></h2> <p><x-message href="#reset-password-hint"></x-message>.</p> <x-input id="email-input" type="email" validation="manual" required> <x-icon href="#email"></x-icon> <x-label><x-message href="#email"></x-message></x-label> </x-input> </template>
  `;
  static k = ie` <template> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="submit-button" toggled> <x-label><x-message href="#send"></x-message></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:420px}#email-input{max-width:none}#email-input[error]{margin-bottom:10px}`;
  #T;
  #$;
  constructor() {
    super();
    this.addEventListener("keydown", (af) => this.#ie(af));
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#submit-button"].addEventListener("click", () => this.#ms());
  }
  connectedCallback() {
    super.connectedCallback();
    this.#T = si(this, "#app");
    this.#$ = si(this, "dialog");
  }
  #ie(af) {
    if (this.throbber === false && af.key === "Enter") {
      this["#submit-button"].click();
    }
  }
  #Pt() {
    this.#$.close();
  }
  async #ms() {
    if (this["#email-input"].reportValidity() === false) {
      this["#email-input"].focus();
    } else {
      this.throbber = true;
      let af = null;
      try {
        await Bi.auth.sendPasswordResetEmail(this["#email-input"].value);
      } catch (ag) {
        af = ag;
      }
      this.throbber = false;
      if (af) {
        if (af.code === "auth/invalid-email") {
          this["#email-input"].setCustomValidity({
            href: "#invalid-email",
          });
        } else if (af.code === "auth/user-not-found") {
          this["#email-input"].setCustomValidity({
            href: "#user-not-found",
          });
        } else {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-reset-password",
            },
            detail: af.message + " (" + af.code + ")",
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      } else {
        this.#$.close();
      }
    }
  }
}
customElements.define("bx-passwordresetform", Ma);
class Aa extends bs {
  static v = ie` <template> <h2><x-message href="#register"></x-message></h2> <x-input id="email-input" type="email" validation="manual" required> <x-icon href="#email"></x-icon> <x-label><x-message href="#email"></x-message></x-label> </x-input> <x-input id="name-input" validation="manual" maxlength="35" required> <x-icon href="#profile"></x-icon> <x-label><x-message href="#name"></x-message></x-label> </x-input> <x-input id="password-input" type="password" validation="manual" minlength="5" required> <x-icon href="#password"></x-icon> <x-label><x-message href="#password"></x-message></x-label> </x-input> <x-checkbox id="agree-checkbox"> <x-label id="agree-checkbox-label"><x-message href="#i-agree-to-tos-and-privacy-policy"></x-message></x-label> </x-checkbox> </template>
  `;
  static k = ie` <template> <x-button id="submit-button" toggled disabled="disabled"> <x-label><strong><x-message href="#register"></x-message></strong></x-label> </x-button> </template>
  `;
  static _shadowStyleSheet = se`:host{width:308px}#email-input,#name-input,#password-input{width:100%;max-width:none}#agree-checkbox{margin-top:12px}#submit-button{width:100%;cursor:pointer}`;
  #T;
  #$;
  constructor() {
    super();
    this.addEventListener("keydown", (af) => this.#ie(af));
    this["#name-input"].addEventListener("input", () => this.#_e());
    this["#email-input"].addEventListener("input", () => this.#ot());
    this["#password-input"].addEventListener("input", () => this.#ht());
    this["#agree-checkbox"].addEventListener("toggle", () => this.#A());
    this["#agree-checkbox-label"].addEventListener("click", (af) =>
      this.#xn(af)
    );
    this["#submit-button"].addEventListener("click", () => this.#ms());
  }
  connectedCallback() {
    super.connectedCallback();
    this.#T = si(this, "#app");
    this.#$ = si(this, "dialog");
  }
  #ie(af) {
    if (
      af.key === "Enter" &&
      this.throbber === false &&
      this["#submit-button"].disabled === false
    ) {
      this["#submit-button"].click();
    }
  }
  #_e() {
    this["#name-input"].setCustomValidity("");
  }
  #ot() {
    this["#email-input"].setCustomValidity("");
  }
  #ht() {
    this["#password-input"].setCustomValidity("");
  }
  #xn(af) {
    if (af.target.localName === "a") {
      af.preventDefault();
      window.open(af.target.href);
    }
  }
  async #ms() {
    if (this["#email-input"].reportValidity() === false) {
      this["#email-input"].focus();
    } else if (this["#name-input"].reportValidity() === false) {
      this["#name-input"].focus();
    } else if (this["#password-input"].reportValidity() === false) {
      this["#password-input"].focus();
    } else {
      this.throbber = true;
      this.#T.lockInput();
      let af = this["#email-input"].value;
      let ag = this["#name-input"].value;
      let ah = this["#password-input"].value;
      let aj = null;
      try {
        await Bi.functions.postMessage("newUser", {
          email: af,
          name: ag,
          password: ah,
        });
      } catch (ak) {
        aj = ak;
      }
      if (aj === null) {
        await Bi.auth.logIn(af, ah);
        await Bi.auth.sendVerificationEmail();
        this.throbber = false;
        this.#T.unlockInput();
        this.#$.close();
      } else {
        this.throbber = false;
        this.#T.unlockInput();
        if (aj.code === "internal") {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-register-account",
            },
            detail: {
              href: "#internal-server-error",
            },
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        } else if (aj.details === "name-taken") {
          this["#name-input"].setCustomValidity({
            href: "#name-already-taken",
          });
          this["#name-input"].focus();
        } else if (aj.details === "auth/invalid-display-name") {
          this["#name-input"].setCustomValidity({
            href: "#invalid-name",
          });
          this["#name-input"].focus();
        } else if (aj.details === "auth/invalid-email") {
          this["#email-input"].setCustomValidity({
            href: "#invalid-email",
          });
          this["#email-input"].focus();
        } else if (
          aj.details === "auth/email-already-in-use" ||
          aj.details === "auth/email-already-exists"
        ) {
          this["#email-input"].setCustomValidity({
            href: "#email-already-registered",
          });
          this["#email-input"].focus();
        } else if (
          aj.details === "auth/weak-password" ||
          aj.details === "auth/invalid-password"
        ) {
          this["#password-input"].setCustomValidity({
            href: "#password-too-short",
          });
          this["#password-input"].focus();
        } else {
          this.#T.openMessageDialog({
            title: {
              href: "#failed-to-register-account",
            },
            detail: bi(aj),
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      }
    }
  }
  #A() {
    this["#submit-button"].disabled = !this["#agree-checkbox"].toggled;
  }
}
customElements.define("bx-registerform", Aa);
class Ba extends HTMLElement {
  static observedAttributes = ["value", "throbber"];
  static #C = ie` <template> <main id="main" part="main"> <x-icon id="folder-icon" href="#folder" part="icon"></x-icon> <x-throbber id="throbber" hidden></x-throbber> </main> <footer id="footer" part="footer"> <div id="name" part="name"></div> </footer> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      flex-flow: column;
      user-select: none;
      -webkit-user-select: none;
      pointer-events: none;
    }
    :host([hidden]) {
      display: none;
    }
    :host([highlighted]) {
      filter: brightness(1.3);
    }

    /**
     * Main
     */

    #main {
      display: flex;
      align-items: center;
      justify-content: center;
      flex: 1;
      padding: 14px;
      position: relative;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
      border-color: transparent;
    }

    /* Folder icon */

    #folder-icon {
      width: 100%;
      height: auto;
      pointer-events: all;
    }

    /**
     * Footer
     */

    #footer {
      height: 35px;
      font-size: 14.5px;
    }
    :host([disabled]) #footer > *  {
      opacity: 0.5;
    }

    /* Name */

    #name {
      overflow: hidden;
      display: -webkit-box;
      width: fit-content;
      padding: 3px 9px;
      margin: 7px auto 0 auto;
      line-height: 1.25;
      font-weight: 500;
      font-size: 13px;
      text-align: center;
      pointer-events: all;
      -webkit-box-orient: vertical;
      -webkit-line-clamp: 2;
    }
    #name[hidden] {
      display: none;
    }

    #name-input {
      width: 100%;
      height: 23px;
      max-width: none;
      margin-top: 6px;
      font-weight: 500;
      text-align: center;
      pointer-events: all;
    }
  `;
  get value() {
    if (this.hasAttribute("value")) {
      return JSON.parse(this.getAttribute("value"));
    } else {
      return [];
    }
  }
  set value(af) {
    if (af.length === 0) {
      this.removeAttribute("value");
    } else {
      this.setAttribute("value", JSON.stringify(af));
    }
  }
  get selected() {
    return this.hasAttribute("selected");
  }
  set selected(af) {
    if (af) {
      this.setAttribute("selected", "");
    } else {
      this.removeAttribute("selected");
    }
  }
  get highlighted() {
    return this.hasAttribute("highlighted");
  }
  set highlighted(af) {
    if (af) {
      this.setAttribute("highlighted", "");
    } else {
      this.removeAttribute("highlighted");
    }
  }
  get disabled() {
    return this.hasAttribute("disabled");
  }
  set disabled(af) {
    if (af) {
      this.setAttribute("disabled", "");
    } else {
      this.removeAttribute("disabled");
    }
  }
  get editable() {
    return this.hasAttribute("editable");
  }
  set editable(af) {
    if (af) {
      this.setAttribute("editable", "");
    } else {
      this.removeAttribute("editable");
    }
  }
  get throbber() {
    return this.hasAttribute("throbber");
  }
  set throbber(af) {
    if (af) {
      this.setAttribute("throbber", "");
    } else {
      this.removeAttribute("throbber");
    }
  }
  #P;
  #oi;
  constructor() {
    super();
    this.setAttribute("draggable", "true");
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ba.#S];
    this.#P.append(document.importNode(Ba.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this["#name"].addEventListener("dblclick", () => this.#ni());
    this["#folder-icon"].addEventListener("dblclick", () => this.#gn());
  }
  connectedCallback() {
    this.#oi = new ResizeObserver(et(this.#ri, 400, this));
    this.#oi.observe(this, {
      box: "border-box",
    });
  }
  disconnectedCallback() {
    this.#oi.unobserve(this);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah) {
      if (af === "value") {
        this.#ci();
      } else if (af === "throbber") {
        this.#hi();
      }
    }
  }
  #ni() {
    this.editName();
  }
  #gn() {
    this.dispatchEvent(
      new CustomEvent("thumbnaildblclick", {
        bubbles: true,
      })
    );
  }
  editName() {
    if (this.hasAttribute("editing")) {
      return;
    }
    this.setAttribute("editing", "");
    let af;
    let ag;
    let ah = this["#name"].textContent;
    let aj = ie`<x-input id="name-input" value="${ah}" validation="instant"></x-input>`;
    this["#name"].before(aj);
    aj.selectAll();
    this["#name"].hidden = true;
    let ak = (al = false) => {
      this.removeAttribute("editing", "");
      aj.removeEventListener("keydown", af);
      aj.removeEventListener("focusout", ag);
      aj.remove();
      this["#name"].hidden = false;
      let am = al === true ? ah : aj.value;
      if (ah === am) {
        this["#name"].textContent = ah;
      } else {
        if (am === "") {
          this["#name"].textContent = "Untitled";
          this["#name"].setAttribute("data-untitled", "");
        } else {
          this["#name"].textContent = Te(am);
          this["#name"].removeAttribute("data-untitled");
        }
        this.dispatchEvent(
          new CustomEvent("namechange", {
            bubbles: true,
            detail: {
              oldName: ah,
              newName: am,
            },
          })
        );
      }
      si(this, "[tabindex]").focus();
    };
    aj.addEventListener(
      "keydown",
      (af = (al) => {
        if (al.key === "Enter") {
          al.stopPropagation();
          ak();
        } else if (al.key === "Escape") {
          al.preventDefault();
          al.stopPropagation();
          ak(true);
        }
      })
    );
    aj.addEventListener(
      "focusout",
      (ag = () => {
        ak();
      })
    );
  }
  hitTest(af) {
    let ag = this["#folder-icon"].getBoundingClientRect();
    let ah = this["#name"].getBoundingClientRect();
    if (af instanceof DOMRect) {
      return Ot(ag, af) || Ot(ah, af);
    } else if (af instanceof DOMPoint) {
      return Nt(ag, af) || Nt(ah, af);
    } else {
      return undefined;
    }
  }
  update() {
    this.#hi();
    this.#ci();
  }
  #hi() {
    if (this.throbber === false) {
      this["#folder-icon"].hidden = false;
      this["#throbber"].hidden = true;
    } else {
      this["#folder-icon"].hidden = true;
      this["#throbber"].hidden = false;
    }
    this.#ri();
  }
  #ri() {
    this["#main"].style.minHeight = this["#main"].clientWidth + "px";
  }
  #ci() {
    let af = this.value;
    if (af.length === 0) {
      this["#name"].textContent = "Untitled";
      this["#name"].setAttribute("data-untitled", "");
    } else {
      let ag = af[af.length - 1];
      this["#name"].textContent = Te(ag);
      this["#name"].removeAttribute("data-untitled");
    }
  }
}
if (customElements.get("bx-cloudfolderpreview") === undefined) {
  customElements.define("bx-cloudfolderpreview", Ba);
}
let Ra = Symbol();
class Ia extends HTMLElement {
  static #C = ie` <template> <div id="items"></div> </template>
  `;
  static #S = se`
    :host {
      display: flex;
      align-items: center;
      width: fit-content;
      height: 32px;
      contain: style layout;
      box-sizing: border-box;
    }
    :host([disabled]) {
      pointer-events: none;
      opacity: 0.5;
    }
    :host([size="large"]) {
      height: 38px;
    }

    /* Containers */

    #items {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .item {
      display: flex;
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
      width: fit-content;
      height: 100%;
      padding: 0 13px;
      position: relative;
      border-width: 1px;
      border-style: solid;
    }
    .item:not(:first-child) {
      margin-left: -1px;
    }
    .item:focus {
      z-index: 1;
    }

    .item .inner {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      box-sizing: border-box;
    }

    /* Icon */

    .item x-icon {
      width: 16px;
      height: 16px;
      color: currentColor;
    }
    .item x-icon[href="#cloud"] {
      width: 20px;
      height: 20px;
    }

    /* Label */

    .item x-label {
      margin-left: 6px;
      font-weight: 500;
      font-size: 13px;
    }
  `;
  get value() {
    return this.#t;
  }
  set value(af) {
    this.#t = af;
    this.#A();
  }
  get size() {
    let af = this.getAttribute("size");
    if (["small", "large"].includes(af)) {
      return af;
    } else {
      return null;
    }
  }
  set size(af) {
    if (["small", "large"].includes(af)) {
      this.setAttribute("size", af);
    } else {
      this.removeAttribute("size");
    }
  }
  get disabled() {
    return this.hasAttribute("disabled");
  }
  set disabled(af) {
    if (af) {
      this.setAttribute("disabled", "");
    } else {
      this.removeAttribute("disabled");
    }
  }
  #t = [];
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ia.#S];
    this.#P.append(document.importNode(Ia.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.#P.addEventListener("pointerdown", (ag) => this.#Ye(ag));
    this.#P.addEventListener("click", (ag) => this.#Xe(ag));
    this.#P.addEventListener("dragover", (ag) => this.#bn(ag));
    this.#P.addEventListener("drop", (ag) => this.#fn(ag));
    this.#P.addEventListener("keydown", (ag) => this.#ie(ag));
  }
  connectedCallback() {
    this.#A();
  }
  #Ye(af) {
    if (af.target.closest(".item")) {
      af.preventDefault();
    }
  }
  #Xe(af) {
    let ag = af.target.closest(".item");
    if (ag?.hasAttribute("data-toggled") === false) {
      let ah = [];
      for (let aj of this["#items"].children) {
        if (aj !== this["#items"].firstElementChild) {
          ah.push(aj.querySelector(".label").textContent);
        }
        if (aj === ag) {
          break;
        }
      }
      this.value = ah;
      this.dispatchEvent(new CustomEvent("change"));
    }
  }
  #bn(af) {
    let ag = af.target.closest(".item");
    if (ag?.hasAttribute("data-toggled") === false) {
      af.preventDefault();
    }
  }
  #fn(af) {
    let ag = af.target.closest(".item");
    if (
      ag &&
      af.dataTransfer.getData("application/com.boxy-svg.bx-cloudbrowser:items")
    ) {
      this.dispatchEvent(
        new CustomEvent("itemsdrop", {
          detail: ag[Ra],
        })
      );
    }
  }
  #ie(af) {
    let ag = this["#items"].querySelector(":focus");
    if (ag) {
      if (af.key === "Enter" || af.code === "Space") {
        ag.click();
      }
    }
  }
  #me(af, ag, ah) {
    let aj = af.href ? '<x-message href="' + af.href + '"></x-message>' : af;
    let ak = ie` <div class="item" part="item" tabindex="0"> <div class="inner"> <x-icon href="#${ag}"></x-icon> <x-label class="label">${aj}</x-label> </div> </div>
    `;
    ak[Ra] = ah;
    return ak;
  }
  #A() {
    this["#items"].innerHTML = "";
    this["#items"].append(
      this.#me(
        {
          href: "#cloud",
        },
        "cloud",
        []
      )
    );
    for (let af = 0; af < this.value.length; af += 1) {
      let ag = this.value.slice(0, af + 1);
      if (this.value[af] === "__search__") {
        this["#items"].append(
          this.#me(
            {
              href: "#search",
            },
            "search",
            ag
          )
        );
      } else {
        this["#items"].append(this.#me(this.value[af], "grouping", ag));
      }
    }
    this["#items"].firstElementChild.part.add("first-item");
    this["#items"].lastElementChild.part.add("last-item");
    this["#items"].lastElementChild.part.add("toggled-item");
    this["#items"].lastElementChild.setAttribute("data-toggled", "");
    this["#items"].lastElementChild.removeAttribute("tabindex");
  }
}
if (customElements.get("bx-cloudbreadcrumb") === undefined) {
  customElements.define("bx-cloudbreadcrumb", Ia);
}
class Fa extends HTMLElement {
  static observedAttributes = ["value", "throbber"];
  static #C = ie` <template> <main id="main"> <x-throbber id="throbber" type="spin" hidden></x-throbber> <x-label id="label"></x-label> </main> </template>
  `;
  static #S = se`
    :host {
      display: block;
      width: 100%;
      height: 29px;
      padding: 0 16px;
      box-sizing: border-box;
      contain: style layout;
      display: flex;
      align-items: center;
    }
    :host([hidden]) {
      display: none;
    }

    #main {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #throbber {
      width: 19px;
      height: 19px;
      margin-right: 8px;
    }

    #label {
      font-size: 13px;
      opacity: 0.8;
      user-select: none;
      -webkit-user-select: none;
    }
  `;
  get value() {
    if (this.hasAttribute("value")) {
      return this.getAttribute("value");
    } else {
      return null;
    }
  }
  set value(af) {
    if (af === null) {
      this.removeAttribute("value");
    } else {
      this.setAttribute("value", af);
    }
  }
  get throbber() {
    return this.hasAttribute("throbber");
  }
  set throbber(af) {
    if (af) {
      this.setAttribute("throbber", "");
    } else {
      this.removeAttribute("throbber");
    }
  }
  #P;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Fa.#S];
    this.#P.append(document.importNode(Fa.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
  connectedCallback() {
    this.#A();
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && (af === "value" || af === "throbber")) {
      this.#A();
    }
  }
  #A() {
    this["#label"].innerHTML = this.value;
    if (this.throbber === false) {
      this["#throbber"].hidden = true;
    } else {
      this["#throbber"].hidden = false;
    }
  }
}
if (customElements.get("bx-cloudstatusbar") === undefined) {
  customElements.define("bx-cloudstatusbar", Fa);
}
let Na = (af) => {
  if (
    af.hasAttribute("data-bx-preset") &&
    af.getAttribute("x") === "-500%" &&
    af.getAttribute("y") === "-500%" &&
    af.getAttribute("width") === "1000%" &&
    af.getAttribute("height") === "1000%"
  ) {
    af.setAttribute("x", "-50%");
    af.setAttribute("y", "-50%");
    af.setAttribute("width", "200%");
    af.setAttribute("height", "200%");
  }
};
ei("svg:marker");
let Oa = (af) => {
  let ag = ti(af);
  if (af.hasAttribute("id") === false) {
    let ah = 0;
    while (ag.querySelector("#marker-" + ah) !== null) {
      ah += 1;
    }
    af.setAttribute("id", "marker-" + ah);
  }
};
let _a = (af) => {
  let ag = false;
  if (af.hasAttribute("data-bx-shape")) {
    let ah = af.getAttribute("d");
    let aj = af
      .getAttribute("data-bx-shape")
      .trim()
      .split(/[\s+,]+/);
    if (aj.length >= 3) {
      let ak = aj[0];
      let al = aj.slice(1, aj.length - 1);
      let am = aj[aj.length - 1];
      if (am.includes("@")) {
        let [an, ap] = am.split("@");
        if (
          ap ===
          Wt(ah + " / " + ak + " " + al.join(" ") + " " + an).toString(32)
        ) {
          ag = true;
        }
      }
    }
  }
  return ag;
};
let qa = (af) => {
  let ag = ti(af);
  if (af.hasAttribute("id") === false) {
    let ah = 0;
    while (ag.querySelector("#symbol-" + ah) !== null) {
      ah += 1;
    }
    af.setAttribute("id", "symbol-" + ah);
  }
};
let ja = (af) => {
  let ag = ti(af);
  let ah = null;
  try {
    ah = ag.querySelector(af.href.baseVal);
  } catch (aj) {
    ah = null;
  }
  if (ah && ah.localName !== "symbol") {
    let ak = lt(af);
    ak.multiplySelf(lt(ah));
    ak.translateSelf(af.x.baseVal.value, af.y.baseVal.value);
    let al = ah.cloneNode(true);
    rt(al, ak);
    for (let am of af.style) {
      let an = al.style.getPropertyValue(am);
      let ap = af.style.getPropertyValue(am);
      if (an === "") {
        al.style.setProperty(am, ap);
      }
    }
    for (let { name, value } of af.attributes) {
      if (
        D.includes(name) &&
        name !== "transform" &&
        al.hasAttribute(name) === false
      ) {
        al.setAttribute(name, value);
      }
    }
    for (let au of af.classList) {
      if (al.classList.contains(au) === false) {
        al.classList.add(au);
      }
    }
    for (let av of al.querySelectorAll("*[id]")) {
      av.removeAttribute("id");
    }
    if (af.hasAttribute("id")) {
      al.setAttribute("id", af.id);
    } else {
      al.removeAttribute("id");
    }
    af.replaceWith(al);
  } else {
    let aw = lt(af);
    aw.translateSelf(af.x.baseVal.value, af.y.baseVal.value);
    rt(af, aw);
    af.removeAttribute("x");
    af.removeAttribute("y");
  }
};
const Va = {
  foreignObjects: "sanitize",
  foreignMetadata: "remove",
};
let Ga = (af, ag = Va) => {
  let ah;
  let aj =
    Ha(af) ||
    Ha('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500"></svg>');
  let ak =
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT;
  let al = document.createNodeIterator(aj, ak);
  let am = [];
  let an = [];
  while ((ah = al.nextNode())) {
    if (ah.nodeType !== Node.ELEMENT_NODE) {
      if ((L[ah.parentNode.nodeName] || []).includes(ah.nodeName) === false) {
        ah.remove();
      }
    } else if (ah.localName.includes(":")) {
      if (ah.localName.startsWith("bx:")) {
        let aq = ah.localName.split(":")[1];
        let ar = document.createElement("bx-" + aq);
        for (let au of [...ah.attributes]) {
          ar.setAttribute(au.name, au.value);
        }
        for (let av of [...ah.childNodes]) {
          ar.append(av);
        }
        ah.replaceWith(ar);
      } else {
        ah.remove();
      }
    } else {
      if (ah.localName === "title") {
        let aw = ei("svg:bx-title");
        aw.innerHTML = ah.innerHTML;
        for (let { name, value } of ah.attributes) {
          aw.setAttribute(name, value);
        }
        ah.replaceWith(aw);
        continue;
      }
      if (ah.localName === "switch") {
        let az = ":scope > *:not([systemLanguage]):not([requiredExtensions])";
        let aA = ah.querySelector(az) || ah.firstElementChild;
        if (aA) {
          ah.replaceWith(aA);
        }
        continue;
      }
      if (ah.localName === "set") {
        let aB = ei("svg:animate");
        for (let { name, value } of ah.attributes) {
          if (name === "to") {
            aB.setAttribute("from", value);
            aB.setAttribute("to", value);
          } else {
            aB.setAttribute(name, value);
          }
        }
        ah.replaceWith(aB);
        continue;
      }
      if (ah.localName === "foreignObject") {
        if (ag.foreignObjects === "remove") {
          ah.remove();
          continue;
        }
        am.push([ah, ah.innerHTML]);
        ah.innerHTML = "";
      } else if (ah.localName === "metadata") {
        if (ag.foreignMetadata === "remove") {
          ah.remove();
          continue;
        }
        an.push([ah, ah.innerHTML]);
        ah.innerHTML = "";
      } else if (ah !== aj) {
        if (
          (L[ah.parentNode.localName] || []).includes(ah.localName) === false
        ) {
          ah.remove();
          continue;
        }
      }
      for (let { name, value } of [...ah.attributes]) {
        if (name.includes(":")) {
          ah.removeAttribute(name);
          if (name.startsWith("bx:")) {
            name = "data-bx-" + name.split(":")[1];
            ah.setAttribute(name, value);
          } else if (
            name === "xlink:href" &&
            ah.hasAttribute("href") === false
          ) {
            name = "href";
            ah.setAttribute(name, value);
          } else if (
            name === "xlink:title" &&
            ah.hasAttribute("title") === false
          ) {
            name = "title";
            ah.setAttribute(name, value);
          } else {
            if (name !== "xml:lang") {
              continue;
            }
            name = "lang";
            ah.setAttribute(name, value);
          }
        }
        if (name.startsWith("data-")) {
          if (name === "data-bx-shape") {
            if (_a(ah) === false) {
              ah.removeAttribute(name);
            }
          } else if (name === "data-bx-d") {
            if (Zt(ah) === false) {
              ah.removeAttribute(name);
            }
          } else if (name === "data-bx-origin") {
            ah.removeAttribute(name);
          }
        } else if (name === "href" && ah.localName === "a") {
          ah.removeAttribute(name);
          ah.setAttribute("_href", value);
        }
      }
    }
  }
  for (let [aG, aH] of am) {
    if (ag.foreignObjects === "preserve") {
      aG.innerHTML = aH;
    } else if (ag.foreignObjects === "sanitize") {
      aG.innerHTML = a6.sanitize(aH);
    }
  }
  for (let [aI, aJ] of an) {
    if (ag.foreignMetadata === "preserve") {
      aI.innerHTML = aJ;
    }
  }
  let ap = new Qe(aj);
  for (let aK of aj.querySelectorAll("text")) {
    gt(aK);
  }
  for (let aL of aj.querySelectorAll("textPath")) {
    bt(aL);
  }
  for (let aM of aj.querySelectorAll("linearGradient")) {
    _t(aM);
  }
  for (let aN of aj.querySelectorAll("radialGradient")) {
    qt(aN);
  }
  for (let aO of aj.querySelectorAll("pattern")) {
    Gt(aO);
  }
  for (let aP of aj.querySelectorAll("marker")) {
    Oa(aP);
  }
  for (let aQ of aj.querySelectorAll("symbol")) {
    qa(aQ);
  }
  for (let aR of aj.querySelectorAll("filter")) {
    if (aR.hasAttribute("data-bx-preset")) {
      Na(aR);
    }
  }
  for (let aS of aj.querySelectorAll("use")) {
    ja(aS);
  }
  for (let aT of aj.querySelectorAll(
    "animate,animateMotion,animateTransform,set"
  )) {
    Yt(aT);
  }
  {
    let aU = [];
    for (let { name, value } of [...aj.attributes]) {
      aj.removeAttribute(name);
      if (name !== "xmlns" && name !== "xmlns:bx") {
        aU.push({
          name: name,
          value: value,
        });
      }
    }
    aj.setAttribute("xmlns", u);
    aj.setAttribute("xmlns:bx", d);
    for (let { name, value } of aU) {
      aj.setAttribute(name, value);
    }
  }
  {
    let aZ = aj.querySelector(":scope > defs");
    if (!aZ) {
      aZ = ei("svg:defs");
      aj.prepend(aZ);
    }
  }
  Ee(aj);
  ap.destroy();
  document.importNode(aj, true);
  return aj;
};
let Ha = (af) => {
  let ag = new DOMParser();
  let ah = ag.parseFromString(af, "text/html").querySelector("body");
  let aj = null;
  let ak = true;
  if (ah.children.length === 1 && ah.children[0].localName === "svg") {
    for (let al of ah.children[0].attributes) {
      if (
        al.name.startsWith("xmlns") &&
        al.value.startsWith("http://schemas.microsoft.com/visio")
      ) {
        ak = false;
        break;
      }
    }
  } else {
    ak = false;
  }
  if (ak) {
    aj = ah.children[0];
  } else {
    let am =
      ag.parseFromString(af, "image/svg+xml").querySelector("svg") || null;
    let an = {
      title: true,
      switch: true,
    };
    for (let ap of $) {
      an[ap] = true;
    }
    if (am) {
      let aq;
      let ar = document.createNodeIterator(am, NodeFilter.SHOW_ELEMENT, {
        acceptNode: (av) =>
          av.localName === "foreignObject"
            ? NodeFilter.FILTER_SKIP
            : NodeFilter.FILTER_ACCEPT,
      });
      while ((aq = ar.nextNode())) {
        if (aq.namespaceURI === u) {
          if (an[aq.localName] !== true) {
            aq.remove();
          }
        } else if (aq.namespaceURI !== d) {
          aq.remove();
        }
      }
      if (am.hasAttribute("xmlns") === false) {
        let av = document.createElementNS(u, "svg");
        av.setAttribute("xmlns", u);
        for (let aw of am.attributes) {
          av.setAttribute(aw.name, am.getAttribute(aw.name));
        }
        for (let ax of [...am.childNodes]) {
          av.append(ax);
        }
        am = av;
      }
      let au =
        '<?xml version="1.0" encoding="utf-8"?>\n' +
        new XMLSerializer().serializeToString(am);
      aj =
        new DOMParser().parseFromString(au, "text/html").querySelector("svg") ||
        null;
    }
  }
  return aj;
};
class Wa extends EventTarget {
  get ready() {
    return this.#fa;
  }
  #T;
  #wn = null;
  #vn = null;
  #yn = null;
  #fa = false;
  constructor(af) {
    super();
    this.#T = af;
  }
  observe(af) {
    this.unobserve();
    this.#wn = af;
    if (af) {
      Bi.database.observeCollection(
        "artworks",
        (this.#yn = (ag) => {
          this.#kn(ag);
        }),
        true
      );
    }
  }
  unobserve() {
    if (this.#yn) {
      Bi.database.unobserveCollection("artworks", this.#yn);
      this.#yn = null;
      this.#fa = false;
    }
  }
  #kn(af) {
    this.#vn = af;
    this.#fa = true;
    this.dispatchEvent(new CustomEvent("change"));
  }
  query(af, ag = "", ah = "nameAsc", aj = false) {
    let ak = [];
    let al = [];
    if (this.#vn) {
      for (let { id: am, data } of this.#vn) {
        ak.push({
          uid: am,
          createdTime: data.createdTime,
          updatedTime: data.updatedTime,
          library: data.library !== undefined ? data.library : "none",
          folder: data.folder !== undefined ? [...data.folder] : [],
          name: data.name !== undefined ? data.name : data.title,
          size: data.size !== undefined ? data.size : 0,
        });
      }
    }
    for (let ap of ak) {
      if (ap.folder.length > 0) {
        for (let aq = 0; aq <= ap.folder.length; aq += 1) {
          let ar = ap.folder.slice(0, aq);
          if (ar.length > 0) {
            let au = false;
            for (let av of al) {
              if (q(ar, av, true) === true) {
                au = true;
                break;
              }
            }
            if (au === false) {
              al.push(ar);
            }
          }
        }
      }
    }
    if (aj === false) {
      ak = ak.filter((aw) => q(aw.folder, af, true));
      al = al.filter(
        (aw) =>
          aw.length === af.length + 1 &&
          q(aw.slice(0, aw.length - 1), af) === true
      );
    } else {
      ak = ak.filter((aw) => q(aw.folder.slice(0, af.length), af, true));
      al = al.filter(
        (aw) => aw.length > af.length && q(aw.slice(0, af.length), af) === true
      );
    }
    if (ag !== "") {
      ak = ak.filter(
        (aw) => aw.name.toLowerCase().indexOf(ag.toLowerCase()) !== -1
      );
      al = al.filter(
        (aw) => aw[aw.length - 1].toLowerCase().indexOf(ag.toLowerCase()) !== -1
      );
    }
    if (ah === "createdTimeDesc" || ah === "createdTimeAsc") {
      ak.sort((aw, ax) => aw.createdTime.seconds - ax.createdTime.seconds);
      if (ah === "createdTimeAsc") {
        ak.reverse();
      }
    } else if (ah === "updatedTimeDesc" || ah === "updatedTimeAsc") {
      ak.sort((aw, ax) => aw.updatedTime.seconds - ax.updatedTime.seconds);
      if (ah === "updatedTimeAsc") {
        ak.reverse();
      }
    } else if (ah === "nameDesc" || ah === "nameAsc") {
      ak.sort((aw, ax) => aw.name.localeCompare(ax.name));
      if (ah === "nameDesc") {
        ak.reverse();
      }
    }
    al.sort((aw, ax) => aw[aw.length - 1].localeCompare(ax[ax.length - 1]));
    if (ah === "nameDesc") {
      al.reverse();
    }
    return [ak, al];
  }
  getFile(af) {
    let ag = null;
    if (this.#vn) {
      for (let { id: ah, data } of this.#vn) {
        if (ah === af) {
          ag = {
            uid: af,
            createdTime: data.createdTime,
            updatedTime: data.updatedTime,
            folder: data.folder !== undefined ? [...data.folder] : [],
            name: data.name !== undefined ? data.name : data.title,
            size: data.size !== undefined ? data.size : 0,
          };
          break;
        }
      }
    }
    return ag;
  }
  getFolderSize(af) {
    let ag = 0;
    if (this.#vn) {
      for (let { id: ah, data } of this.#vn) {
        let ak = data.folder !== undefined ? data.folder : [];
        let al = data.size !== undefined ? data.size : 0;
        if (q(ak.slice(0, af.length), af, true)) {
          ag += al;
        }
      }
    }
    return ag;
  }
}
class Ka extends HTMLElement {
  static observedAttributes = ["type"];
  static #C = ie` <template> <header id="header" part="header"> <bx-cloudbreadcrumb id="breadcrumb"></bx-cloudbreadcrumb> <div id="save-form"> <x-label id="save-label"><x-message href="#save-as"></x-message>: </x-label> <x-input id="save-input" value="Untitled"></x-input> </div> <div id="filter-form"> <x-input id="search-input" type="search"> <x-icon href="#search"></x-icon> <x-label><x-message href="#search" ellipsis></x-message></x-label> </x-input> <x-select id="sort-select"> <x-menu> <x-menuitem value="name" toggled> <x-icon href="#sort-alphabetic"></x-icon> <x-label><x-message href="#name"></x-message></x-label> </x-menuitem> <x-menuitem value="createdTime"> <x-icon href="#time"></x-icon> <x-label><x-message href="#created-time"></x-message></x-label> </x-menuitem> <x-menuitem value="updatedTime"> <x-icon href="#time"></x-icon> <x-label><x-message href="#updated-time"></x-message></x-label> </x-menuitem> </x-menu> </x-select> <x-button id="sort-order-button" value="Asc" condensed> <x-icon id="sort-order-icon" href="#sort-ascending"></x-icon> <x-tooltip> <x-message id="sort-order-message" href="#sort.ascending"></x-message> </x-tooltip> </x-button> <x-buttons id="view-buttons" tracking="1" hidden> <x-button value="icons" condensed toggled> <x-icon href="#view-icons"></x-icon> </x-button> <x-button value="columns" condensed> <x-icon href="#view-columns"></x-icon> </x-button> </x-buttons> </div> </header> <main id="main" part="main"> <bx-iconscloudbrowserview id="icons-view"></bx-iconscloudbrowserview> <bx-columnscloudbrowserview id="columns-view"></bx-columnscloudbrowserview> </main> <footer id="footer" part="footer"> <div id="footer-buttons"> <x-button id="cancel-button"> <x-label><x-message href="#cancel"></x-message></x-label> </x-button> <x-button id="open-button" toggled> <x-label><x-message href="#open"></x-message></x-label> </x-button> <x-button id="save-button" toggled> <x-label><x-message href="#save"></x-message></x-label> </x-button> </div> <bx-cloudstatusbar id="statusbar"></bx-cloudstatusbar> </footer> <div id="dialogs"></div> </template>
  `;
  static #S = se`
    :host {
      width: 100%;
      height: 100%;
      display: flex;
      flex-flow: column;
    }
    :host(:focus) {
      outline: none;
    }

    /**
     * Header
     */

    #header {
      border-bottom-width: 1px;
      border-bottom-style: solid;
    }

    /* Breadcrumb */

    #breadcrumb {
      margin: 10px 16px;
    }

    /* Save form */

    #save-form {
      display: flex;
      align-items: center;
      padding: 10px 16px;
    }
    #save-form[hidden] {
      display: none;
    }

    #save-label {
      margin-right: 10px;
      font-weight: 500;
    }

    #save-label > x-input {
      padding: 0 8px;
    }

    #save-input {
      flex: 1;
      max-width: initial;
    }

    /* Filter form */

    #filter-form {
      display: flex;
      padding: 0px 16px 10px 16px;
    }
    #filter-form[hidden] {
      display: none;
    }

    /* Search input */

    #search-input {
      flex: 1;
      min-width: 60px;
      max-width: none;
    }

    /* Sort select */

    #sort-select {
      width: 168px;
      margin-left: 10px;
    }
    #sort-select:focus {
      z-index: 1;
    }
    @media all and (max-width: 650px) {
      #sort-select {
        width: 120px;
      }
    }
    @media all and (max-width: 539px) {
      #sort-select {
        width: 100px;
      }
    }

    /* Sort order button */

    #sort-order-button {
      margin-left: 10px;
    }

    /* View buttons */

    #view-buttons {
      margin-left: 10px;
    }

    /**
     * Main
     */

    #main {
      flex: 1;
      min-height: 1px;
    }
    #main:focus {
      outline: none;
    }

    /**
     * Footer
     */

    #footer {
      border-top-width: 1px;
      border-top-style: solid;
    }

    #footer-buttons[hidden] {
      display: none;
    }

    #footer-buttons {
      display: flex;
      justify-content: flex-end;
      padding: 10px 16px;
      box-sizing: border-box;
    }

    #footer-buttons > x-button {
      margin-left: 10px;
    }
  `;
  get type() {
    if (this.hasAttribute("type")) {
      return this.getAttribute("type");
    } else {
      return "open";
    }
  }
  set type(af) {
    this.setAttribute("type", af);
  }
  get value() {
    if (this.type === "open") {
      return (this.currentView && this.currentView.selectedFiles[0]) || null;
    } else if (this.type === "manage") {
      if (this.currentView) {
        return [...this.currentView.selectedFiles];
      } else {
        return [];
      }
    } else if (this.type === "save") {
      return this["#save-input"].value;
    } else {
      return undefined;
    }
  }
  get cloudStorageModel() {
    return this.#Cn;
  }
  get location() {
    return this.#Sn;
  }
  get search() {
    return this.#Tn;
  }
  get sort() {
    return this.#$n;
  }
  get view() {
    return this.#Pn;
  }
  get currentView() {
    for (let af of this["#main"].children) {
      if (af.enabled) {
        return af;
      }
    }
  }
  #T;
  #$;
  #P;
  #Cn;
  #at;
  #En;
  #Sn = [];
  #Tn = "";
  #$n = "nameAsc";
  #Pn = "icons";
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ka.#S];
    this.#P.append(document.importNode(Ka.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.addEventListener("keydown", (ag) => this.#ie(ag));
    this["#main"].addEventListener("selectedchange", () => this.#Ln());
    this["#main"].addEventListener("filepreviewdblclick", () => this.#Un());
    this["#breadcrumb"].addEventListener("change", () => this.#Dn());
    this["#breadcrumb"].addEventListener("itemsdrop", (ag) => this.#zn(ag));
    this["#save-input"].addEventListener("input", () => this.#Mn());
    this["#save-input"].addEventListener("keydown", (ag) => this.#An(ag));
    this["#search-input"].addEventListener("input", () => this.#$i());
    this["#sort-select"].addEventListener("change", () => this.#Li());
    this["#sort-order-button"].addEventListener("click", () => this.#Bn());
    this["#view-buttons"].addEventListener("toggle", () => this.#Rn());
    this["#cancel-button"].addEventListener("click", () => this.#Pt());
    this["#open-button"].addEventListener("click", () => this.#In());
    this["#save-button"].addEventListener("click", () => this.#$o());
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#$ = si(this, "dialog");
    this.#$n = a2.getConfig("bx-cloudbrowser:sort", "nameAsc");
    this.#Pn = a2.getConfig("bx-cloudbrowser:view", "icons");
    this.#Cn = new Wa(this.#T);
    this.#Cn.observe(Bi.auth.userID);
    Bi.auth.addEventListener(
      "userchange",
      (this.#at = () => {
        this.#Cn.observe(Bi.auth.userID);
      })
    );
    this.#Cn.addEventListener(
      "change",
      (this.#En = () => {
        this.#Fn();
      })
    );
    this.#Nn();
    this.#hi();
    this.#ci();
  }
  disconnectedCallback() {
    this["#main"].innerHTML = "";
    this.#Cn.unobserve();
    Bi.auth.removeEventListener("userchange", this.#at);
    this.#Cn.removeEventListener("change", this.#En);
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "type") {
      this.#Nn();
      this.#vo();
    }
  }
  #ie(af) {
    if (af.code === "Escape") {
      if (af.defaultPrevented === false && this.#$) {
        this.#$.close();
      }
    } else if (
      af.code === "Escape" &&
      af.defaultPrevented === false &&
      this.#$
    ) {
      this.#$.close();
    }
  }
  #Ln() {
    this.#ci();
  }
  #Dn() {
    let af = this.#Tn;
    this.#Sn = this["#breadcrumb"].value.filter((ag) => ag !== "__search__");
    this.#Tn = "";
    this.dispatchEvent(new CustomEvent("locationchange"));
    if (af !== "") {
      this.dispatchEvent(new CustomEvent("searchchange"));
    }
    this.#Nn();
    this.#ci();
  }
  #zn(af) {
    this.moveSelectionToFolder(af.detail);
  }
  #Mn() {
    this.#ci();
  }
  #An(af) {
    if (af.key === "Enter" && this["#save-button"].disabled === false) {
      this["#save-button"].click();
    }
  }
  #$i() {
    this.#Tn = this["#search-input"].value.trim();
    this.dispatchEvent(new CustomEvent("searchchange"));
    this.#On();
    this.#ci();
  }
  #Li() {
    this.#$n = this["#sort-select"].value + this["#sort-order-button"].value;
    a2.setConfig("bx-cloudbrowser:sort", this.#$n);
    this.dispatchEvent(new CustomEvent("sortchange"));
    this.#Nn();
  }
  #Bn() {
    let af = this.sort;
    if (af.endsWith("Desc")) {
      af = af.replace("Desc", "Asc");
    } else if (af.endsWith("Asc")) {
      af = af.replace("Asc", "Desc");
    }
    this.#$n = af;
    a2.setConfig("bx-cloudbrowser:sort", af);
    this.dispatchEvent(new CustomEvent("sortchange"));
    this.#Nn();
  }
  #Rn() {
    this.#xi(this["#view-buttons"].value);
  }
  #Un(af) {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #Pt() {
    this.dispatchEvent(new CustomEvent("cancel"));
  }
  #In() {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #$o() {
    this.dispatchEvent(new CustomEvent("submit"));
  }
  #_n(af) {
    if (af === "selectAll") {
      this.currentView.selectAllPreviews();
    } else if (af === "rename") {
      this.currentView.renameSelected();
    } else if (af === "viewAsColumns") {
      this.#xi("columns");
    } else if (af === "viewAsIcons") {
      this.#xi("icons");
    } else if (af === "share") {
      this.#T.openShareDialog(this.currentView.selectedFiles[0]);
    } else if (af === "embed") {
      this.#T.openEmbedDialog(this.currentView.selectedFiles[0]);
    } else if (af === "open-with-app") {
      this.openFile(this.currentView.selectedFiles[0], "app");
    } else if (af === "open-with-browser") {
      this.openFile(this.currentView.selectedFiles[0], "browser");
    } else if (af === "saveToDiskAs") {
      this.#qn(this.currentView.selectedFiles[0]);
    } else if (af === "newFile") {
      this.#jn();
    } else if (af === "newFolder") {
      this.#Vn();
    } else if (af === "delete") {
      this.#Gn();
    }
  }
  navigate(af) {
    if (this.#Sn !== af || this.#Tn !== "") {
      this.#Sn = af;
      this.#Tn = "";
      this.dispatchEvent(new CustomEvent("locationchange"));
      this.dispatchEvent(new CustomEvent("searchchange"));
      this.#Nn();
    }
  }
  #xi(af) {
    if (this.#Pn !== af) {
      this.#Pn = af;
      a2.setConfig("bx-cloudbrowser:view", af);
      this.#Nn();
      this.#hi();
    }
  }
  #Hn(af) {
    this.currentView.locked = true;
    this["#breadcrumb"].disabled = true;
    this["#search-input"].disabled = true;
    this["#sort-select"].disabled = true;
    this["#sort-order-button"].disabled = true;
    this["#statusbar"].value = af;
    this["#statusbar"].throbber = true;
  }
  #Wn() {
    this.currentView.locked = false;
    this["#breadcrumb"].disabled = false;
    this["#search-input"].disabled = false;
    this["#sort-select"].disabled = false;
    this["#sort-order-button"].disabled = false;
    this["#statusbar"].throbber = false;
    this.#Fn();
  }
  focusSaveInput(af = true) {
    this["#save-input"].focus();
    if (af) {
      this["#save-input"].selectAll();
    }
  }
  openContextMenu() {
    return new Promise(async (af) => {
      let { selectedFolders, selectedFiles } = this.currentView;
      let aj = [];
      this.#$n;
      aj =
        selectedFolders.length === 0 && selectedFiles.length === 0
          ? [
              {
                value: "newFile",
                message: {
                  href: "#new-file",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "selectAll",
                message: {
                  href: "#select-all",
                  autocapitalize: true,
                },
              },
            ]
          : selectedFolders.length === 1 && selectedFiles.length === 0
          ? [
              {
                value: "newFolder",
                disabled: this.#Tn !== "",
                message: {
                  href: "#new-folder-with-selection",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "rename",
                message: {
                  href: "#rename",
                  autocapitalize: true,
                },
              },
              {
                value: "delete",
                message: {
                  href: "#delete",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "selectAll",
                message: {
                  href: "#select-all",
                  autocapitalize: true,
                },
              },
            ]
          : selectedFolders.length === 0 && selectedFiles.length === 1
          ? [
              {
                value: "newFolder",
                disabled: this.#Tn !== "",
                message: {
                  href: "#new-folder-with-selection",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "open-with-app",
                message: {
                  href: "#open-with-boxy-svg",
                  autocapitalize: true,
                },
              },
              {
                value: "open-with-browser",
                message: {
                  href: "#open-with-web-browser",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "rename",
                message: {
                  href: "#rename",
                  autocapitalize: true,
                },
              },
              {
                value: "delete",
                message: {
                  href: "#delete",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "share",
                message: {
                  href: "#share",
                  autocapitalize: true,
                  ellipsis: true,
                },
              },
              {
                value: "embed",
                message: {
                  href: "#embed",
                  autocapitalize: true,
                  ellipsis: true,
                },
              },
              {
                value: "saveToDiskAs",
                message: {
                  href: "#save-to-disk-as",
                  autocapitalize: true,
                  ellipsis: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "selectAll",
                message: {
                  href: "#select-all",
                  autocapitalize: true,
                },
              },
            ]
          : [
              {
                value: "newFolder",
                disabled: this.#Tn !== "",
                message: {
                  href: "#new-folder-with-selection",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "delete",
                message: {
                  href: "#delete",
                  autocapitalize: true,
                },
              },
              {
                type: "separator",
              },
              {
                value: "selectAll",
                message: {
                  href: "#select-all",
                  autocapitalize: true,
                },
              },
            ];
      let ak = await this.#T.openContextMenu(aj);
      this.currentView.focus();
      if (ak !== null) {
        this.#_n(ak);
      }
      af(ak);
    });
  }
  openFile(af, ag = "app") {
    if (ag === "app") {
      if (this.#T.localName === "bx-progressivewebapp") {
        this.#T.openNewAppWindowWithArtworkFromCloud(af);
      } else if (this.#T.displayMode === "standalone") {
        window.open(
          "/app/" + af,
          "",
          "noopener,menubar=no,toolbar=no,location=no,status=no"
        );
      } else {
        window.open("/app/" + af, "", "noopener");
      }
    } else if (ag === "browser") {
      if (this.#T.displayMode === "standalone") {
        window.open(
          "./storage/artworks/" + af + ".svg",
          "",
          "noopener,menubar=no,toolbar=no,location=no,status=no"
        );
      } else {
        window.open(
          "./storage/artworks/" + af + ".svg",
          "",
          "noopener"
        );
      }
    }
  }
  #qn(af) {
    return new Promise(async (ag) => {
      let ah = await fetch(
        "./storage/artworks/" + af + ".svg",
        {
          cache: "no-cache",
          headers: {
            Pragma: "no-cache",
          },
        }
      );
      let aj = {
        foreignObjects: a2.getConfig(
          "bx-markupsettings:foreignObjects",
          "sanitize"
        ),
        foreignMetadata: a2.getConfig(
          "bx-markupsettings:foreignMetadata",
          "remove"
        ),
      };
      let ak = await ah.text();
      let al = Ga(ak, aj).querySelector(":scope > bx-title");
      let am = "Untitled";
      if (al?.textContent.trim().length > 0) {
        am = al.textContent.trim();
      }
      let an = new Blob([ak], {
        type: "image/svg+xml",
      });
      let ap = URL.createObjectURL(an);
      ie`<a download="${am}.svg" href="${ap}"></a>`.click();
      URL.revokeObjectURL(ap);
      ag();
    });
  }
  #jn() {
    return new Promise(async (af) => {
      let ag = this.location;
      let ah = "Untitled";
      let aj = null;
      this.#Hn("Creating new file…");
      {
        let [ak, al] = this.#Cn.query(ag, "");
        let am = new Set();
        for (let an of ak) {
          am.add(an.name === "" ? "Untitled" : an.name);
        }
        for (let ap of al) {
          let aq = ap[ap.length - 1];
          am.add(aq);
        }
        if (am.has(ah)) {
          let ar = 2;
          while (am.has(ah + " " + ar)) {
            ar += 1;
          }
          ah = ah + " " + ar;
        }
      }
      aj = (
        await Bi.functions.postMessage("newArtwork", {
          name: ah,
          folder: ag,
        })
      ).data;
      await this.currentView.whenNextUpdate;
      this.currentView.selectedFiles = [aj];
      this.#Wn();
      af();
    });
  }
  renameFile(af, ag) {
    return new Promise(async (ah) => {
      this.#Hn("Renaming file…");
      {
        let [aj, ak] = await this.#T.checkCloudFileWriteAccess(af);
        if (aj === "rejected") {
          this.#T.handleWriteAccessRejection(ak);
        } else if (aj === "granted") {
          try {
            await Bi.functions.postMessage("editArtwork", {
              artworkID: af,
              name: ag,
            });
          } catch (al) {
            this.o.openMessageDialog({
              title: {
                href: "#failed-to-rename-file",
              },
              detail: bi(al),
              buttons: [
                {
                  href: "#close",
                },
              ],
            });
          }
        }
      }
      await this.currentView.whenNextUpdate;
      this.#Wn();
      ah();
    });
  }
  #Vn() {
    return new Promise(async (af) => {
      this.#Hn("Creating new folder…");
      let ag = {};
      let ah = "Untitled folder";
      let aj = [...this.#Sn, ah];
      {
        let [ak] = this.#Cn.query([], "", "nameAsc", true);
        for (let al of this.currentView.selectedFiles) {
          let am = ak.find((an) => an.uid === al);
          if (am) {
            ag[am.uid] = j(am.folder, this.#Sn.length, ah);
          }
        }
        for (let an of this.currentView.selectedFolders) {
          let [ap] = this.#Cn.query(an, "", "nameAsc", true);
          for (let aq of ap) {
            ag[aq.uid] = j(aq.folder, this.#Sn.length, ah);
          }
        }
      }
      try {
        await Bi.functions.postMessage("setArtworksFolders", ag);
      } catch (ar) {
        this.o.openMessageDialog({
          title: {
            href: "#failed-to-create-folder",
          },
          detail: bi(ar),
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      }
      await this.currentView.whenNextUpdate;
      this.currentView.selectedFolders = [aj];
      this.#Wn();
      af();
    });
  }
  moveSelectionToFolder(af) {
    return new Promise(async (ag) => {
      let { selectedFolders, selectedFiles } = this.currentView;
      let ak = af.length === 0 ? "Cloud" : af[af.length - 1];
      let al = selectedFolders.length + selectedFiles.length;
      let am = {};
      if (al === 1) {
        this.#Hn('Moving 1 item to "' + ak + '"...');
      } else {
        this.#Hn("Moving " + al + ' items to "' + ak + '"...');
      }
      for (let an of selectedFiles) {
        this.#Cn.getFile(an);
        am[an] = af;
      }
      for (let ap of selectedFolders) {
        let [aq] = this.#Cn.query(ap, "", "nameAsc", true);
        for (let ar of aq) {
          let au = ar.folder.slice(this.#Sn.length);
          am[ar.uid] = [...af, ...au];
        }
      }
      try {
        await Bi.functions.postMessage("setArtworksFolders", am);
      } catch (av) {
        this.o.openMessageDialog({
          title: {
            href: "#failed-to-move-files",
          },
          detail: bi(av),
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      }
      await this.currentView.whenNextUpdate;
      this.#Wn();
      ag();
    });
  }
  renameFolder(af, ag) {
    return new Promise(async (ah) => {
      this.#Hn("Renaming file…");
      let aj = {};
      {
        let [ak] = this.#Cn.query(af, "", "nameAsc", true);
        for (let al of ak) {
          let am = [...al.folder];
          am[af.length - 1] = ag;
          aj[al.uid] = am;
        }
      }
      try {
        await Bi.functions.postMessage("setArtworksFolders", aj);
      } catch (an) {
        this.o.openMessageDialog({
          title: {
            href: "#failed-to-rename-folder",
          },
          detail: bi(an),
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      }
      {
        await this.currentView.whenNextUpdate;
        let ap = [...af];
        ap[ap.length - 1] = ag;
        this.currentView.selectedFolders = [ap];
      }
      this.#Wn();
      ah();
    });
  }
  #Gn(af) {
    return new Promise(async (ag) => {
      let { selectedFiles, selectedFolders } = this.currentView;
      let ak = [...selectedFiles];
      for (let al of selectedFolders) {
        let [am] = this.#Cn.query(al, "", "nameAsc", true);
        for (let an of am) {
          ak.push(an.uid);
        }
      }
      if (
        (await this.#T.openMessageDialog({
          title: {
            href: "#confirm-delete-files",
            args: {
              filesCount: ak.length,
            },
          },
          detail: {
            href: "#confirm-delete-files.detail",
          },
          buttons: [
            {
              href: "#delete",
            },
            {
              href: "#cancel",
            },
          ],
        })) === 0
      ) {
        this.#Hn("Deleting files…");
        for (let ap of ak) {
          let [aq, ar] = await this.#T.checkCloudFileWriteAccess(ap);
          if (aq === "rejected") {
            if (
              ar === "boxy-svg/user-not-subscribed" ||
              ar === "boxy-svg/subscription-expired"
            ) {
              aq = "granted";
            } else {
              this.#T.handleWriteAccessRejection(ar);
            }
          }
          if (aq === "granted") {
            let au = null;
            try {
              await Bi.functions.postMessage("deleteArtwork", ap);
            } catch (av) {
              au = av;
            }
            if (au) {
              this.o.openMessageDialog({
                title: {
                  href: "#failed-to-delete-file",
                },
                detail: bi(error),
                buttons: [
                  {
                    href: "#close",
                  },
                ],
              });
            } else if (ap === this.#T.artworkID) {
              this.#T.navigate("./app", true);
              this.#T.loadNewArtwork();
            }
          }
        }
        this.#Wn();
      }
      ag();
    });
  }
  #Nn() {
    this.#On();
    if (this.type === "manage") {
      this["#save-form"].hidden = true;
      this["#filter-form"].hidden = false;
    } else if (this.type === "save") {
      this["#save-form"].hidden = false;
      this["#filter-form"].hidden = true;
    } else if (this.type === "open") {
      this["#save-form"].hidden = true;
      this["#filter-form"].hidden = false;
    }
    this["#search-input"].value = this.#Tn;
    if (this.sort.endsWith("Desc")) {
      this["#sort-select"].value = this.sort.split("Desc")[0];
      this["#sort-order-button"].disabled = false;
      this["#sort-order-button"].value = "Desc";
      this["#sort-order-message"].href = "sort.descending";
      this["#sort-order-icon"].href = "#sort-descending";
    } else if (this.sort.endsWith("Asc")) {
      this["#sort-select"].value = this.sort.split("Asc")[0];
      this["#sort-order-button"].disabled = false;
      this["#sort-order-button"].value = "Asc";
      this["#sort-order-message"].href = "sort.ascending";
      this["#sort-order-icon"].href = "#sort-ascending";
    }
    this["#view-buttons"].value = this.#Pn;
  }
  #On() {
    if (this.#Tn === "") {
      this["#breadcrumb"].value = this.#Sn;
    } else {
      this["#breadcrumb"].value = [...this.#Sn, "__search__"];
    }
  }
  #hi() {
    if (this.#Pn === "icons") {
      this["#icons-view"].enabled = true;
      this["#icons-view"].selectedFiles = this["#columns-view"].selectedFiles;
      this["#icons-view"].selectedFolders =
        this["#columns-view"].selectedFolders;
      this["#columns-view"].enabled = false;
    } else if (this.#Pn === "columns") {
      this["#columns-view"].enabled = true;
      this["#columns-view"].selectedFiles = this["#icons-view"].selectedFiles;
      this["#columns-view"].selectedFolders =
        this["#icons-view"].selectedFolders;
      this["#icons-view"].enabled = false;
    }
  }
  #ci() {
    this.#vo();
    this.#Fn();
  }
  #vo() {
    if (this.type === "manage") {
      this["#footer-buttons"].hidden = true;
      this["#cancel-button"].hidden = true;
      this["#open-button"].hidden = true;
      this["#save-button"].hidden = true;
    } else if (this.type === "save") {
      this["#footer-buttons"].hidden = false;
      this["#cancel-button"].hidden = false;
      this["#open-button"].hidden = true;
      this["#save-button"].hidden = false;
      this["#save-button"].disabled = this.value.trim() === "";
    } else if (this.type === "open") {
      this["#footer-buttons"].hidden = false;
      this["#cancel-button"].hidden = false;
      this["#open-button"].hidden = false;
      this["#open-button"].disabled = this.value === null;
      this["#save-button"].hidden = true;
    }
  }
  #Fn() {
    if (this.type === "manage") {
      let { location, search, sort } = this;
      let [aj, ak] = this.#Cn.query(location, search, sort, search !== "");
      let { selectedFiles, selectedFolders } = this.currentView;
      let an = aj.length + ak.length;
      let ap = selectedFiles.length + selectedFolders.length;
      let aq = "";
      let ar = "";
      aq = ap === 0 ? an + " items" : ap + " of " + an + " items selected";
      {
        let au = 0;
        if (ap === 0) {
          for (let av of aj) {
            au += av.size;
          }
          for (let aw of ak) {
            au += this.#Cn.getFolderSize(aw);
          }
        } else {
          for (let ax of selectedFiles) {
            au += aj.find((ay) => ay.uid === ax).size;
          }
          for (let ay of selectedFolders) {
            au += this.#Cn.getFolderSize(ay);
          }
        }
        ar = fe(au);
      }
      this["#statusbar"].hidden = false;
      this["#statusbar"].value = aq + ", " + ar;
    } else {
      this["#statusbar"].hidden = true;
    }
  }
}
customElements.define("bx-cloudbrowser", Ka);
class Za extends HTMLElement {
  static observedAttributes = ["enabled"];
  static #C = ie` <template> <main id="main"> <div id="previews"></div> <div id="placeholder" hidden> <div id="placeholder-title"></div> <div id="placeholder-description"></div> </div> <div id="rubber-band" part="rubber-band" hidden></div> <div id="ghost" part="ghost"></div> </main> </template>
  `;
  static #S = se`
    :host {
      width: 100%;
      height: 100%;
      display: none;
      flex-flow: column;
    }
    :host([enabled]) {
      display: flex;
    }
    :host([locked]) {
      opacity: 0.5;
    }
    :host(:focus) {
      outline: none;
    }

    #main {
      flex: 1;
      overflow: auto;
      padding: 16px 16px 0 16px;
      position: relative;
    }
    #main:focus {
      outline: none;
    }

    /* Previews */

    #previews {
      display: flex;
      flex-wrap: wrap;
    }

    #previews > * {
      width: calc(20% - 14px * (4/5));
      margin: 0 14px 14px 0;
    }

    #previews > *:nth-child(5n) {
      margin: 0 0 14px 0;
    }

    /* Placeholder */

    #placeholder {
      height: 100%;
      margin-top: -15px;
      display: flex;
      flex-flow: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      line-height: 1.2;
      user-select: none;
      -webkit-user-select: none;
    }
    #placeholder[hidden] {
      display: none;
    }

    #placeholder-title {
      font-size: 21px;
      font-weight: 700;
      opacity: 0.65;
    }

    #placeholder-description {
      margin-top: 3px;
      opacity: 0.5;
      font-weight: 500;
      font-size: 14px;
    }

    /* Rubber band */

    #rubber-band {
      position: absolute;
      top: 0px;
      left: 0px;
      width: 0px;
      height: 0px;
      box-sizing: border-box;
      border-width: 1px;
      border-style: solid;
      pointer-events: none;
      background: var(--rubber-band-background-color);
      border-color: var(--rubber-band-border-color);
    }

    /* Ghost */

    #ghost {
      position: absolute;
      padding: 5px 7px 5px 18px;
      font-size: 12px;
      font-weight: 500;
      line-height: 1;
      pointer-events: none;
      width: fit-content;
      transform: translateY(-99999px);
    }
  `;
  get whenNextUpdate() {
    return new Promise((af) => {
      this.#Kn.push(af);
    });
  }
  get enabled() {
    return this.hasAttribute("enabled");
  }
  set enabled(af) {
    if (af) {
      this.setAttribute("enabled", "");
    } else {
      this.removeAttribute("enabled");
    }
  }
  get locked() {
    return this.hasAttribute("locked");
  }
  set locked(af) {
    if (af) {
      this.setAttribute("locked", "");
    } else {
      this.removeAttribute("locked");
    }
  }
  get selectedFiles() {
    return [
      ...this["#previews"].querySelectorAll("bx-cloudfilepreview[selected]"),
    ].map((af) => af.value);
  }
  set selectedFiles(af) {
    for (let ag of this["#previews"].querySelectorAll("bx-cloudfilepreview")) {
      ag.selected = af.includes(ag.value);
    }
  }
  get selectedFolders() {
    return [
      ...this["#previews"].querySelectorAll("bx-cloudfolderpreview[selected]"),
    ].map((af) => af.value);
  }
  set selectedFolders(af) {
    for (let ag of this["#previews"].querySelectorAll(
      "bx-cloudfolderpreview"
    )) {
      ag.selected = af.find((ah) => q(ah, ag.value)) !== undefined;
    }
  }
  #P;
  #Zn;
  #Kn;
  #En;
  #Yt;
  #Yn;
  #Xn;
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Za.#S];
    this.#P.append(document.importNode(Za.#C.content, true));
    this.#Kn = [];
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
    this.addEventListener("keydown", (ag) => this.#ie(ag));
    this["#main"].addEventListener("pointerdown", (ag) => this.#Jn(ag));
    this["#main"].addEventListener("thumbnaildblclick", (ag) => this.#Qn(ag));
    this["#main"].addEventListener("dragstart", (ag) => this.#el(ag));
    this["#main"].addEventListener("namechange", (ag) => this.#tl(ag));
    this["#main"].addEventListener("contextmenu", (ag) => this.#il(ag));
  }
  connectedCallback() {
    this.tabIndex = 0;
    this.#Zn = si(this, "bx-cloudbrowser");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "enabled") {
      if (this.enabled) {
        this.#Ot();
      } else {
        this.#_t();
      }
    }
  }
  #Ot() {
    this.#Zn.cloudStorageModel.addEventListener(
      "change",
      (this.#En = () => this.#A())
    );
    this.#Zn.addEventListener("locationchange", (this.#Yt = () => this.#ii()));
    this.#Zn.addEventListener("searchchange", (this.#Yn = () => this.#A()));
    this.#Zn.addEventListener("sortchange", (this.#Xn = () => this.#A()));
    this.#A();
  }
  #_t() {
    this.#Zn.cloudStorageModel.removeEventListener("change", this.#En);
    this.#Zn.removeEventListener("locationchange", this.#Yt);
    this.#Zn.removeEventListener("searchchange", this.#Yn);
    this.#Zn.removeEventListener("sortchange", this.#Xn);
    this["#previews"].innerHTML = "";
  }
  #ii() {
    let af = [...this.selectedFiles, ...this.selectedFolders];
    this.#A();
    if (af.length > 0) {
      this.dispatchEvent(
        new CustomEvent("selectedchange", {
          bubbles: true,
        })
      );
    }
  }
  #Jn(af) {
    if (this.locked) {
      return;
    }
    let ag = af.target.closest("bx-cloudfilepreview, bx-cloudfolderpreview");
    let ah = [...this["#previews"].querySelectorAll("*")];
    let aj = [...this["#previews"].querySelectorAll("[selected]")];
    let { ctrl, shift } = ui.fromEvent(af);
    let am = this.#Zn.type === "manage" && (ctrl === true || shift === true);
    new DOMPoint(af.clientX, af.clientY);
    if (af.buttons <= 1) {
      if (ag) {
        if (am === false) {
          if (ag.selected === false) {
            for (let an of ah) {
              an.selected = !an.disabled && an === ag;
            }
            this.dispatchEvent(
              new CustomEvent("selectedchange", {
                bubbles: true,
              })
            );
          }
        } else if (am === true) {
          for (let ap of ah) {
            if (ap.disabled) {
              ap.selected = false;
            } else if (ap === ag) {
              ap.selected = !ap.selected;
            }
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      } else if (af.offsetX < af.target.clientWidth) {
        if (aj.length > 0 && shift === false) {
          for (let aq of aj) {
            aq.selected = false;
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
        if (this.#Zn.type === "manage") {
          this.#sl(af);
        }
      }
    }
  }
  #Qn(af) {
    if (this.locked) {
      return;
    }
    let ag = af.target.closest("bx-cloudfilepreview, bx-cloudfolderpreview");
    if (ag.disabled === false) {
      if (ag.localName === "bx-cloudfilepreview") {
        if (this.#Zn.type === "manage") {
          this.#Zn.openFile(ag.value, "app");
        } else {
          this.dispatchEvent(
            new CustomEvent("filepreviewdblclick", {
              bubbles: true,
            })
          );
        }
      } else if (ag.localName === "bx-cloudfolderpreview") {
        this.#Zn.navigate(ag.value);
      }
    }
  }
  async #il(af) {
    af.preventDefault();
    if (this.locked || this.#Zn.type !== "manage") {
      return;
    }
    let ag = af.target.closest("bx-cloudfilepreview, bx-cloudfolderpreview");
    let ah = [...this["#previews"].querySelectorAll("*")];
    let aj = ah.filter((ak) => ak.selected);
    if (ag) {
      if (ag.selected === false) {
        for (let ak of ah) {
          if (ak.disabled) {
            ak.selected = false;
          } else {
            ak.selected = ak === ag;
          }
        }
        this.dispatchEvent(
          new CustomEvent("selectedchange", {
            bubbles: true,
          })
        );
      }
    } else if (aj.length > 0) {
      for (let al of aj) {
        al.selected = false;
      }
      this.dispatchEvent(
        new CustomEvent("selectedchange", {
          bubbles: true,
        })
      );
    }
    if (ag === null || ag.hasAttribute("editing") === false) {
      this.#Zn.openContextMenu();
    }
  }
  #el(af) {
    let ag;
    let ah;
    let aj;
    let ak = [...this["#previews"].children];
    let al = ak.filter((am) => am.selected);
    af.target;
    if (al.length === 1) {
      this["#ghost"].textContent = "Dragging 1 item";
    } else {
      this["#ghost"].textContent = "Dragging " + al.length + " items";
    }
    af.dataTransfer.effectAllowed = "copy";
    af.dataTransfer.setDragImage(this["#ghost"], 0, 0);
    af.dataTransfer.setData(
      "application/com.boxy-svg.bx-cloudbrowser:items",
      JSON.stringify({
        files: this.selectedFiles,
        folders: this.selectedFolders,
      })
    );
    this["#previews"].addEventListener(
      "dragover",
      (ah = (am) => {
        if (am.target.localName === "bx-cloudfolderpreview") {
          if (am.target.selected === false) {
            am.preventDefault();
            for (let an of ak) {
              an.highlighted = an === am.target;
            }
          }
        } else {
          for (let ap of ak) {
            ap.highlighted = false;
          }
        }
      })
    );
    this["#previews"].addEventListener(
      "drop",
      (ag = (am) => {
        this["#previews"].removeEventListener("drop", ag);
        this["#previews"].removeEventListener("dragover", ah);
        this["#previews"].removeEventListener("dragend", aj);
        for (let ap of ak) {
          ap.highlighted = false;
        }
        let an = am.target;
        if (an?.localName === "bx-cloudfolderpreview") {
          this.#Zn.moveSelectionToFolder(an.value);
        }
      })
    );
    this["#previews"].addEventListener(
      "dragend",
      (aj = (am) => {
        this["#previews"].removeEventListener("drop", ag);
        this["#previews"].removeEventListener("dragover", ah);
        this["#previews"].removeEventListener("dragend", aj);
        for (let an of ak) {
          an.highlighted = false;
        }
      })
    );
  }
  #ie(af) {
    if (
      this.locked ||
      this.matches(":focus") === false ||
      this["#previews"].querySelector("[editing]") !== null
    ) {
      return;
    }
    let ag = ui.fromEvent(af);
    if (ag.matches("Enter")) {
      af.stopPropagation();
      let ah = [...this["#previews"].querySelectorAll(":scope > *[selected]")];
      if (ah.length === 1) {
        ah[0].editName();
      }
    } else if (ag.matches("Control", "A")) {
      this.selectAllPreviews();
    } else if (ag.matches("ArrowLeft")) {
      af.stopPropagation();
      this.#al("left");
    } else if (ag.matches("ArrowRight")) {
      af.stopPropagation();
      this.#al("right");
    } else if (ag.matches("ArrowUp")) {
      af.preventDefault();
      af.stopPropagation();
      this.#al("up");
    } else if (ag.matches("ArrowDown")) {
      af.preventDefault();
      af.stopPropagation();
      this.#al("down");
    } else if (ag.matches("Shift", "ArrowLeft")) {
      af.stopPropagation();
      if (this.#Zn.type === "manage") {
        this.#al("left", true);
      }
    } else if (ag.matches("Shift", "ArrowRight")) {
      af.stopPropagation();
      if (this.#Zn.type === "manage") {
        this.#al("right", true);
      }
    } else if (ag.matches("Shift", "ArrowUp")) {
      af.stopPropagation();
      if (this.#Zn.type === "manage") {
        af.preventDefault();
        this.#al("up", true);
      }
    } else if (ag.matches("Shift", "ArrowDown")) {
      af.stopPropagation();
      if (this.#Zn.type === "manage") {
        af.preventDefault();
        this.#al("down", true);
      }
    }
  }
  #tl(af) {
    let ag = af.target;
    let { oldName, newName } = af.detail;
    if (newName !== oldName) {
      if (ag.localName === "bx-cloudfilepreview") {
        this.#Zn.renameFile(ag.value, newName);
      } else if (ag.localName === "bx-cloudfolderpreview") {
        this.#Zn.renameFolder(ag.value, newName);
      }
    }
  }
  #sl(af) {
    let ag;
    let ah;
    let aj = this["#main"].getBoundingClientRect();
    let ak = new DOMPoint(af.clientX, af.clientY);
    let al = new DOMPoint(ak.x - aj.x, ak.y - aj.y);
    let am = new DOMPoint(
      al.x + this["#main"].scrollLeft,
      al.y + this["#main"].scrollTop
    );
    let an = [...this["#previews"].querySelectorAll(":scope > *")];
    let ap = an.filter((av) => av.selected === true);
    let aq = Symbol();
    let ar = Symbol();
    let au = Symbol();
    this.setPointerCapture(af.pointerId);
    this["#rubber-band"].hidden = false;
    this["#rubber-band"].style.top = am.y + "px";
    this["#rubber-band"].style.left = am.x + "px";
    this["#rubber-band"].style.width = "0px";
    this["#rubber-band"].style.height = "0px";
    for (let av of an) {
      let aw = av.getBoundingClientRect();
      let ax = new DOMRect(aw.x - aj.x, aw.y - aj.y, aw.width, aw.height);
      let ay = new DOMRect(
        ax.x + this["#main"].scrollLeft,
        ax.y + this["#main"].scrollTop,
        ax.width,
        ax.height
      );
      av[aq] = aw;
      av[ar] = ax;
      av[au] = ay;
    }
    this.addEventListener(
      "pointermove",
      (ag = (az) => {
        let aA = new DOMPoint(az.clientX, az.clientY);
        let aB = new DOMPoint(aA.x - aj.x, aA.y - aj.y);
        let aC = new DOMPoint(
          aB.x + this["#main"].scrollLeft,
          aB.y + this["#main"].scrollTop
        );
        let aD = new DOMRect();
        aC.x = M(aC.x, 0, this["#main"].scrollWidth);
        aC.y = M(aC.y, 0, this["#main"].scrollHeight);
        if (aC.x < am.x) {
          aD.x = aC.x;
          aD.width = am.x - aC.x;
        } else {
          aD.x = am.x;
          aD.width = aC.x - am.x;
        }
        if (aC.y < am.y) {
          aD.y = aC.y;
          aD.height = am.y - aC.y;
        } else {
          aD.y = am.y;
          aD.height = aC.y - am.y;
        }
        let aE = new DOMRect(
          aj.x + aD.x - this["#main"].scrollLeft,
          aj.y + aD.y - this["#main"].scrollTop,
          aD.width,
          aD.height
        );
        this["#rubber-band"].style.left = aD.x + "px";
        this["#rubber-band"].style.top = aD.y + "px";
        this["#rubber-band"].style.width = aD.width + "px";
        this["#rubber-band"].style.height = aD.height + "px";
        if (aC.y > this["#main"].scrollTop + this["#main"].clientHeight) {
          let aF =
            aC.y - (this["#main"].scrollTop + this["#main"].clientHeight);
          this["#main"].scrollTop += aF;
        } else if (aC.y < this["#main"].scrollTop) {
          let aG = aC.y - this["#main"].scrollTop;
          this["#main"].scrollTop += aG;
        }
        {
          let aH = [];
          for (let aI of an) {
            let aJ = aI[au];
            if (Ot(aD, aJ)) {
              aH.push(aI);
            }
          }
          aH = aH.filter((aK) => {
            let aL = aK[au];
            aM = aD;
            return (
              ((aN = aL).x >= aM.x &&
                aN.y >= aM.y &&
                aN.x + aN.width <= aM.x + aM.width &&
                aN.y + aN.height <= aM.y + aM.height) ||
              aK.hitTest(aE)
            );
            var aM;
            var aN;
          });
          if (af.shiftKey) {
            for (let aK of an) {
              if (aH.includes(aK)) {
                aK.selected = !ap.includes(aK);
              } else {
                aK.selected = ap.includes(aK);
              }
            }
          } else {
            for (let aL of an) {
              aL.selected = aH.includes(aL);
            }
          }
        }
      })
    );
    this.addEventListener(
      "pointerup",
      (ah = (az) => {
        this.removeEventListener("pointermove", ag);
        this.removeEventListener("pointerup", ah);
        this.removeEventListener("pointercancel", ah);
        let aA = an.filter((aB) => aB.selected === true);
        if (q(ap, aA) === false) {
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
        this["#rubber-band"].hidden = true;
      })
    );
    this.addEventListener("pointercancel", ah);
  }
  selectAllPreviews() {
    let af = [...this["#previews"].querySelectorAll(":scope > *")].filter(
      (ag) => ag.selected === false
    );
    if (af.length > 0) {
      for (let ag of af) {
        ag.selected = true;
      }
      this.dispatchEvent(
        new CustomEvent("selectedchange", {
          bubbles: true,
        })
      );
    }
  }
  #al(af, ag = false) {
    let ah = [...this["#previews"].querySelectorAll(":scope > *")];
    let aj = [...this["#previews"].querySelectorAll(":scope > *[selected]")];
    if (af === "left") {
      let ak = aj.length > 0 ? aj[0] : null;
      if (ak) {
        let al = ak;
        if (ak.previousElementSibling?.offsetTop === ak.offsetTop) {
          al = ak.previousElementSibling;
        }
        if (ag === false) {
          for (let am of ah) {
            if (am === al) {
              am.selected = true;
              am.scrollIntoViewIfNeeded();
            } else {
              am.selected = false;
            }
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        } else {
          al.selected = true;
          al.scrollIntoViewIfNeeded();
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      } else {
        let an = this["#previews"].lastElementChild;
        if (an) {
          an.selected = true;
          an.scrollIntoViewIfNeeded();
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      }
    } else if (af === "right") {
      let ap = aj.length > 0 ? aj[aj.length - 1] : null;
      if (ap) {
        let aq = ap;
        if (ap.nextElementSibling?.offsetTop === ap.offsetTop) {
          aq = ap.nextElementSibling;
        }
        if (ag === false) {
          for (let ar of ah) {
            if (ar === aq) {
              ar.selected = true;
              ar.scrollIntoViewIfNeeded();
            } else {
              ar.selected = false;
            }
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        } else {
          aq.selected = true;
          aq.scrollIntoViewIfNeeded();
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      } else {
        let au = this["#previews"].firstElementChild;
        if (au) {
          au.selected = true;
          au.scrollIntoViewIfNeeded();
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      }
    } else if (af === "up") {
      let av = aj.length > 0 ? aj[0] : null;
      if (av) {
        let aw = av;
        for (
          let ax = av.previousElementSibling;
          ax !== null;
          ax = ax.previousElementSibling
        ) {
          if (ax.offsetLeft === av.offsetLeft) {
            aw = ax;
            break;
          }
        }
        if (ag === false) {
          for (let ay of ah) {
            if (ay === aw) {
              ay.selected = true;
              ay.scrollIntoViewIfNeeded();
            } else {
              ay.selected = false;
            }
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        } else {
          for (
            let az = av.previousElementSibling;
            az !== null;
            az = az.previousElementSibling
          ) {
            az.selected = true;
            if (az === aw) {
              az.scrollIntoViewIfNeeded();
              break;
            }
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      } else {
        let aA = this["#previews"].lastElementChild;
        if (aA) {
          aA.selected = true;
          aA.scrollIntoViewIfNeeded();
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      }
    } else if (af === "down") {
      let aB = aj.length > 0 ? aj[aj.length - 1] : null;
      if (aB) {
        let aC = aB;
        for (
          let aD = aB.nextElementSibling;
          aD !== null &&
          (aD.offsetTop <= aB.offsetTop ||
            !((aC = aD), aD.offsetLeft === aB.offsetLeft));
          aD = aD.nextElementSibling
        );
        if (ag === false) {
          for (let aE of ah) {
            if (aE === aC) {
              aE.selected = true;
              aE.scrollIntoViewIfNeeded();
            } else {
              aE.selected = false;
            }
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        } else {
          for (
            let aF = aB.nextElementSibling;
            aF !== null;
            aF = aF.nextElementSibling
          ) {
            aF.selected = true;
            if (aF === aC) {
              aF.scrollIntoViewIfNeeded();
              break;
            }
          }
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      } else {
        let aG = this["#previews"].firstElementChild;
        if (aG) {
          aG.selected = true;
          aG.scrollIntoViewIfNeeded();
          this.dispatchEvent(
            new CustomEvent("selectedchange", {
              bubbles: true,
            })
          );
        }
      }
    }
  }
  renameSelected() {
    let af = this["#previews"].querySelector("*[selected]");
    if (af) {
      af.editName();
    }
  }
  #A() {
    let { location, search, sort } = this.#Zn;
    let { selectedFiles, selectedFolders } = this;
    let al = this.#Zn.cloudStorageModel;
    let [am, an] = al.query(location, search, sort, search !== "");
    this["#previews"].innerHTML = "";
    for (let ap of an) {
      let aq = ie`<bx-cloudfolderpreview class="preview"></bx-cloudfolderpreview>`;
      aq.value = ap;
      if (this.#Zn.type === "manage") {
        aq.editable = true;
        aq.disabled = false;
      } else if (this.#Zn.type === "open" || this.#Zn.type === "save") {
        aq.editable = false;
        aq.disabled = false;
      }
      for (let ar of selectedFolders) {
        if (q(ar, ap, true)) {
          aq.selected = true;
        }
      }
      this["#previews"].append(aq);
    }
    for (let au of am) {
      let { uid, name, library, path } = au;
      let az = ie`<bx-cloudfilepreview class="preview"></bx-cloudfilepreview>`;
      az.value = uid;
      az.name = name;
      az.library = library !== "none";
      if (this.#Zn.type === "manage") {
        az.editable = true;
        az.disabled = false;
      } else if (this.#Zn.type === "open") {
        az.editable = false;
        az.disabled = false;
      } else if (this.#Zn.type === "save") {
        az.editable = false;
        az.disabled = true;
      }
      if (selectedFiles.includes(uid)) {
        az.selected = true;
      }
      this["#previews"].append(az);
    }
    this["#placeholder"].hidden = am.length > 0 || an.length > 0;
    if (search === "") {
      if (this.#Zn.cloudStorageModel.ready === false) {
        this["#placeholder-title"].textContent = "";
        this["#placeholder-description"].textContent = "";
      } else if (this.#Zn.location.length > 0) {
        this["#placeholder-title"].textContent = "No files found";
        this["#placeholder-description"].textContent =
          "There are no files in this folder";
      } else {
        this["#placeholder-title"].textContent = "No files found";
        this["#placeholder-description"].textContent =
          "You haven't saved any files to the cloud yet";
      }
    } else {
      this["#placeholder-title"].textContent = "No files found";
      this["#placeholder-description"].textContent =
        "Please try redefining your search query";
    }
    if (this.#Kn.length > 0) {
      for (let aA of this.#Kn) {
        aA();
      }
      this.#Kn = [];
    }
  }
}
customElements.define("bx-iconscloudbrowserview", Za);
class Ya extends HTMLElement {
  static observedAttributes = ["enabled"];
  static #C = ie` <template> <main id="main"></main> </template>
  `;
  static #S = se`
    :host {
      width: 100%;
      height: 100%;
      display: none;
      flex-flow: column;
    }
    :host([enabled]) {
      display: flex;
    }
    :host([locked]) {
      opacity: 0.5;
    }
    :host(:focus) {
      outline: none;
    }

    #main {
      flex: 1;
      overflow: auto;
      background: #f8f8f8;
      padding: 16px 16px 0 16px;
    }
    #main:focus {
      outline: none;
    }
  `;
  get enabled() {
    return this.hasAttribute("enabled");
  }
  set enabled(af) {
    if (af) {
      this.setAttribute("enabled", "");
    } else {
      this.removeAttribute("enabled");
    }
  }
  get locked() {
    return this.hasAttribute("locked");
  }
  set locked(af) {
    if (af) {
      this.setAttribute("locked", "");
    } else {
      this.removeAttribute("locked");
    }
  }
  get selectedFiles() {
    return this.#ol;
  }
  set selectedFiles(af) {
    this.#ol = af;
  }
  get selectedFolders() {
    return this.#nl;
  }
  set selectedFolders(af) {
    this.#nl = af;
  }
  #Zn;
  #P;
  #En;
  #Yt;
  #Yn;
  #ol = [];
  #nl = [];
  constructor() {
    super();
    this.#P = this.attachShadow({
      mode: "closed",
    });
    this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Ya.#S];
    this.#P.append(document.importNode(Ya.#C.content, true));
    for (let af of this.#P.querySelectorAll("[id]")) {
      this["#" + af.id] = af;
    }
  }
  connectedCallback() {
    this.tabIndex = 0;
    this.#Zn = si(this, "bx-cloudbrowser");
  }
  attributeChangedCallback(af, ag, ah) {
    if (ag !== ah && af === "enabled") {
      if (this.enabled) {
        this.#Ot();
      } else {
        this.#_t();
      }
    }
  }
  #Ot() {
    this.#Zn.cloudStorageModel.addEventListener(
      "change",
      (this.#En = () => this.#A())
    );
    this.#Zn.addEventListener("locationchange", (this.#Yt = () => this.#A()));
    this.#Zn.addEventListener("searchchange", (this.#Yn = () => this.#A()));
    this.#A();
  }
  #_t() {
    this.#Zn.cloudStorageModel.removeEventListener("change", this.#En);
    this.#Zn.removeEventListener("locationchange", this.#Yt);
    this.#Zn.removeEventListener("searchchange", this.#Yn);
    this["#main"].innerHTML = "";
  }
  #A() {}
}
customElements.define("bx-columnscloudbrowserview", Ya);
class Xa extends HTMLElement {
  static #C = ie` <template> <div id="backdrop" part="backdrop"></div> <img id="image" part="image"> </template>
  `;
  static #S = se`
    :host {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      contain: strict;
      z-index: 1;
    }
    :host([open]) {
      display: block;
    }

    #backdrop {
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #image {
      display: block;
      position: fixed;
      left: 0;
      top: 0;
      margin: 0;
      transform-origin: 0 0;
      will-change: transform;
      box-sizing: border-box;
      background: var(--checkboard-background);
      border-width: 1px;
      border-style: solid;
      cursor: zoom-out;
    }
  `;
  get open() {
    return this.hasAttribute("open");
  }
  #T;
  #P;
  #ll;
  #rl;
  #hl;
  #cl;
  #dl;
  #ul;
  #ys;
  constructor() {
    super();
  }
  connectedCallback() {
    this.#T = si(this, "#app");
    this.#ll = false;
    if (!this.#P) {
      this.#P = this.attachShadow({
        mode: "closed",
      });
      this.#P.adoptedStyleSheets = [a2.themeStyleSheet, Xa.#S];
      this.#P.append(document.importNode(Xa.#C.content, true));
      for (let af of this.#P.querySelectorAll("[id]")) {
        this["#" + af.id] = af;
      }
      this.#P.addEventListener("click", (ag) => {
        this.#Xe(ag);
      });
    }
  }
  async showModal(af) {
    this.#rl = af;
    let ag;
    let ah;
    let { naturalWidth, naturalHeight } = af;
    let al = af.getBoundingClientRect();
    this["#image"].src = af.src;
    this.setAttribute("open", "");
    window.addEventListener("scroll", (this.#cl = () => this.#L(event)));
    window.addEventListener("resize", (this.#dl = () => this.#pl()));
    window.addEventListener("keydown", (this.#ul = () => this.#ie(event)));
    this.#T.addEventListener("locationchange", (this.#ys = () => this.close()));
    {
      let am = 20;
      let an =
        document.documentElement.offsetWidth -
        document.documentElement.clientWidth;
      if (
        this.#T.clientWidth < this.#T.computedStyleMap().get("max-width").value
      ) {
        an = 0;
      }
      ag = new DOMRect(
        am,
        am,
        window.innerWidth - am * 2 - an,
        window.innerHeight - am * 2
      );
      if (ag.width > naturalWidth) {
        ag.x = window.innerWidth / 2 - naturalWidth / 2;
        ag.width = naturalWidth;
      }
      if (ag.height > naturalHeight) {
        ag.y = window.innerHeight / 2 - naturalHeight / 2;
        ag.height = naturalHeight;
      }
    }
    {
      let ap = ag.width / al.width;
      let aq = ag.height / al.height;
      if (ap > aq) {
        ap = aq;
      } else if (aq > ap) {
        aq = ap;
      }
      let ar = ag.x - al.x * ap;
      let au = ag.y - al.y * aq;
      ar += (ag.width - al.width * ap) / 2;
      au += (ag.height - al.height * aq) / 2;
      let av = new DOMMatrix();
      av.translateSelf(ar, au);
      av.scaleSelf(ap, aq);
      ah = Rt(al, av);
    }
    {
      let aw = new DOMRect(0, 0, naturalWidth, naturalHeight);
      let ax = dt(aw, al);
      let ay = dt(aw, ah);
      this["#backdrop"].style.opacity = 1;
      this["#image"].style.width = naturalWidth + "px";
      this["#image"].style.height = naturalHeight + "px";
      this["#image"].style.transform = ay.toString();
      let az = this["#image"].animate(
        {
          transform: [ax.toString(), ay.toString()],
        },
        {
          duration: 200,
          easing: "ease-out",
        }
      );
      let aA = this["#backdrop"].animate(
        {
          opacity: [0, 1],
        },
        {
          duration: 200,
          easing: "ease-out",
        }
      );
      await Promise.all([az.finished, aA.finished]);
    }
  }
  async close() {
    if (this.#hl) {
      return;
    }
    let { naturalWidth, naturalHeight } = this.#rl;
    let ah = this["#image"].getBoundingClientRect();
    let aj = this.#rl.getBoundingClientRect();
    window.removeEventListener("scroll", this.#cl);
    window.removeEventListener("resize", this.#dl);
    window.removeEventListener("keydown", this.#ul);
    this.#T.removeEventListener("locationchange", this.#ys);
    {
      let ak = new DOMRect(0, 0, naturalWidth, naturalHeight);
      let al = dt(ak, ah);
      let am = dt(ak, aj);
      this["#backdrop"].style.opacity = 0;
      this["#image"].style.transform = null;
      let an = this["#image"].animate(
        {
          transform: [al.toString(), am.toString()],
        },
        {
          duration: 200,
          easing: "ease-in",
        }
      );
      let ap = this["#backdrop"].animate(
        {
          opacity: [1, 0],
        },
        {
          duration: 200,
          easing: "ease-in",
        }
      );
      this.#hl = Promise.all([an.finished, ap.finished]);
      await this.#hl;
      this.#hl = null;
    }
    this["#image"].src = "";
    this.removeAttribute("open");
  }
  #Xe(af) {
    this.close();
    this.dispatchEvent(new CustomEvent("close"));
  }
  #L(af) {
    this.close();
  }
  #pl() {
    this.close();
  }
  #ie(af) {
    let ag = ui.fromEvent(af);
    if (ag.matches("Enter") || ag.matches("Escape")) {
      af.stopPropagation();
      this.close();
    }
  }
}
if (customElements.get("bx-imageviewer") === undefined) {
  customElements.define("bx-imageviewer", Xa);
}
const Ja = [1, 0, 0, 1, 0, 0];
const Qa = [0.001, 0, 0, 0.001, 0, 0];
const eo = 1001;
const to = "#000000";
const io = "normal";
const so = "normal";
const ao = 0;
const oo = 1;
const no = 2;
const lo = 7;
const ro = 3;
const ho = 4;
const co = ["butt", "round", "square"];
const uo = ["miter", "round", "bevel"];
class po {
  #ml = {};
  #xl = {
    clip: 0,
    mask: 0,
    shading: 0,
  };
  #gl = null;
  #bl = Object.create(null);
  #fl = null;
  #wl = null;
  constructor(af) {
    this.#gl = af;
  }
  toSVG(af = true, ag = true) {
    return new Promise(async (ah) => {
      this.#ml.PDF = await import("../../libs/pdf/pdf.js");
      this.#ml.UPNG = (await import("../../libs/upng/upng.js")).default;
      let aj = await this.#ml.PDF.getDocument({
        data: this.#gl,
        disableFontFace: ag,
        fontExtraProperties: true,
        standardFontDataUrl: "libs/pdf/fonts/",
        isOffscreenCanvasSupported: true,
      }).promise;
      let ak = ei("svg:svg");
      ak.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      this.#fl = ei("svg:defs");
      ak.append(this.#fl);
      let al = 0;
      for (let am = 1; am <= aj.numPages; am += 1) {
        let an = await aj.getPage(am);
        this.tgrp = null;
        this.operatorList = await an.getOperatorList();
        this.viewport = an.getViewport({
          scale: 1,
        });
        this.current = new mo();
        this.transformMatrix = Ja;
        this.transformStack = [];
        this.extraStack = [];
        this.commonObjs = an.commonObjs;
        this.objs = an.objs;
        this.pendingClip = null;
        this.pendingEOFill = false;
        {
          let ap = [];
          for (
            let ar = 0, au = this.operatorList.fnArray.length;
            ar < au;
            ar++
          ) {
            if (this.operatorList.fnArray[ar] === this.#ml.PDF.OPS.dependency) {
              for (let av of this.operatorList.argsArray[ar]) {
                let aw = av.startsWith("g_") ? this.commonObjs : this.objs;
                let ax = new Promise((ay) => aw.get(av, ay));
                ap.push(ax);
              }
            }
          }
          let aq = await Promise.all(ap);
          for (let ay of aq) {
            if (ay.bitmap) {
              let az = new OffscreenCanvas(ay.bitmap.width, ay.bitmap.height);
              let aA = az.getContext("2d");
              aA.drawImage(ay.bitmap, 0, 0);
              let aB = aA.getImageData(0, 0, az.width, az.height);
              let aC = this.#ml.UPNG.encode(
                [aB.data.buffer],
                aB.width,
                aB.height,
                0
              );
              let aD = new Uint8Array(aC);
              let aE = new Blob([aD], {
                type: "image/png",
              });
              let aF = await me(aE);
              ay.dataURL = aF;
            }
          }
        }
        {
          let aG = ei("svg:g");
          aG.setAttribute("class", "page-" + am);
          ak.append(aG);
          this.containerElement = aG;
          this.transformMatrix = Ja;
          this.#vl(wo(this.operatorList, this.#ml.PDF.OPS));
          if (am === 1) {
            ak.setAttribute("width", this.viewport.width + "px");
            ak.setAttribute("height", this.viewport.height + "px");
            ak.setAttribute(
              "viewBox",
              "0 0 " + this.viewport.width + " " + this.viewport.height
            );
            let aH = new DOMMatrix(this.viewport.transform);
            aG.setAttribute("transform", aH.toString());
          } else {
            let aI = new DOMMatrix(this.viewport.transform);
            aI = new DOMMatrix().translate(0, al).multiply(aI);
            aG.setAttribute("transform", aI.toString());
            if (af) {
              let aJ = ei("svg:view");
              aJ.setAttribute(
                "viewBox",
                "0 " +
                  al +
                  " " +
                  this.viewport.width +
                  " " +
                  this.viewport.height
              );
              this.#fl.append(aJ);
            }
          }
          al += this.viewport.height + 20;
        }
      }
      if (ag) {
        let aK = ak.querySelector("style#embedded-fonts");
        let aL = [...ak.querySelectorAll("text")];
        if (aL.length > 0) {
          let aM = new Qe(ak);
          for (let aN of aL) {
            await Ct(aN);
          }
          aM.destroy();
        }
        if (aK) {
          aK.remove();
        }
      }
      ah(ak);
    });
  }
  #vl(af) {
    let ag = this.#ml.PDF.OPS;
    for (let ah of af) {
      let aj = ah.args;
      switch (ah.fnId | 0) {
        case ag.dependency:
          break;
        case ag.setLineWidth:
          this.#yl(aj[0]);
          break;
        case ag.setLineCap:
          this.#kl(aj[0]);
          break;
        case ag.setLineJoin:
          this.#Cl(aj[0]);
          break;
        case ag.setMiterLimit:
          this.#Sl(aj[0]);
          break;
        case ag.setDash:
          this.#Tl(aj[0], aj[1]);
          break;
        case ag.setRenderingIntent:
          this.#$l(aj[0]);
          break;
        case ag.setFlatness:
          this.#Pl(aj[0]);
          break;
        case ag.setGState:
          this.#El(aj[0]);
          break;
        case ag.save:
        case ag.restore:
          break;
        case ag.transform:
          this.#Ll(aj[0], aj[1], aj[2], aj[3], aj[4], aj[5]);
          break;
        case ag.closePath:
          this.#Ul();
          break;
        case ag.stroke:
          this.#Dl();
          break;
        case ag.closeStroke:
          this.#zl();
          break;
        case ag.fill:
          this.#Ml();
          break;
        case ag.eoFill:
          this.#Al();
          break;
        case ag.fillStroke:
          this.#Bl();
          break;
        case ag.eoFillStroke:
          this.#Rl();
          break;
        case ag.closeFillStroke:
          this.#Il();
          break;
        case ag.closeEOFillStroke:
          this.#Fl();
          break;
        case ag.endPath:
          this.#Nl();
          break;
        case ag.clip:
          this.#Ol("nonzero");
          break;
        case ag.eoClip:
          this.#Ol("evenodd");
          break;
        case ag.beginText:
          this.#_l();
          break;
        case ag.endText:
          this.#ql();
          break;
        case ag.setCharSpacing:
          this.#jl(aj[0]);
          break;
        case ag.setWordSpacing:
          this.#Vl(aj[0]);
          break;
        case ag.setHScale:
          this.#Gl(aj[0]);
          break;
        case ag.setLeading:
          this.#Hl(aj);
          break;
        case ag.setFont:
          this.#Wl(aj);
          break;
        case ag.setTextRenderingMode:
          this.#Kl(aj[0]);
          break;
        case ag.setTextRise:
          this.#Zl(aj[0]);
          break;
        case ag.moveText:
          this.#Yl(aj[0], aj[1]);
          break;
        case ag.setLeadingMoveText:
          this.#Xl(aj[0], aj[1]);
          break;
        case ag.setTextMatrix:
          this.#Jl(aj[0], aj[1], aj[2], aj[3], aj[4], aj[5]);
          break;
        case ag.nextLine:
          this.#Ql();
          break;
        case ag.showText:
        case ag.showSpacedText:
          this.#er(aj[0]);
          break;
        case ag.nextLineShowText:
          console.warn("Unimplemented operator: nextLineShowText");
          break;
        case ag.nextLineSetSpacingShowText:
          console.warn("Unimplemented operator: nextLineSetSpacingShowText");
          break;
        case ag.setCharWidth:
          console.warn("Unimplemented operator: setCharWidth");
          break;
        case ag.setCharWidthAndBounds:
          console.warn("Unimplemented operator: setCharWidthAndBounds");
          break;
        case ag.setStrokeColorSpace:
          console.warn("Unimplemented operator: setStrokeColorSpace");
          break;
        case ag.setFillColorSpace:
          console.warn("Unimplemented operator: setFillColorSpace");
          break;
        case ag.setStrokeColor:
          console.warn("Unimplemented operator: setStrokeColor");
          break;
        case ag.setStrokeColorN:
          this.#tr(aj);
          break;
        case ag.setFillColor:
          console.warn("Unimplemented operator: setFillColor");
          break;
        case ag.setFillColorN:
          this.#ir(aj);
          break;
        case ag.setStrokeGray:
          console.warn("Unimplemented operator: setStrokeGray");
          break;
        case ag.setFillGray:
          console.warn("Unimplemented operator: setFillGray");
          break;
        case ag.setStrokeRGBColor:
          this.#sr(aj[0], aj[1], aj[2]);
          break;
        case ag.setFillRGBColor:
          this.#ar(aj[0], aj[1], aj[2]);
          break;
        case ag.setStrokeCMYKColor:
          console.warn("Unimplemented operator: setStrokeCMYKColor");
          break;
        case ag.setFillCMYKColor:
          console.warn("Unimplemented operator: setFillCMYKColor");
          break;
        case ag.shadingFill:
          this.#or(aj[0]);
          break;
        case ag.beginInlineImage:
          console.warn("Unimplemented operator: beginInlineImage");
          break;
        case ag.beginImageData:
          console.warn("Unimplemented operator: beginImageData");
          break;
        case ag.endInlineImage:
          console.warn("Unimplemented operator: endInlineImage");
          break;
        case ag.paintXObject:
          console.warn("Unimplemented operator: paintXObject");
          break;
        case ag.markPoint:
          console.warn("Unimplemented operator: markPoint");
          break;
        case ag.markPointProps:
          console.warn("Unimplemented operator: markPointProps");
          break;
        case ag.beginMarkedContent:
          console.warn("Unimplemented operator: beginMarkedContent");
          break;
        case ag.beginMarkedContentProps:
          console.warn("Unimplemented operator: beginMarkedContentProps");
          break;
        case ag.endMarkedContent:
          console.warn("Unimplemented operator: endMarkedContent");
          break;
        case ag.beginCompat:
          console.warn("Unimplemented operator: beginCompat");
          break;
        case ag.endCompat:
          console.warn("Unimplemented operator: endCompat");
          break;
        case ag.paintFormXObjectBegin:
          this.#nr(aj[0], aj[1]);
          break;
        case ag.paintFormXObjectEnd:
          this.#lr();
          break;
        case ag.beginGroup:
          console.warn("Unimplemented operator: beginGroup");
          break;
        case ag.endGroup:
          console.warn("Unimplemented operator: endGroup");
          break;
        case ag.beginAnnotation:
          console.warn("Unimplemented operator: beginAnnotation");
          break;
        case ag.endAnnotation:
          console.warn("Unimplemented operator: endAnnotation");
          break;
        case ag.paintImageMaskXObject:
          this.#rr(aj[0]);
          break;
        case ag.paintImageMaskXObjectGroup:
          console.warn("Unimplemented operator: paintImageMaskXObjectGroup");
          break;
        case ag.paintImageXObject:
          this.#hr(aj[0]);
          break;
        case ag.paintInlineImageXObject:
          this.#cr(aj[0]);
          break;
        case ag.paintInlineImageXObjectGroup:
          console.warn("Unimplemented operator: paintInlineImageXObjectGroup");
          break;
        case ag.paintImageXObjectRepeat:
          console.warn("Unimplemented operator: paintImageXObjectRepeat");
          break;
        case ag.paintImageMaskXObjectRepeat:
          console.warn("Unimplemented operator: paintImageMaskXObjectRepeat");
          break;
        case ag.paintSolidColorImageMask:
          this.#dr();
          break;
        case ag.constructPath:
          this.#ur(aj[0], aj[1]);
          break;
        case eo:
          this.#pr(ah.items);
          break;
        default:
          console.warn("Unimplemented operator " + ah.fn);
      }
    }
  }
  #yl(af) {
    if (af > 0) {
      this.current.lineWidth = af;
    }
  }
  #kl(af) {
    this.current.lineCap = co[af];
  }
  #Cl(af) {
    this.current.lineJoin = uo[af];
  }
  #Sl(af) {
    this.current.miterLimit = af;
  }
  #Tl(af, ag) {
    this.current.dashArray = af;
    this.current.dashPhase = ag;
  }
  #$l(af) {}
  #Pl(af) {}
  #El(af) {
    for (let [ag, ah] of af) {
      switch (ag) {
        case "LW":
          this.#yl(ah);
          break;
        case "LC":
          this.#kl(ah);
          break;
        case "LJ":
          this.#Cl(ah);
          break;
        case "ML":
          this.#Sl(ah);
          break;
        case "D":
          this.#Tl(ah[0], ah[1]);
          break;
        case "RI":
          this.#$l(ah);
          break;
        case "FL":
          this.#Pl(ah);
          break;
        case "Font":
          this.#Wl(ah);
          break;
        case "CA":
          this.#mr(ah);
          break;
        case "ca":
          this.#xr(ah);
          break;
        default:
          console.warn("Unimplemented graphic state operator: " + ag);
      }
    }
  }
  #Ll(af, ag, ah, aj, ak, al) {
    let { transform } = this.#ml.PDF.Util;
    this.transformMatrix = transform(this.transformMatrix, [
      af,
      ag,
      ah,
      aj,
      ak,
      al,
    ]);
    this.tgrp = null;
  }
  #Ul() {
    let af = this.current;
    if (af.path) {
      let ag = af.path.getAttribute("d") + "Z";
      af.path.setAttribute("d", ag);
    }
  }
  #Dl() {
    let af = this.current;
    if (af.element) {
      this.#gr(af.element);
      af.element.style.setProperty("fill", "none");
      this.#Nl();
    }
  }
  #zl() {
    this.#Ul();
    this.#Dl();
  }
  #Ml() {
    let af = this.current;
    if (af.element) {
      af.element.style.setProperty("fill", af.fillColor);
      af.element.style.setProperty("fill-opacity", af.fillAlpha);
      this.#Nl();
    }
  }
  #Al() {
    this.current.element?.style.setProperty("fill-rule", "evenodd");
    this.#Ml();
  }
  #Bl() {
    this.#Dl();
    this.#Ml();
  }
  #Rl() {
    this.current.element?.style.setProperty("fill-rule", "evenodd");
    this.#Bl();
  }
  #Il() {
    this.#Ul();
    this.#Bl();
  }
  #Fl() {
    this.#Ul();
    this.#Rl();
  }
  #Nl() {
    let af = this.current;
    af.path = null;
    if (!this.pendingClip) {
      return;
    }
    if (!af.element) {
      this.pendingClip = null;
      return;
    }
    let ag = "clippath" + this.#xl.clip++;
    let ah = ei("svg:clipPath");
    ah.setAttribute("id", ag);
    ah.setAttribute("transform", go(this.transformMatrix));
    let aj = af.element.cloneNode(true);
    if (this.pendingClip === "evenodd") {
      aj.style.setProperty("clip-rule", "evenodd");
    } else {
      aj.style.setProperty("clip-rule", "nonzero");
    }
    this.pendingClip = null;
    ah.append(aj);
    this.#fl.append(ah);
    if (af.activeClipUrl) {
      af.clipGroup = null;
      for (let ak of this.extraStack) {
        ak.clipGroup = null;
      }
      ah.style.setProperty("clip-path", af.activeClipUrl);
    }
    af.activeClipUrl = "url(#" + ag + ")";
    this.tgrp = null;
  }
  #_l() {
    let af = this.current;
    af.x = af.lineX = 0;
    af.y = af.lineY = 0;
    af.textMatrix = Ja;
    af.lineMatrix = Ja;
    af.textMatrixScale = 1;
    af.tspan = ei("svg:tspan");
    af.txtElement = ei("svg:text");
    af.txtgrp = ei("svg:g");
    af.xcoords = [];
    af.ycoords = [];
  }
  #ql() {
    let af = this.current;
    if (af.textRenderingMode & ho && af.txtElement?.hasChildNodes()) {
      af.element = af.txtElement;
      this.#Ol("nonzero");
      this.#Nl();
    }
  }
  #jl(af) {
    this.current.charSpacing = af;
  }
  #Vl(af) {
    this.current.wordSpacing = af;
  }
  #Gl(af) {
    this.current.textHScale = af / 100;
  }
  #Hl(af) {
    this.current.leading = -af;
  }
  #Wl(af) {
    let ag = this.current;
    let ah = this.commonObjs.get(af[0]);
    let aj = af[1];
    let ak = "normal";
    let al = "normal";
    ag.font = ah;
    if (!ah.missingFile && !this.#bl[ah.loadedName]) {
      if (!this.#wl) {
        this.#wl = ei("svg:style");
        this.#wl.setAttribute("type", "text/css");
        this.#wl.setAttribute("id", "embedded-fonts");
        this.#fl.append(this.#wl);
      }
      let am = fo(ah.data, ah.mimetype);
      this.#wl.textContent +=
        '@font-face { font-family: "' +
        ah.loadedName +
        '"; src: url(' +
        am +
        "); }\n";
      this.#bl[ah.loadedName] = ah;
    }
    ag.fontMatrix = ah.fontMatrix || Qa;
    if (ah.black) {
      ak = "900";
    } else if (ah.bold) {
      ak = "bold";
    }
    if (ah.italic) {
      al = "italic";
    }
    if (aj < 0) {
      aj = -aj;
      ag.fontDirection = -1;
    } else {
      ag.fontDirection = 1;
    }
    ag.fontSize = aj;
    ag.fontFamily = ah.loadedName;
    ag.fontWeight = ak;
    ag.fontStyle = al;
    ag.tspan = ei("svg:tspan");
    ag.tspan.setAttribute("y", xo(-ag.y));
    ag.xcoords = [];
    ag.ycoords = [];
  }
  #Kl(af) {
    this.current.textRenderingMode = af;
  }
  #Zl(af) {
    this.current.textRise = af;
  }
  #Yl(af, ag) {
    let ah = this.current;
    ah.x = ah.lineX += af;
    ah.y = ah.lineY += ag;
    ah.xcoords = [];
    ah.ycoords = [];
    ah.tspan = ei("svg:tspan");
    ah.tspan.style.setProperty("font-family", ah.fontFamily);
    ah.tspan.style.setProperty("font-size", xo(ah.fontSize) + "px");
    ah.tspan.setAttribute("y", xo(-ah.y));
  }
  #Xl(af, ag) {
    this.#Hl(-ag);
    this.#Yl(af, ag);
  }
  #Jl(af, ag, ah, aj, ak, al) {
    let am = this.current;
    am.textMatrix = am.lineMatrix = [af, ag, ah, aj, ak, al];
    am.textMatrixScale = Math.hypot(af, ag);
    am.x = am.lineX = 0;
    am.y = am.lineY = 0;
    am.xcoords = [];
    am.ycoords = [];
    am.tspan = ei("svg:tspan");
    am.tspan.style.setProperty("font-family", am.fontFamily);
    am.tspan.style.setProperty("font-size", xo(am.fontSize) + "px");
    am.tspan.setAttribute("y", xo(-am.y));
    am.txtElement = ei("svg:text");
    am.txtElement.append(am.tspan);
  }
  #Ql() {
    this.#Yl(0, this.current.leading);
  }
  #er(af) {
    let ag = this.current;
    let ah = ag.font;
    let aj = ag.fontSize;
    if (aj === 0) {
      return;
    }
    let { fontSizeScale, charSpacing, wordSpacing, fontDirection } = ag;
    let { vertical, defaultVMetrics } = ah;
    let ar = vertical ? 1 : -1;
    let au = aj * ag.fontMatrix[0];
    let av = ag.textHScale * fontDirection;
    let aw = 0;
    for (let az of af) {
      if (az === null) {
        aw += fontDirection * wordSpacing;
        continue;
      }
      if (typeof az == "number") {
        aw += (ar * az * aj) / 1000;
        continue;
      }
      let aA;
      let aB;
      let aC = (az.isSpace ? wordSpacing : 0) + charSpacing;
      let aD = az.fontChar;
      let aE = az.width;
      if (vertical) {
        let aF;
        let aG = az.vmetric || defaultVMetrics;
        aF = az.vmetric ? aG[1] : aE * 0.5;
        aF = -aF * au;
        let aH = aG[2] * au;
        aE = aG ? -aG[0] : aE;
        aA = aF / fontSizeScale;
        aB = (aw + aH) / fontSizeScale;
      } else {
        aA = aw / fontSizeScale;
        aB = 0;
      }
      if (az.isInFont || ah.missingFile) {
        ag.xcoords.push(ag.x + aA);
        if (vertical) {
          ag.ycoords.push(-ag.y + aB);
        }
        ag.tspan.textContent += aD;
      }
      aw += vertical
        ? aE * au - aC * fontDirection
        : aE * au + aC * fontDirection;
    }
    ag.tspan.setAttribute("x", ag.xcoords.map(xo).join(" "));
    if (vertical) {
      ag.tspan.setAttribute("y", ag.ycoords.map(xo).join(" "));
    } else {
      ag.tspan.setAttribute("y", xo(-ag.y));
    }
    if (vertical) {
      ag.y -= aw;
    } else {
      ag.x += aw * av;
    }
    ag.tspan.style.setProperty("font-family", ag.fontFamily);
    ag.tspan.style.setProperty("font-size", xo(ag.fontSize) + "px");
    if (ag.fontStyle !== io) {
      ag.tspan.style.setProperty("font-style", ag.fontStyle);
    }
    if (ag.fontWeight !== so) {
      ag.tspan.style.setProperty("font-weight", ag.fontWeight);
    }
    let ax = ag.textRenderingMode & ro;
    if (ax === ao || ax === no) {
      if (ag.fillColor !== to) {
        ag.tspan.style.setProperty("fill", ag.fillColor);
      }
      if (ag.fillAlpha < 1) {
        ag.tspan.style.setProperty("fill-opacity", ag.fillAlpha);
      }
    } else if (ag.textRenderingMode === lo) {
      ag.tspan.style.setProperty("fill", "transparent");
    } else {
      ag.tspan.style.setProperty("fill", "none");
    }
    if (ax === oo || ax === no) {
      let aI = 1 / (ag.textMatrixScale || 1);
      this.#gr(ag.tspan, aI);
    }
    let ay = ag.textMatrix;
    if (ag.textRise !== 0) {
      ay = ay.slice();
      ay[5] += ag.textRise;
    }
    ag.txtElement.setAttribute(
      "transform",
      go(ay) + " scale(" + xo(av) + ", -1)"
    );
    ag.txtElement.style.setProperty("white-space", "pre");
    ag.txtElement.append(ag.tspan);
    ag.txtgrp.append(ag.txtElement);
    this.#br().append(ag.txtElement);
  }
  #tr(af) {
    if (af[0] === "TilingPattern") {
      this.current.strokeColor = this.#fr(af);
    } else {
      this.current.strokeColor = this.#wr(af);
    }
  }
  #ir(af) {
    if (af[0] === "TilingPattern") {
      this.current.fillColor = this.#fr(af);
    } else {
      this.current.fillColor = this.#wr(af);
    }
  }
  #sr(af, ag, ah) {
    this.current.strokeColor = bo(af, ag, ah);
  }
  #ar(af, ag, ah) {
    this.current.fillColor = bo(af, ag, ah);
    this.current.tspan = ei("svg:tspan");
    this.current.xcoords = [];
    this.current.ycoords = [];
  }
  #or(af) {
    let { width, height } = this.viewport;
    let aj = this.#ml.PDF.Util.inverseTransform(this.transformMatrix);
    let [ak, al, am, an] = this.#ml.PDF.Util.getAxialAlignedBoundingBox(
      [0, 0, width, height],
      aj
    );
    let ap = ei("svg:rect");
    ap.setAttribute("x", ak);
    ap.setAttribute("y", al);
    ap.setAttribute("width", am - ak);
    ap.setAttribute("height", an - al);
    ap.style.setProperty("fill", this.#wr(af));
    if (this.current.fillAlpha < 1) {
      ap.style.setProperty("fill-opacity", this.current.fillAlpha);
    }
    this.#br().append(ap);
  }
  #nr(af, ag) {
    if (Array.isArray(af) && af.length === 6) {
      this.#Ll(af[0], af[1], af[2], af[3], af[4], af[5]);
    }
    if (ag) {
      let ah = ag[2] - ag[0];
      let aj = ag[3] - ag[1];
      let ak = ei("svg:rect");
      ak.setAttribute("x", ag[0]);
      ak.setAttribute("y", ag[1]);
      ak.setAttribute("width", xo(ah));
      ak.setAttribute("height", xo(aj));
      this.current.element = ak;
      this.#Ol("nonzero");
      this.#Nl();
    }
  }
  #lr() {}
  #rr(af) {
    let ag;
    ag =
      typeof af.data == "string"
        ? af.data.startsWith("g_")
          ? this.commonObjs.get(af.data)
          : this.objs.get(af.data)
        : af;
    let ah = this.current;
    let aj = ag.width;
    let ak = ag.height;
    let al = ah.fillColor;
    ah.maskId = "mask" + this.#xl.mask++;
    let am = ei("svg:mask");
    am.setAttribute("id", ah.maskId);
    let an = ei("svg:rect");
    an.setAttribute("x", "0");
    an.setAttribute("y", "0");
    an.setAttribute("width", xo(aj));
    an.setAttribute("height", xo(ak));
    an.style.setProperty("fill", al);
    an.style.setProperty("mask", "url(#" + ah.maskId + ")");
    this.#fl.append(am);
    this.#br().append(an);
    this.#cr(ag, am);
  }
  #hr(af) {
    let ag = null;
    if (typeof af == "string") {
      ag = af.startsWith("g_") ? this.commonObjs.get(af) : this.objs.get(af);
    }
    if (ag) {
      this.#cr(ag);
    } else {
      console.warn(
        "Dependent image with object ID " + af + " is not ready yet"
      );
    }
  }
  #cr(af, ag) {
    let ah = af.width;
    let aj = af.height;
    let ak = af.dataURL;
    let al = ei("svg:rect");
    al.setAttribute("x", "0");
    al.setAttribute("y", "0");
    al.setAttribute("width", xo(ah));
    al.setAttribute("height", xo(aj));
    this.current.element = al;
    this.#Ol("nonzero");
    let am = ei("svg:image");
    am.setAttribute("href", ak);
    am.setAttribute("x", "0");
    am.setAttribute("y", xo(-aj));
    am.setAttribute("width", xo(ah) + "px");
    am.setAttribute("height", xo(aj) + "px");
    am.setAttribute(
      "transform",
      "scale(" + xo(1 / ah) + " " + xo(-1 / aj) + ")"
    );
    if (ag) {
      ag.append(am);
    } else {
      this.#br().append(am);
    }
  }
  #dr() {
    let af = ei("svg:rect");
    af.setAttribute("x", "0");
    af.setAttribute("y", "0");
    af.setAttribute("width", "1px");
    af.setAttribute("height", "1px");
    af.style.setProperty("fill", this.current.fillColor);
    this.#br().append(af);
  }
  #ur(af, ag) {
    let ah = this.#ml.PDF.OPS;
    let aj = this.current;
    let ak = aj.x;
    let al = aj.y;
    let am = [];
    let an = 0;
    for (let ap of af) {
      switch (ap | 0) {
        case ah.rectangle:
          ak = ag[an++];
          al = ag[an++];
          let aq = ak + ag[an++];
          let ar = al + ag[an++];
          am.push(
            "M",
            xo(ak),
            xo(al),
            "L",
            xo(aq),
            xo(al),
            "L",
            xo(aq),
            xo(ar),
            "L",
            xo(ak),
            xo(ar),
            "Z"
          );
          break;
        case ah.moveTo:
          ak = ag[an++];
          al = ag[an++];
          am.push("M", xo(ak), xo(al));
          break;
        case ah.lineTo:
          ak = ag[an++];
          al = ag[an++];
          am.push("L", xo(ak), xo(al));
          break;
        case ah.curveTo:
          ak = ag[an + 4];
          al = ag[an + 5];
          am.push(
            "C",
            xo(ag[an]),
            xo(ag[an + 1]),
            xo(ag[an + 2]),
            xo(ag[an + 3]),
            xo(ak),
            xo(al)
          );
          an += 6;
          break;
        case ah.curveTo2:
          am.push(
            "C",
            xo(ak),
            xo(al),
            xo(ag[an]),
            xo(ag[an + 1]),
            xo(ag[an + 2]),
            xo(ag[an + 3])
          );
          ak = ag[an + 2];
          al = ag[an + 3];
          an += 4;
          break;
        case ah.curveTo3:
          ak = ag[an + 2];
          al = ag[an + 3];
          am.push(
            "C",
            xo(ag[an]),
            xo(ag[an + 1]),
            xo(ak),
            xo(al),
            xo(ak),
            xo(al)
          );
          an += 4;
          break;
        case ah.closePath:
          am.push("Z");
      }
    }
    am = am.join(" ");
    if (
      aj.path &&
      af.length > 0 &&
      af[0] !== ah.rectangle &&
      af[0] !== ah.moveTo
    ) {
      am = aj.path.getAttribute("d") + am;
    } else {
      aj.path = ei("svg:path");
      this.#br().append(aj.path);
    }
    aj.path.setAttribute("d", am);
    aj.path.style.setProperty("fill", "none");
    aj.element = aj.path;
    aj.setCurrentPoint(ak, al);
  }
  #pr(af) {
    {
      this.transformStack.push(this.transformMatrix);
      let ag = this.current;
      this.extraStack.push(ag);
      this.current = ag.clone();
    }
    this.#vl(af);
    this.transformMatrix = this.transformStack.pop();
    this.current = this.extraStack.pop();
    this.pendingClip = null;
    this.tgrp = null;
  }
  #mr(af) {
    this.current.strokeAlpha = af;
  }
  #xr(af) {
    this.current.fillAlpha = af;
  }
  #fr(af) {
    let { applyTransform, normalizeRect } = this.#ml.PDF.Util;
    let aj = af[1];
    let ak = af[2];
    let al = af[3] || Ja;
    let [am, an, ap, aq] = af[4];
    let ar = af[5];
    let au = af[6];
    let av = af[7];
    let aw = "shading" + this.#xl.shading++;
    let [ax, ay, az, aA] = normalizeRect([
      ...applyTransform([am, an], al),
      ...applyTransform([ap, aq], al),
    ]);
    let [aB, aC] = this.#ml.PDF.Util.singularValueDecompose2dScale(al);
    let aD = ar * aB;
    let aE = au * aC;
    let aF = ei("svg:pattern");
    aF.setAttribute("id", aw);
    aF.setAttribute("patternUnits", "userSpaceOnUse");
    aF.setAttribute("width", aD);
    aF.setAttribute("height", aE);
    aF.setAttribute("x", "" + ax);
    aF.setAttribute("y", "" + ay);
    let aG = this.containerElement;
    let aH = this.transformMatrix;
    let aI = this.current.fillColor;
    let aJ = this.current.strokeColor;
    let aK = ei("svg:svg");
    aK.setAttribute("width", az - ax + "px");
    aK.setAttribute("height", aA - ay + "px");
    aK.setAttribute("viewBox", "0 0 " + (az - ax) + " " + (aA - ay));
    this.containerElement = aK;
    this.transformMatrix = al;
    if (av === 2) {
      let aL = bo(...aj);
      this.current.fillColor = aL;
      this.current.strokeColor = aL;
    }
    this.#vl(wo(ak, this.#ml.PDF.OPS));
    this.containerElement = aG;
    this.transformMatrix = aH;
    this.current.fillColor = aI;
    this.current.strokeColor = aJ;
    aF.append(aK.childNodes[0]);
    this.#fl.append(aF);
    return "url(#" + aw + ")";
  }
  #wr(af) {
    if (typeof af == "string") {
      af = this.objs.get(af);
    }
    switch (af[0]) {
      case "RadialAxial":
        let ag;
        let ah = "shading" + this.#xl.shading++;
        let aj = af[3];
        switch (af[1]) {
          case "axial":
            let ak = af[4];
            let al = af[5];
            ag = ei("svg:linearGradient");
            ag.setAttribute("id", ah);
            ag.setAttribute("gradientUnits", "userSpaceOnUse");
            ag.setAttribute("x1", ak[0]);
            ag.setAttribute("y1", ak[1]);
            ag.setAttribute("x2", al[0]);
            ag.setAttribute("y2", al[1]);
            break;
          case "radial":
            let am = af[4];
            let an = af[5];
            let ap = af[6];
            let aq = af[7];
            ag = ei("svg:radialGradient");
            ag.setAttribute("id", ah);
            ag.setAttribute("gradientUnits", "userSpaceOnUse");
            ag.setAttribute("cx", an[0]);
            ag.setAttribute("cy", an[1]);
            ag.setAttribute("r", aq);
            ag.setAttribute("fx", am[0]);
            ag.setAttribute("fy", am[1]);
            ag.setAttribute("fr", ap);
            break;
          default:
            throw new Error("Unknown RadialAxial type: " + af[1]);
        }
        for (let ar of aj) {
          let au = ei("svg:stop");
          au.setAttribute("offset", ar[0]);
          au.style.setProperty("stop-color", ar[1]);
          ag.append(au);
        }
        this.#fl.append(ag);
        return "url(#" + ah + ")";
      case "Mesh":
        console.warn("Unimplemented pattern Mesh");
        return null;
      case "Dummy":
        return "hotpink";
      default:
        throw new Error("Unknown IR type: " + af[0]);
    }
  }
  #Ol(af) {
    this.pendingClip = af;
  }
  #vr() {
    if (!this.current.clipGroup) {
      let af = ei("svg:g");
      af.style.setProperty("clip-path", this.current.activeClipUrl);
      this.containerElement.append(af);
      this.current.clipGroup = af;
    }
    return this.current.clipGroup;
  }
  #br() {
    if (!this.tgrp) {
      this.tgrp = ei("svg:g");
      this.tgrp.setAttribute("transform", go(this.transformMatrix));
      if (this.current.activeClipUrl) {
        this.#vr().append(this.tgrp);
      } else {
        this.containerElement.append(this.tgrp);
      }
    }
    return this.tgrp;
  }
  #gr(af, ag = 1) {
    let ah = this.current;
    let aj = ah.dashArray;
    if (ag !== 1 && aj.length > 0) {
      aj = aj.map((ak) => ag * ak);
    }
    af.style.setProperty("stroke", ah.strokeColor);
    af.style.setProperty("stroke-opacity", ah.strokeAlpha);
    af.style.setProperty("stroke-miterlimit", xo(ah.miterLimit));
    af.style.setProperty("stroke-linecap", ah.lineCap);
    af.style.setProperty("stroke-linejoin", ah.lineJoin);
    af.style.setProperty("stroke-width", xo(ag * ah.lineWidth) + "px");
    af.style.setProperty("stroke-dasharray", aj.map(xo).join(" "));
    af.style.setProperty("stroke-dashoffset", xo(ag * ah.dashPhase) + "px");
  }
}
class mo {
  constructor() {
    this.fontSizeScale = 1;
    this.fontWeight = so;
    this.fontSize = 0;
    this.textMatrix = Ja;
    this.fontMatrix = Qa;
    this.leading = 0;
    this.textRenderingMode = ao;
    this.textMatrixScale = 1;
    this.x = 0;
    this.y = 0;
    this.lineX = 0;
    this.lineY = 0;
    this.charSpacing = 0;
    this.wordSpacing = 0;
    this.textHScale = 1;
    this.textRise = 0;
    this.fillColor = to;
    this.strokeColor = "#000000";
    this.fillAlpha = 1;
    this.strokeAlpha = 1;
    this.lineWidth = 1;
    this.lineJoin = "";
    this.lineCap = "";
    this.miterLimit = 0;
    this.dashArray = [];
    this.dashPhase = 0;
    this.activeClipUrl = null;
    this.clipGroup = null;
    this.maskId = "";
  }
  clone() {
    return Object.create(this);
  }
  setCurrentPoint(af, ag) {
    this.x = af;
    this.y = ag;
  }
}
let xo = (af) => {
  if (Number.isInteger(af)) {
    return af.toString();
  }
  let ag = af.toFixed(10);
  let ah = ag.length - 1;
  if (ag[ah] !== "0") {
    return ag;
  }
  do {
    ah--;
  } while (ag[ah] === "0");
  return ag.substring(0, ag[ah] === "." ? ah : ah + 1);
};
let go = (af) => {
  if (af[4] === 0 && af[5] === 0) {
    if (af[1] === 0 && af[2] === 0) {
      if (af[0] === 1 && af[3] === 1) {
        return "";
      } else {
        return "scale(" + xo(af[0]) + " " + xo(af[3]) + ")";
      }
    }
    if (af[0] === af[3] && af[1] === -af[2]) {
      let ag = (Math.acos(af[0]) * 180) / Math.PI;
      return "rotate(" + xo(ag) + ")";
    }
  } else if (af[0] === 1 && af[1] === 0 && af[2] === 0 && af[3] === 1) {
    return "translate(" + xo(af[4]) + " " + xo(af[5]) + ")";
  }
  return (
    "matrix(" +
    xo(af[0]) +
    " " +
    xo(af[1]) +
    " " +
    xo(af[2]) +
    " " +
    xo(af[3]) +
    " " +
    xo(af[4]) +
    " " +
    xo(af[5]) +
    ")"
  );
};
let bo = (af, ag, ah) =>
  new A("srgb", [af / 255, ag / 255, ah / 255]).toString({
    format: "hex",
  });
let fo = (af, ag = "") => {
  let ah = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  let aj = "data:" + ag + ";base64,";
  for (let ak = 0, al = af.length; ak < al; ak += 3) {
    let am = af[ak] & 255;
    let an = af[ak + 1] & 255;
    let ap = af[ak + 2] & 255;
    aj +=
      ah[am >> 2] +
      ah[((am & 3) << 4) | (an >> 4)] +
      ah[ak + 1 < al ? ((an & 15) << 2) | (ap >> 6) : 64] +
      ah[ak + 2 < al ? ap & 63 : 64];
  }
  return aj;
};
let wo = (af, ag) => {
  let ah = [];
  {
    let ak = [];
    for (let an in ag) {
      ak[ag[an]] = an;
    }
    let al = af.argsArray;
    let am = af.fnArray;
    for (let ap = 0, aq = am.length; ap < aq; ap++) {
      let ar = am[ap];
      ah.push({
        fnId: ar,
        fn: ak[ar],
        args: al[ap],
      });
    }
  }
  let aj = [];
  {
    let au = [];
    for (let av of ah) {
      if (av.fn !== "save") {
        if (av.fn === "restore") {
          aj = au.pop();
        } else {
          aj.push(av);
        }
      } else {
        aj.push({
          fnId: eo,
          fn: "group",
          items: [],
        });
        au.push(aj);
        aj = aj.at(-1).items;
      }
    }
  }
  return aj;
};
const vo = [
  "mousedown",
  "mouseenter",
  "mouseleave",
  "mousemove",
  "mouseout",
  "mosueover",
  "mouseup",
  "pointerover",
  "pointerenter",
  "pointerdown",
  "pointermove",
  "pointerup",
  "pointerout",
  "pointerleave",
  "keydown",
  "keyup",
  "keypress",
  "click",
  "dblclick",
  "select",
  "compositionstart",
  "compositionupdate",
  "compositionend",
];
class yo extends HTMLElement {
  get pointerClientPoint() {
    return new DOMPoint(this.#yr, this.#kr);
  }
  get pointerPressure() {
    return this.#Cr;
  }
  get pointerClickCount() {
    return this.#Sr;
  }
  get pointers() {
    return [...this.#Tr];
  }
  get modKeys() {
    let { ctrl, alt, meta, shift } = this.#$r;
    return {
      ctrl: ctrl,
      alt: alt,
      meta: meta,
      shift: shift,
    };
  }
  get textInputMode() {
    return this.#Pr;
  }
  get isPointerDown() {
    return this.#Er;
  }
  get isFsApiEnabled() {
    return this.#Lr;
  }
  #yr = 0;
  #kr = 0;
  #Cr = 0;
  #Sr = 0;
  #Tr = new Set();
  #Ur = [];
  #Dr = null;
  #$r = {
    ctrl: false,
    alt: false,
    meta: false,
    shift: false,
  };
  #Pr = false;
  #zr;
  #Er = false;
  #Lr = false;
  constructor() {
    super();
    this.#Lr =
      window.FileSystemFileHandle?.prototype.isSameEntry !== undefined &&
      window.showOpenFilePicker !== undefined;
  }
  connectedCallback() {
    window.addEventListener("pointerdown", (af) => this.#Ye(af), true);
    window.addEventListener("pointermove", (af) => this.#Mr(af));
    window.addEventListener("pointerup", (af) => this.#Ar(af));
    window.addEventListener("pointercancel", (af) => this.#Br(af));
    window.addEventListener("dragover", (af) => this.#bn(af));
    window.addEventListener("keydown", (af) => this.#ie(af));
    window.addEventListener("keyup", (af) => this.#Rr(af));
    window.addEventListener("focus", (af) => this.#Ir(af));
    window.addEventListener("blur", (af) => this.#Fr(af));
    window.addEventListener("drop", (af) => this.#fn(af));
    window
      .matchMedia("(display-mode: standalone)")
      .addListener((af) => this.#Nr());
    this.addEventListener("textinputmodestart", () => (this.#Pr = true));
    this.addEventListener("textinputmodeend", () => (this.#Pr = false));
  }
  execCommand(af, ag = null) {
    let ah = this["#main"].firstElementChild;
    while (ah.shadowRoot?.activeElement) {
      ah = ah.shadowRoot.activeElement;
    }
    for (let aj = ah; aj; aj = aj.parentNode || aj.host) {
      if (aj.commands?.[af]) {
        let ak = aj.commands[af];
        if (ak) {
          let al = !ak.enabled || ak.enabled();
          if (al === true) {
            ak.exec(ag);
            break;
          }
          if (al === false) {
            break;
          }
          if (al === null) {
            continue;
          }
        }
      }
    }
  }
  isCommandEnabled(af) {
    let ag = this["#main"].firstElementChild;
    while (ag.shadowRoot?.activeElement) {
      ag = ag.shadowRoot.activeElement;
    }
    for (let ah = ag; ah; ah = ah.parentNode || ah.host) {
      if (ah.commands?.[af]) {
        let aj = ah.commands[af];
        if (aj) {
          if (!aj.enabled || aj.enabled()) {
            return true;
          }
          break;
        }
      }
    }
    return false;
  }
  isCommandToggled(af) {
    let ag = this["#main"].firstElementChild;
    while (ag.shadowRoot?.activeElement) {
      ag = ag.shadowRoot.activeElement;
    }
    for (let ah = ag; ah; ah = ah.parentNode || ah.host) {
      if (ah.commands?.[af]) {
        let aj = ah.commands[af];
        if (aj) {
          if (aj.toggled?.() === true) {
            return true;
          }
          break;
        }
      }
    }
    return false;
  }
  lockInput() {
    if (!this.#zr) {
      this.#zr = {};
      this.style.pointerEvents = "none";
      for (let af of vo) {
        window.addEventListener(
          af,
          (this.#zr[af] = (ag) => {
            ag.stopImmediatePropagation();
            ag.preventDefault();
          }),
          true
        );
      }
    }
  }
  unlockInput() {
    if (this.#zr) {
      for (let [af, ag] of Object.entries(this.#zr)) {
        window.removeEventListener(af, ag, true);
      }
      this.#zr = null;
      this.style.pointerEvents = null;
    }
  }
  openContextMenu(af, ag = true) {
    return new Promise(async (ah) => {
      let aj;
      let ak;
      let al = "";
      let am = null;
      let an = (ar) => {
        let au;
        if (ar.type === "separator") {
          au = "<hr/>";
        } else {
          let av = ar.value !== undefined ? 'value="' + ar.value + '"' : "";
          let aw = ar.toggled ? "toggled" : "";
          let ax = ar.disabled ? "disabled" : "";
          let ay = ar.message?.href ? 'href="' + ar.message.href + '"' : "";
          let az = ar.message?.autocapitalize ? "autocapitalize" : "";
          let aA = ar.message?.ellipsis ? "ellipsis" : "";
          let aB = "";
          if (ar.message?.args) {
            aB =
              'args="' +
              Object.keys(ar.message.args)
                .map((aD) => aD + ": " + ar.message.args[aD])
                .join(", ") +
              '"';
          }
          let aC = "";
          if (ar.children) {
            aC += "<x-menu>";
            for (let aD of ar.children) {
              aC += an(aD);
            }
            aC += "</x-menu>";
          }
          au =
            "\n            <x-menuitem " +
            av +
            " " +
            aw +
            " " +
            ax +
            ">\n              <x-label>\n                <x-message " +
            ay +
            " " +
            aB +
            " " +
            az +
            " " +
            aA +
            "></x-message>\n              </x-label>\n              " +
            aC +
            "\n            </x-menuitem>\n          ";
        }
        return au;
      };
      for (let ar of af) {
        al += an(ar);
      }
      let ap = ie`<x-contextmenu id="context-menu" disabled><x-menu>${al}</x-menu></x-contextmenu>`;
      let aq = this.shadowRoot.querySelector("dialog[open]");
      if (aq) {
        aq.append(ap);
      } else {
        this.shadowRoot.append(ap);
      }
      await it(10);
      ap.open(this.pointerClientPoint.x, this.pointerClientPoint.y);
      ap.addEventListener(
        "click",
        (aj = async (au) => {
          let av = au.target.closest("x-menuitem");
          if (av && ((am = av.value), av.value?.startsWith("command:"))) {
            let [, aw] = av.value.split(":");
            await av.whenTriggerEnd;
            if (ag) {
              this.execCommand(aw);
            }
          }
        })
      );
      ap.addEventListener(
        "close",
        (ak = async (au) => {
          if (au.target === ap.firstElementChild) {
            ap.removeEventListener("click", aj);
            ap.removeEventListener("close", ak);
            await it(300);
            ap.remove();
            ah(am);
          }
        })
      );
    });
  }
  openImageImportDialog() {
    return new Promise(async (af) => {
      let ag = null;
      if (this.isFsApiEnabled === true) {
        let ah = null;
        try {
          ah =
            (
              await window.showOpenFilePicker({
                types: [
                  {
                    description: "Images",
                    accept: {
                      "image/*": [
                        ".png",
                        ".jpg",
                        ".jpeg",
                        ".gif",
                        ".webp",
                        ".avif",
                        ".svg",
                        ".svgz",
                      ],
                      "application/pdf": [".pdf"],
                      "application/illustrator": [".ai"],
                    },
                  },
                  {
                    description: "SVG",
                    accept: {
                      "image/svg+xml": [".svg", ".svgz"],
                    },
                  },
                  {
                    description: "PNG",
                    accept: {
                      "image/png": [".png"],
                    },
                  },
                  {
                    description: "JPEG",
                    accept: {
                      "image/jpeg": [".jpg", ".jpeg"],
                    },
                  },
                  {
                    description: "GIF",
                    accept: {
                      "image/gif": [".gif"],
                    },
                  },
                  {
                    description: "WebP",
                    accept: {
                      "image/webp": [".webp"],
                    },
                  },
                  {
                    description: "AVIF",
                    accept: {
                      "image/avif": [".avif"],
                    },
                  },
                  {
                    description: "PDF",
                    accept: {
                      "application/pdf": [".pdf"],
                    },
                  },
                  {
                    description: "AI",
                    accept: {
                      "application/illustrator": [".ai"],
                    },
                  },
                ],
              })
            )[0] || null;
        } catch (aj) {
          console.error(aj);
        }
        if (ah) {
          ag = await ah.getFile();
        }
      } else {
        ag = await new Promise((ak) => {
          let al = ie`<input type="file" accept=".svg,.svgz,.png,.jpg,.jpeg,.gif,.webp,.avif,.pdf,.ai"/>`;
          al.click();
          al.addEventListener(
            "change",
            (am) => {
              ak(am.target.files[0] || null);
            },
            {
              once: true,
            }
          );
        });
      }
      if (ag) {
        let ak = be(ag);
        let al = ge(ag);
        let am = ag.name;
        let an = null;
        an =
          al === "svg" || al === "svgz" || al === ""
            ? await pe(ag, "text")
            : al === "pdf" || al === "ai"
            ? await pe(ag, "arrayBuffer")
            : await pe(ag, "dataURL");
        af({
          baseName: ak,
          extension: al,
          path: am,
          data: an,
        });
      }
    });
  }
  openLocalFontsImportDialog() {
    return new Promise(async (af) => {
      let ag = [];
      if (this.isFsApiEnabled === true) {
        let aj = null;
        try {
          aj = await window.showOpenFilePicker({
            multiple: true,
            types: [
              {
                description: "Fonts",
                accept: {
                  "font/*": [".woff", ".woff2", ".ttf", ".otf"],
                },
              },
              {
                description: "WOFF",
                accept: {
                  "font/woff": [".woff"],
                },
              },
              {
                description: "WOFF2",
                accept: {
                  "font/woff2": [".woff2"],
                },
              },
              {
                description: "TTF",
                accept: {
                  "font/ttf": [".ttf"],
                },
              },
              {
                description: "OTF",
                accept: {
                  "font/otf": [".otf"],
                },
              },
            ],
          });
        } catch (ak) {
          console.error(ak);
        }
        if (aj) {
          for (let al of aj) {
            let am = await al.getFile();
            ag.push(am);
          }
        }
      } else {
        let an = await new Promise((ap) => {
          let aq = ie`<input type="file" accept=".woff,.woff2,.ttf,.otf" multiple/>`;
          aq.click();
          aq.addEventListener(
            "change",
            (ar) => {
              ap(ar.target.files || null);
            },
            {
              once: true,
            }
          );
        });
        if (an) {
          ag.push(...an);
        }
      }
      let ah = [];
      for (let ap of ag) {
        let aq = be(ap);
        let ar = ge(ap);
        let au = ap.name;
        let av = await pe(ap, "dataURL");
        av = av.substring(av.indexOf("base64") + 7);
        av = "data:application/font-" + ar + ";charset=utf-8;base64," + av;
        ah.push({
          baseName: aq,
          extension: ar,
          path: au,
          data: av,
        });
      }
      af(ah);
    });
  }
  getSystemAccentColorName() {
    if (this.#Dr) {
      return this.#Dr;
    }
    {
      let af = "blue";
      document.head.style.setProperty(
        "outline-color",
        "-webkit-focus-ring-color"
      );
      let ag = getComputedStyle(document.head).getPropertyValue(
        "outline-color"
      );
      document.head.style.removeProperty("outline-color");
      if (ag !== "rgb(16, 16, 16)") {
        let ah = new A(ag);
        let aj = Infinity;
        for (let [ak, al] of Object.entries(a2.presetAccentColors)) {
          let am = new A(al);
          let an = ah.deltaE(am);
          if (an < aj) {
            aj = an;
            af = ak;
          }
        }
      }
      this.#Dr = af;
      return af;
    }
  }
  #Ye(af) {
    if (af.buttons !== 2) {
      this.#Er = true;
    }
    this.#yr = af.clientX;
    this.#kr = af.clientY;
    if (this.#Tr.has(af.pointerId) === false) {
      this.#Tr.add(af.pointerId);
      this.dispatchEvent(new CustomEvent("pointerschange"));
    }
    {
      let { ctrl, alt, meta, shift } = ui.fromEvent(af);
      if (
        ctrl !== this.#$r.ctrl ||
        alt !== this.#$r.alt ||
        meta !== this.#$r.meta ||
        shift !== this.#$r.shift
      ) {
        this.#$r = {
          ctrl: ctrl,
          alt: alt,
          meta: meta,
          shift: shift,
        };
        this.dispatchEvent(new CustomEvent("modkeyschange"));
      }
    }
    {
      let al = 1;
      let am = null;
      for (this.#Ur.push(af); this.#Ur.length > 8; ) {
        this.#Ur.shift();
      }
      for (let an of this.#Ur) {
        if (am) {
          if (an.pointerType === "pen" || an.pointerType === "touch") {
            let ap = an.pointerType === "touch" ? 9 : 3;
            if (
              Math.sqrt(
                Math.pow(an.clientX - am.clientX, 2) +
                  Math.pow(an.clientY - am.clientY, 2)
              ) < ap &&
              an.timeStamp - am.timeStamp < 600
            ) {
              al += 1;
            } else {
              al = 1;
            }
          } else if (
            an.clientX === am.clientX &&
            an.clientY === am.clientY &&
            an.timeStamp - am.timeStamp < 600
          ) {
            al += 1;
          } else {
            al = 1;
          }
        }
        am = an;
      }
      this.#Sr = al;
    }
  }
  #Mr(af) {
    this.#yr = af.clientX;
    this.#kr = af.clientY;
    this.#Cr = af.pressure;
    {
      let { ctrl, alt, meta, shift } = ui.fromEvent(af);
      if (
        ctrl !== this.#$r.ctrl ||
        alt !== this.#$r.alt ||
        meta !== this.#$r.meta ||
        shift !== this.#$r.shift
      ) {
        this.#$r = {
          ctrl: ctrl,
          alt: alt,
          meta: meta,
          shift: shift,
        };
        this.dispatchEvent(new CustomEvent("modkeyschange"));
      }
    }
  }
  #Ar(af) {
    this.#Er = false;
    if (this.#Tr.has(af.pointerId) === true) {
      this.#Tr.delete(af.pointerId);
      this.dispatchEvent(new CustomEvent("pointerschange"));
    }
    {
      let { ctrl, alt, meta, shift } = ui.fromEvent(af);
      if (
        ctrl !== this.#$r.ctrl ||
        alt !== this.#$r.alt ||
        meta !== this.#$r.meta ||
        shift !== this.#$r.shift
      ) {
        this.#$r = {
          ctrl: ctrl,
          alt: alt,
          meta: meta,
          shift: shift,
        };
        this.dispatchEvent(new CustomEvent("modkeyschange"));
      }
    }
  }
  #Br(af) {
    if (this.#Tr.has(af.pointerId) === true) {
      this.#Tr.delete(af.pointerId);
      this.dispatchEvent(new CustomEvent("pointerschange"));
    }
  }
  #bn(af) {
    this.#yr = af.clientX;
    this.#kr = af.clientY;
    af.preventDefault();
    af.dataTransfer.dropEffect = "copy";
  }
  #ie(af) {
    let ag = ui.fromEvent(af);
    if (
      ag.ctrl !== this.#$r.ctrl ||
      ag.alt !== this.#$r.alt ||
      ag.meta !== this.#$r.meta ||
      ag.shift !== this.#$r.shift
    ) {
      this.#$r = {
        ctrl: ag.ctrl,
        alt: ag.alt,
        meta: ag.meta,
        shift: ag.shift,
      };
      this.dispatchEvent(new CustomEvent("modkeyschange"));
    }
    if (this["#editor"]) {
      if (ag.matches("Escape")) {
        if (af.defaultPrevented === false) {
          this.execCommand("transformTool");
        }
      } else if (this.textInputMode === false) {
        if (ag.matches("Backspace") || ag.matches("Delete")) {
          this.execCommand("delete");
        } else if (ag.matches("ArrowDown")) {
          this.execCommand("moveOneUnitDown");
        } else if (ag.matches("ArrowUp")) {
          this.execCommand("moveOneUnitUp");
        } else if (ag.matches("ArrowLeft")) {
          this.execCommand("moveOneUnitLeft");
        } else if (ag.matches("ArrowRight")) {
          this.execCommand("moveOneUnitRight");
        } else if (ag.matches("Shift", "ArrowDown")) {
          this.execCommand("moveTenUnitsDown");
        } else if (ag.matches("Shift", "ArrowUp")) {
          this.execCommand("moveTenUnitsUp");
        } else if (ag.matches("Shift", "ArrowLeft")) {
          this.execCommand("moveTenUnitsLeft");
        } else if (ag.matches("Shift", "ArrowRight")) {
          this.execCommand("moveTenUnitsRight");
        }
      }
    }
  }
  #Rr(af) {
    let { ctrl, alt, meta, shift } = ui.fromEvent(af);
    if (
      ctrl !== this.#$r.ctrl ||
      alt !== this.#$r.alt ||
      meta !== this.#$r.meta ||
      shift !== this.#$r.shift
    ) {
      this.#$r = {
        ctrl: ctrl,
        alt: alt,
        meta: meta,
        shift: shift,
      };
      this.dispatchEvent(new CustomEvent("modkeyschange"));
    }
  }
  #Ir(af) {
    window.addEventListener(
      "pointermove",
      (ag) => {
        let ah = ag.getModifierState(le ? "Meta" : "Control");
        let aj = ag.getModifierState("Alt");
        let ak = ag.getModifierState(le ? "Control" : "Meta");
        let al = ag.getModifierState("Shift");
        if (
          this.#$r.ctrl !== ah ||
          this.#$r.alt !== aj ||
          this.#$r.meta !== ak ||
          this.#$r.shift !== al
        ) {
          this.#$r = {
            ctrl: ah,
            alt: aj,
            meta: ak,
            shift: al,
          };
          this.dispatchEvent(new CustomEvent("modkeyschange"));
        }
      },
      {
        once: true,
      }
    );
  }
  #Fr(af) {
    let { ctrl, alt, meta, shift } = this.#$r;
    if (ctrl || alt || meta || shift) {
      this.#$r = {
        ctrl: false,
        alt: false,
        meta: false,
        shift: false,
      };
      this.dispatchEvent(new CustomEvent("modkeyschange"));
    }
  }
  async #fn(af) {
    this.#yr = af.clientX;
    this.#kr = af.clientY;
    if (this["#editor"]) {
      af.preventDefault();
      let ag = [];
      let ah = [];
      for (let aj of af.dataTransfer.files) {
        let ak = await ve(aj);
        if (ak.extension === "svg" || ak.extension === "svgz") {
          let al = {
            foreignObjects: a2.getConfig(
              "bx-markupsettings:foreignObjects",
              "sanitize"
            ),
            foreignMetadata: a2.getConfig(
              "bx-markupsettings:foreignMetadata",
              "remove"
            ),
          };
          let am = Ga(ak.data, al);
          ag.push(am);
        } else if (ak.extension === "pdf" || ak.extension === "ai") {
          let an = null;
          let ap = null;
          try {
            an = await new po(ak.data).toSVG(false);
          } catch (aq) {
            ap = aq;
          }
          if (ap) {
            if (ak.extension === "ai") {
              this.openMessageDialog({
                title: {
                  href: "#failed-to-import-file",
                },
                detail: {
                  href: "#failed-to-import-file.ai-with-no-pdf-data",
                },
                buttons: [
                  {
                    href: "#close",
                  },
                ],
              });
            } else {
              this.openMessageDialog({
                title: {
                  href: "#failed-to-import-file",
                },
                detail: ap.message,
                buttons: [
                  {
                    href: "#close",
                  },
                ],
              });
            }
          } else {
            ag.push(an);
          }
        } else if (
          ["png", "jpg", "jpeg", "gif", "webp", "avif"].includes(ak.extension)
        ) {
          ah.push(ak);
        }
      }
      if (ag.length > 0 || ah.length > 0) {
        this["#editor"].board.undoManager.checkpoint("#import");
        for (let ar of ag) {
          this["#editor"].board.insertArtwork(ar, "pointer");
        }
        for (let au of ah) {
          this["#editor"].board.insertBitmap(au.data, "pointer", au.baseName);
        }
      }
    }
  }
  #Nr() {
    this.dispatchEvent(new CustomEvent("displaymodechange"));
    this.execCommand("zoomToFitAllViews");
  }
}
class ko extends bs {
  static v = ie` <template> <h2 id="title"></h2> <p id="detail"></p> </template>
  `;
  static _shadowStyleSheet = se`:host{width:485px}#title{font-size:23px}`;
  constructor(af) {
    super();
    if (af.title) {
      if (af.title.href) {
        let ag = af.title.href;
        let ah = af.title.args;
        ah = ah
          ? Object.entries(ah)
              .map(([aj, ak]) => aj + ":" + ak)
              .join(",")
          : "";
        this["#title"].innerHTML =
          '<x-message href="' + ag + '" args="' + ah + '"></x-message>';
      } else {
        this["#title"].innerHTML = Te(af.title);
      }
    }
    if (af.detail) {
      if (af.detail.href) {
        let aj = af.detail.href;
        let ak = af.detail.args;
        ak = ak
          ? Object.entries(ak)
              .map(([al, am]) => al + ":" + am)
              .join(",")
          : "";
        this["#detail"].innerHTML =
          '<x-message href="' + aj + '" args="' + ak + '"></x-message>';
      } else {
        this["#detail"].innerHTML = Te(af.detail);
      }
    }
    if (af.buttons) {
      let al = "";
      for (let am = af.buttons.length - 1; am >= 0; am -= 1) {
        if (af.buttons[am].href) {
          let an = af.buttons[am].href;
          let ap = af.buttons[am].args;
          ap = ap
            ? Object.entries(ap)
                .map(([aq, ar]) => aq + ":" + ar)
                .join(",")
            : "";
          al +=
            '\n            <x-button value="' +
            am +
            '" ' +
            (am === 0 ? "toggled" : "") +
            '>\n              <x-label>\n                <x-message href="' +
            an +
            '" args="' +
            ap +
            '"></x-message>\n              </x-label>\n            </x-button>\n          ';
        } else {
          al +=
            '\n            <x-button value="' +
            am +
            '" ' +
            (am === 0 ? "toggled" : "") +
            ">\n              <x-label>" +
            Te(af.buttons[am]) +
            "</x-label>\n            </x-button>\n          ";
        }
      }
      this["#footer"].innerHTML = al;
    }
    this["#detail"].addEventListener("click", (aq) => {
      if (aq.target.localName === "a") {
        this.#Ks(aq);
      }
    });
    this["#footer"].addEventListener("click", (aq) => this.#Or(aq));
  }
  #Ks(af) {
    af.preventDefault();
    window.open(af.target.href);
  }
  #Or(af) {
    let ag = af.target.closest("x-button");
    if (ag) {
      this.dispatchEvent(
        new CustomEvent("submit", {
          detail: parseInt(ag.value),
        })
      );
    }
  }
}
customElements.define("bx-messageform", ko);
let Co = () => {
  if (a2.getConfig("bx-uisettings:accentColor") === "yellowgreen") {
    a2.setConfig("bx-uisettings:accentColor", "green");
  }
  if (a2.getConfig("bx-shortcutssettings:userShortcuts") !== null) {
    a2.setConfig(
      "bx-keyboardsettings:userShortcuts",
      a2.getConfig("bx-shortcutssettings:userShortcuts")
    );
    a2.setConfig("bx-shortcutssettings:userShortcuts", null);
  }
  if (a2.getConfig("bx-shortcutssettings:spaceKeyMode") !== null) {
    a2.setConfig(
      "bx-keyboardsettings:spaceKeyMode",
      a2.getConfig("bx-shortcutssettings:spaceKeyMode")
    );
    a2.setConfig("bx-shortcutssettings:spaceKeyMode", null);
  }
  if (
    a2.getConfig("bx-librarypanel:currentBrowserID") ===
    "photos-library-browser"
  ) {
    a2.setConfig("bx-librarypanel:currentBrowserID", "bitmaps-library-browser");
  }
  if (
    ["pixabay.com", "wikimedia.org"].includes(
      a2.getConfig("bx-vectorslibrarybrowser:provider")
    )
  ) {
    a2.setConfig("bx-vectorslibrarybrowser:provider", null);
  }
  if (a2.getConfig("bx-blobsettings:mode") !== null) {
    a2.setConfig(
      "bx-blobsettings:drawingMode",
      a2.getConfig("bx-blobsettings:mode") === "erase" ? "erase" : "create"
    );
    a2.setConfig("bx-blobsettings:mode", null);
  }
  if (a2.getConfig("bx-uisettings:theme") === "vanilla") {
    a2.setConfig("bx-uisettings:theme", null);
  }
  if (a2.getConfig("bx-csscascadeinspector:width") !== null) {
    a2.setConfig(
      "bx-elementspanel:sidebarWidth",
      a2.getConfig("bx-csscascadeinspector:width")
    );
    a2.setConfig("bx-csscascadeinspector:width", null);
  }
  if (a2.getConfig("bx-rulers:space") !== null) {
    a2.setConfig("bx-boardrulers:space", a2.getConfig("bx-rulers:space"));
    a2.setConfig("bx-rulers:space", null);
  }
  if (a2.getConfig("bx-webapp:dontShowAgainMissingFsApiDialog") !== null) {
    a2.setConfig("bx-webapp:dontShowAgainMissingFsApiDialog", null);
  }
  if (a2.getConfig("bx-uisettings:widgetsSize") !== null) {
    a2.setConfig("bx-uisettings:widgetsSize", null);
  }
  if (a2.getConfig("bx-primarypanelsdock:width") !== null) {
    a2.setConfig(
      "bx-sidebar:width",
      a2.getConfig("bx-primarypanelsdock:width")
    );
    a2.setConfig("bx-primarypanelsdock:width", null);
  }
  if (a2.getConfig("bx-secondarypanelsdock:height") !== null) {
    a2.setConfig(
      "bx-bottombar:height",
      a2.getConfig("bx-secondarypanelsdock:height")
    );
    a2.setConfig("bx-secondarypanelsdock:height", null);
  }
  if (a2.getConfig("bx-uisettings:showDockTooltips") !== null) {
    a2.setConfig("bx-uisettings:showDockTooltips", null);
  }
};
class So extends yo {
  static #C = ie` <template> <bx-navbar id="navbar"></bx-navbar> <main id="main"> <div id="page-container"></div> <div id="dialogs"></div> <x-notification id="notification" timeout="800"></x-notification> </main> <bx-imageviewer id="image-viewer"></bx-imageviewer> </template>
  `;
  static #S = se`
    :host {
      position: relative;
      display: flex;
      width: 100%;
      height: 100%
    }

    #main {
      flex: 1 1 0%;
      box-sizing: border-box;
      overflow: hidden auto;
    }

    #main #page-container {
      padding: 20px;
      max-width: 740px;
    }
    :host([path="/"]) #main #page-container {
      padding-bottom: 0;
    }

    /**
     * Dialogs
     */

    #cloud-dialog {
      width: calc(100% - 40px);
      height: calc(100% - 40px);
      max-width: 780px;
      max-height: 700px;
    }

    #settings-dialog {
      width: calc(100% - 40px);
      height: calc(100% - 40px);
      max-width: 800px;
      max-height: 700px;
    }

    #about-dialog {
      width: 300px;
      height: calc(100% - 40px);
      max-height: 460px;
    }

    #contact-dialog {
      width: calc(100% - 40px);
      height: calc(100% - 40px);
      max-width: 750px;
      max-height: 700px;
    }

    /**
     * Privacy notice
     */

    #privacy-notice p {
      margin: 0;
      white-space: nowrap;
    }

    #privacy-notice a {
      color: var(--light-accent-color);
    }

    #privacy-notice x-button {
      margin: 0 -8px 0 10px;
      cursor: pointer;
    }
  `;
  get oldLocation() {
    return this.#_r;
  }
  get imageViewer() {
    return this["#image-viewer"];
  }
  #qr = null;
  #_r = null;
  #jr = "general";
  #P;
  #Vr;
  #Gr;
  #Hr;
  constructor() {
    super();
    this["#canonical-link"] = document.head.querySelector("#canonical-link");
    this["#robots-meta"] = document.head.querySelector("#robots-meta");
    Co();
    fetch("./boxy-svg.webmanifest").then(async (af) => {
      this.#Vr = await af.json();
    });
    history.scrollRestoration = "manual";
    if (history.state === null) {
      history.replaceState(
        {
          index: history.length - 1,
          scrollTop: 0,
        },
        null,
        location.href
      );
    }
    if (re) {
      document.documentElement.style.overflowX = "hidden";
    }
  }
  async connectedCallback() {
    if (!this.#P) {
      super.connectedCallback();
      await this.#Wr();
      await this.#Kr();
      document.body.setAttribute("data-system", Ke());
      this.#P = this.attachShadow({
        mode: "open",
      });
      this.#P.adoptedStyleSheets = [a2.themeStyleSheet, So.#S];
      this.#P.append(document.importNode(So.#C.content, true));
      for (let af of this.#P.querySelectorAll("[id]")) {
        this["#" + af.id] = af;
      }
      Bi.auth.addEventListener("userchange", (ag) => this.#Ro());
      Bi.auth.addEventListener("error", (ag) => this.#Zr(ag));
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addListener(() => this.#Yr());
      window.addEventListener("beforeunload", (ag) => this.#Xr(ag));
      window.addEventListener("popstate", (ag) => this.#Jr("pop"));
      document.documentElement.addEventListener("wheel", (ag) => this.#Qr(ag), {
        passive: true,
      });
      a2.addEventListener("configchange", (ag) => this.#Zt(ag));
      this.#P.addEventListener("click", (ag) => this.#Rs(ag), true);
      this["#notification"].addEventListener("click", (ag) => this.#eh(ag));
      this.#Jr("load");
      this.#th();
      await it(100);
      this.restoreScrollOffset();
    }
  }
  importConfig() {
    return new Promise(async (af) => {
      await it(300);
      let ag = await new Promise((ah) => {
        let aj = ie`<input type="file" accept=".json"/>`;
        aj.click();
        aj.addEventListener(
          "change",
          (ak) => {
            ah(ak.target.files[0] || null);
          },
          {
            once: true,
          }
        );
      });
      if (ag) {
        let ah = ((aj, ak = true) => {
          let al = null;
          try {
            al = JSON.parse(aj);
          } catch (am) {
            if (ak) {
              console.error("Failed to parse JSON string", aj, am);
            }
            return;
          }
          return al;
        })(await readFile(ag, "text"));
        if (ah && ah.appVersion && ah.createdTime && ah.items) {
          a2.clearConfig();
          for (let [aj, ak] of Object.entries(ah.items)) {
            if (
              aj.startsWith("bx-macapp") === false &&
              aj.startsWith("bx-linuxapp") === false
            ) {
              a2.setConfig(aj, ak);
            }
          }
          Co();
        } else {
          await this.openMessageDialog({
            title: {
              href: "#failed-to-import-file",
            },
            detail: {
              href: "#invalid-format",
            },
            buttons: [
              {
                href: "#close",
              },
            ],
          });
        }
      }
      af();
    });
  }
  exportConfig() {
    return new Promise(async (af) => {
      let ag = {
        appVersion: this.#Vr.version,
        createdTime: Date.now(),
        items: {},
      };
      for (let [am, an] of Object.entries(localStorage)) {
        if (am.startsWith("bx-") || am.startsWith("x-")) {
          ag.items[am] = JSON.parse(an);
        }
      }
      let ah = JSON.stringify(ag, null, 2);
      let aj = new Blob([ah], {
        type: "application/json",
      });
      let ak = URL.createObjectURL(aj);
      let al = a2.queryMessage("#settings").content + ".json";
      ie`<a download="${al}" href="${ak}"></a>`.click();
      it(30000).then(() => URL.revokeObjectURL(ak));
      af();
    });
  }
  #ih(af) {
    return new Promise(async (ag) => {
      if (af) {
        let [ah] = this.checkCloudWriteAccess();
        if (ah === "granted") {
          for (let [aj, ak] of Object.entries(af)) {
            let al = localStorage.getItem(aj);
            let am = JSON.stringify(ak);
            if (al !== am) {
              localStorage.setItem(aj, am);
              this.dispatchEvent(
                new CustomEvent("configchange", {
                  detail: {
                    key: aj,
                    value: ak,
                    origin: "other",
                  },
                })
              );
            }
          }
          Co();
        }
      }
      ag();
    });
  }
  #sh = et(
    () =>
      new Promise(async (e) => {
        let [t] = this.checkCloudWriteAccess();
        if (t === "granted") {
          let e = {};
          for (let t of Object.keys(localStorage)) {
            if (t.startsWith("bx-") || t.startsWith("x-")) {
              let i = localStorage.getItem(t);
              let s = JSON.parse(i);
              e[t] = s;
            }
          }
          await Bi.database.setDocument("configs", Bi.auth.userID, e);
        }
        e();
      }),
    10000
  );
  getAppMenuCommandsIndex() {
    return new Promise(async (af) => {
      let ag = await (
        await fetch("./templates/progressive-web-app-menu.tpl")
      ).text();
      let ah = new DOMParser().parseFromString(ag, "text/html");
      let aj = [];
      let ak = (al, am = []) => {
        for (let an of al) {
          let ap = an.querySelector(":scope > x-label > x-message");
          if (ap) {
            let aq = [...am, ap.outerHTML];
            let ar = an.getAttribute("value");
            let au = an.querySelector(":scope > x-menu");
            let av = an.querySelector(":scope > x-shortcut.default-shortcut");
            if (au) {
              let aw = [...au.querySelectorAll(":scope > x-menuitem")];
              ak(aw, [...aq]);
            } else if (ar !== null) {
              aj.push({
                commandID: ar,
                label: aq.join(" ‣ "),
                defaultShortcut: av ? av.getAttribute("value") : null,
              });
            }
          }
        }
      };
      ak([...ah.querySelectorAll("body > x-menuitem")]);
      af(aj);
    });
  }
  checkCloudWriteAccess(af = false) {
    if (navigator.onLine === false) {
      return ["rejected", "boxy-svg/user-offline"];
    }
    if (Bi.auth.userID === null) {
      return ["rejected", "boxy-svg/user-not-signed"];
    }
    if (Bi.auth.userEmailVerified === false) {
      return ["rejected", "boxy-svg/email-not-verified"];
    }
    if (af === false) {
      if (Bi.auth.userSubscription === null) {
        return ["rejected", "boxy-svg/user-not-subscribed-to-premium-plan"];
      }
      {
        let [ag] = Bi.checkout.getEffectiveSubscriptionPlanID(
          Bi.auth.userSubscription
        );
        if (ag === null) {
          return ["rejected", "boxy-svg/subscription-expired"];
        }
        if (ag === vi) {
          return ["rejected", "boxy-svg/user-not-subscribed-to-premium-plan"];
        }
      }
    }
    return ["granted", null];
  }
  checkCloudFileWriteAccess(af) {
    return new Promise(async (ag) => {
      let [ah, aj] = this.checkCloudWriteAccess(af === "avatar");
      if (ah === "rejected") {
        return ag(["rejected", aj]);
      }
      if (af !== null) {
        let ak;
        try {
          ak = await Bi.database.getDocument("artworks", af);
        } catch (al) {
          return ag(["rejected", al.code || "boxy-svg/unknown-error"]);
        }
        if (ak !== null) {
          if (ak.authorUID !== Bi.auth.userID) {
            return ag(["rejected", "boxy-svg/user-not-authorized"]);
          }
        }
      }
      return ag(["granted", null]);
    });
  }
  async handleWriteAccessRejection(af) {
    if (af === "boxy-svg/user-offline") {
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: {
          href: "#failed-to-write-file.user-offline",
        },
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else if (af === "boxy-svg/user-not-signed") {
      this.openLoginDialog();
    } else if (af === "boxy-svg/email-not-verified") {
      this.openEmailVerifyMessageDialog();
    } else if (af === "boxy-svg/trial-expired") {
      this.navigate(qi(location.href, "dialog", "settings→subscription"));
      await it(1000);
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: {
          href: "#failed-to-write-file.trial-expired",
        },
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else if (af === "boxy-svg/subscription-expired") {
      this.navigate(qi(location.href, "dialog", "settings→subscription"));
      await it(1000);
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: {
          href: "#failed-to-write-file.subscription-expired",
        },
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else if (af === "boxy-svg/user-not-subscribed") {
      this.navigate(qi(location.href, "dialog", "settings→subscription"));
      await it(1000);
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: {
          href: "#failed-to-write-file.user-not-subscribed",
        },
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else if (af === "boxy-svg/user-not-subscribed-to-premium-plan") {
      this.navigate(qi(location.href, "dialog", "settings→subscription"));
      await it(1000);
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: {
          href: "#failed-to-write-file.user-not-subscribed-to-premium-plan",
        },
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else if (af === "boxy-svg/user-not-authorized") {
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: {
          href: "#failed-to-write-file.user-not-authorized",
        },
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else if (af === "boxy-svg/filesystem-permission-denied") {
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: {
          href: "#failed-to-write-file.filesystem-permission-denied",
        },
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    } else {
      this.openMessageDialog({
        title: {
          href: "#failed-to-write-file",
        },
        detail: "Error code: " + af,
        buttons: [
          {
            href: "#close",
          },
        ],
      });
    }
  }
  openNotification(af = "Sample notification", ag = 3000) {
    this["#notification"].innerHTML = af;
    this["#notification"].timeout = ag;
    this["#notification"].opened = true;
  }
  async #th() {
    let af = a2.getConfig("bx-portalwebapp:showPrivacyNotification", null);
    if (af === null) {
      if (/bot|crawler|spider|crawling/i.test(navigator.userAgent)) {
        af = false;
        a2.setConfig("bx-portalwebapp:showPrivacyNotification", false);
      } else {
        let ag = "ZZ";
        try {
          ag = Bi.functions.postMessage("getUserCountry").data;
        } catch (ah) {}
        af = Ci.includes(ag) !== undefined;
        a2.setConfig("bx-portalwebapp:showPrivacyNotification", af);
      }
    }
    if (af === true) {
      let aj =
        '\n        <x-box id="privacy-notice">\n          <div>\n            <p>We use cookies. Check our <a href="/legal#web-app-privacy">Privacy Policy</a> to learn more.</p>\n          </div>\n          <x-button id="privacy-notice-button" toggled>\n            <x-label><strong>OK</strong></x-label>\n          </x-button>\n        </x-box>\n      ';
      this.openNotification(aj, 0);
    }
  }
  openLoginDialog() {
    return new Promise(async (af) => {
      let ag = ie` <dialog id="login-dialog" data-param="login"> <bx-loginform></bx-loginform> </dialog>
      `;
      await this.closeDialog();
      this["#dialogs"].append(ag);
      await it(100);
      ag.showModal();
      ag.addEventListener("close", (ah) => this.#aa(ah), {
        once: true,
      });
      af();
    });
  }
  openRegisterDialog() {
    return new Promise(async (af) => {
      let ag = ie` <dialog id="register-dialog" data-param="register"> <bx-registerform></bx-registerform> </dialog>
      `;
      await this.closeDialog();
      this["#dialogs"].append(ag);
      await it(100);
      ag.showModal();
      ag.addEventListener("close", (ah) => this.#aa(ah), {
        once: true,
      });
      af();
    });
  }
  openPasswordResetDialog() {
    return new Promise(async (af) => {
      let ag = ie` <dialog id="password-reset-dialog" data-param="password-reset"> <bx-passwordresetform></bx-passwordresetform> </dialog>
      `;
      await this.closeDialog();
      this["#dialogs"].append(ag);
      await it(100);
      ag.showModal();
      ag.addEventListener("close", (ah) => this.#aa(ah), {
        once: true,
      });
      af();
    });
  }
  openPasswordConfirmDialog() {
    return new Promise(async (af) => {
      let ag = ie` <dialog id="password-confirm-dialog" data-param="password-confirm"> <bx-passwordconfirmform></bx-passwordconfirmform> </dialog>
      `;
      this["#dialogs"].append(ag);
      await it(100);
      ag.showModal();
      ag.addEventListener(
        "close",
        (ah) => {
          this.#aa(ah);
          af(ag.firstElementChild.value);
        },
        {
          once: true,
        }
      );
    });
  }
  async #ah() {
    let af = this["#dialogs"].querySelector("#about-dialog");
    if (af === null) {
      af = ie` <dialog id="about-dialog" data-param="about"> <bx-about></bx-about> </dialog>
      `;
      await this.closeDialog();
      this["#dialogs"].append(af);
      await it(100);
      af.showModal();
      af.addEventListener("close", (ag) => this.#aa(ag));
      af.firstElementChild.version = this.#Vr.version;
    }
  }
  async openCloudDialog() {
    let af = this["#dialogs"].querySelector("#cloud-dialog");
    if (!af) {
      af = ie` <dialog id="cloud-dialog" data-param="cloud"> <bx-cloudbrowser tabindex="0" type="manage"></bx-cloudbrowser> </dialog>
      `;
      await this.closeDialog();
      this["#dialogs"].append(af);
      await it(100);
      af.showModal();
      af.addEventListener("close", (ag) => {
        this.#aa(ag);
      });
    }
  }
  async openShareDialog(af) {
    let ag = ie` <dialog id="share-dialog" data-param="share"> <bx-fileshareform value="${af}"></bx-fileshareform> </dialog>
    `;
    this["#dialogs"].append(ag);
    await it(100);
    ag.showModal();
    ag.addEventListener("close", (ah) => this.#aa(ah));
    ag.firstElementChild.addEventListener("submit", () => ag.close());
  }
  async openEmbedDialog(af) {
    let ag = ie` <dialog id="embed-dialog" data-param="embed"> <bx-fileembedform value="${af}"></bx-fileembedform> </dialog>
    `;
    this["#dialogs"].append(ag);
    await it(100);
    ag.showModal();
    ag.addEventListener("close", (ah) => this.#aa(ah));
    ag.firstElementChild.addEventListener("submit", () => ag.close());
  }
  openSettingsDialog(af = this.#jr) {
    return new Promise(async (ag) => {
      let ah = this["#dialogs"].querySelector("#settings-dialog");
      if (ah) {
        ah.firstElementChild.value = af;
      } else {
        let aj = ie` <dialog id="settings-dialog" data-param="settings"> <bx-settings id="settings" value="${af}"></bx-settings> </dialog>
        `;
        await this.closeDialog();
        let ak;
        let al = aj.firstElementChild;
        this["#dialogs"].append(aj);
        await it(100);
        aj.showModal();
        aj.addEventListener("close", (am) => {
          al.removeEventListener("valuechange", ak);
          this.#aa(am);
        });
        al.addEventListener(
          "valuechange",
          (ak = () => {
            let am = qi(location.href, "dialog", "settings→" + al.value);
            this.navigate(am, true);
            this.#jr = al.value;
          })
        );
      }
      this.#jr = af;
      ag();
    });
  }
  async #oh(af = vi, ag = 1, ah = "US") {
    await Bi.auth.whenReady;
    await this.closeDialog();
    if (Bi.auth.userID === null) {
      this.navigate(qi(location.href, "dialog", "login"), true);
    } else {
      await Bi.checkout.open(af, ag, ah);
      let aj = new URLSearchParams(location.search);
      if (aj.get("dialog")?.startsWith("checkout")) {
        aj.delete("dialog");
        let ak = new URL(location.href);
        ak.search = aj.toString();
        this.navigate(ak.href);
      }
    }
  }
  openMessageDialog(af) {
    return new Promise((ag) => {
      let ah;
      let aj;
      let ak = ie`<dialog id="message-dialog" data-param="message"></dialog>`;
      let al = new ko(af);
      ak.append(al);
      this["#dialogs"].append(ak);
      ak.showModal();
      ak.addEventListener(
        "close",
        (aj = (am) => {
          ak.removeEventListener("close", aj);
          al.removeEventListener("submit", ah);
          this.#aa(am);
          ag(-1);
        })
      );
      al.addEventListener(
        "submit",
        (ah = async (am) => {
          ak.removeEventListener("close", aj);
          al.removeEventListener("submit", ah);
          await ak.close();
          ag(am.detail);
        })
      );
    });
  }
  async openEmailVerifyMessageDialog() {
    if (
      (await this.openMessageDialog({
        title: {
          href: "#verify-your-email-address",
        },
        detail: {
          href: "#verify-your-email-address.detail",
          args: {
            email: Bi.auth.userEmail,
          },
        },
        buttons: [
          {
            href: "#close",
          },
          {
            href: "#resend",
          },
        ],
      })) === 1
    ) {
      let af;
      try {
        await Bi.auth.sendVerificationEmail();
      } catch (ag) {
        af = ag;
      }
      if (af) {
        this.openMessageDialog({
          title: {
            href: "#failed-to-send-verification-email",
          },
          detail: af.message + " (" + af.code + ")",
          buttons: [
            {
              href: "#close",
            },
          ],
        });
      }
    }
  }
  openContactDialog() {
    return new Promise(async (af) => {
      let ag;
      let ah;
      let aj;
      let ak = ie` <dialog id="contact-dialog" data-param="contact"> <bx-contactform></bx-contactform> </dialog>
      `;
      let al = ak.firstElementChild;
      await this.closeDialog();
      this["#dialogs"].append(ak);
      await it(100);
      ak.showModal();
      ak.addEventListener(
        "close",
        (ag = (am) => {
          ak.removeEventListener("close", ag);
          al.removeEventListener("cancel", ah);
          al.removeEventListener("submit", aj);
          this.#aa(am);
        })
      );
      al.addEventListener(
        "cancel",
        (ah = (am) => {
          this.#nh(am);
        })
      );
      al.addEventListener(
        "submit",
        (aj = (am) => {
          this.#lh(am);
        })
      );
      af();
    });
  }
  closeDialog(af = false) {
    return new Promise(async (ag) => {
      let ah = document.querySelector(".paddle-frame");
      let aj = this["#dialogs"].querySelector("dialog");
      if (ah) {
        ah.remove();
      }
      if (aj?.id) {
        if (af) {
          aj.close();
        } else {
          await aj.close();
        }
        aj.remove();
      }
      ag();
    });
  }
  #Xr(af) {
    this.storeScrollOffset();
  }
  #Rs(af) {
    {
      let ag = af.target.closest("a");
      if (ag) {
        let ah = new URL(ag.href);
        if (ah.origin === location.origin) {
          af.preventDefault();
          this.navigate(ah.href);
        }
      }
    }
    if (af.target.localName === "dialog") {
      let aj = af.target;
      let ak = null;
      if (aj.firstElementChild?.getAttribute("extends") === "bx-form") {
        ak = aj.firstElementChild;
      }
      if (ak) {
        if (ak.dirty) {
          ak.focus();
          ak.blinkFooter();
          af.preventDefault();
          af.stopImmediatePropagation();
        } else if (ak.throbber) {
          af.preventDefault();
          af.stopImmediatePropagation();
        }
      }
    }
  }
  #Qr(af) {
    let ag = this["#main"].scrollTop;
    if (location.hash !== "" && location.hash.startsWith("#tour-") === false) {
      history.pushState(
        {
          index: history.state.index + 1,
          scrollTop: ag,
        },
        null,
        location.href.split("#")[0]
      );
      this.#Jr("push");
    }
    this.#rh(af);
  }
  #rh = ((e, t, i, s = false) => {
    let a = null;
    let o = null;
    return (...n) => {
      let l = s && !a;
      clearTimeout(a);
      a = setTimeout(() => {
        a = null;
        if (!s) {
          o = e.apply(i, n);
        }
      }, t);
      if (l) {
        o = e.apply(i, n);
      }
      return o;
    };
  })((e) => {
    if (!location.hash || !!location.hash.startsWith("#tour-")) {
      this.storeScrollOffset();
    }
  }, 400);
  #eh(af) {
    let ag = af.target.closest("x-button");
    if (ag && ag.id === "privacy-notice-button") {
      this["#notification"].opened = false;
      a2.setConfig("bx-portalwebapp:showPrivacyNotification", false);
    }
  }
  #aa(af) {
    let ag = af.target;
    let ah = new URL(location.href);
    let aj = new URLSearchParams(location.search);
    let ak = aj.get("dialog");
    let al = null;
    if (ak) {
      al = ak.includes("→") ? ak.split("→")[0] : ak;
    }
    ag.remove();
    delete this["#" + ag.id];
    if (ag.dataset.param === al) {
      aj.delete("dialog");
      ah.search = aj.toString();
      this.navigate(ah.href);
    }
  }
  #Ro() {
    if (
      Bi.auth.userID !== null &&
      Bi.auth.userEmailVerified === false &&
      (Bi.auth.userSubscription === null ||
        Bi.auth.userSubscription.orgPlanID === false)
    ) {
      this.openEmailVerifyMessageDialog();
    }
    if (Bi.auth.userID === null) {
      Bi.database.unobserveDocument("configs", this.#Hr, this.#Gr);
      this.#Gr = null;
      this.#Hr = null;
    } else {
      this.#Hr = Bi.auth.userID;
      Bi.database.observeDocument(
        "configs",
        Bi.auth.userID,
        (this.#Gr = (af) => {
          if (af) {
            this.#ih(af);
          }
        }),
        true
      );
    }
  }
  #Zr(af) {
    this.openMessageDialog({
      title: {
        href: "#failed-to-log-in",
      },
      detail: af.detail,
      buttons: [
        {
          href: "#close",
        },
      ],
    });
  }
  #Zt(af) {
    let { key, value, origin } = af.detail;
    if (key === "bx-uisettings:locale") {
      this.#Kr();
    } else if (
      key === "bx-uisettings:theme" ||
      key === "bx-uisettings:colorScheme"
    ) {
      this.#Wr();
    } else if (key === "bx-uisettings:accentColor") {
      this.#hh();
    }
    this.#sh();
  }
  #Yr() {
    this.#Wr();
  }
  async #ii(af) {
    let { method, fromLocation, toLocation, state } = af.detail;
    let al = new URLSearchParams(fromLocation ? fromLocation.search : "");
    let am = new URLSearchParams(toLocation.search);
    let an = _i(al, am);
    {
      let ap =
        fromLocation === null || fromLocation.pathname !== toLocation.pathname;
      let aq = al.get("page") !== am.get("page");
      let ar = al.get("year") !== am.get("year");
      if (method === "load") {
        await this.#ch();
        await this.#dh();
        this.restoreScrollOffset();
      } else if (method === "push" || method === "replace") {
        if (ap || aq || ar) {
          await this.#ch();
          await this.#dh();
          this.restoreScrollOffset();
        }
      } else if (method === "pop" && (ap || aq || ar)) {
        await this.#ch();
        await this.#dh();
        this.restoreScrollOffset();
      }
    }
    if (
      (fromLocation === null || fromLocation.hash !== toLocation.hash) &&
      location.hash.startsWith("#tour-") === false
    ) {
      this.restoreScrollOffset();
    }
    if (an.includes("dialog")) {
      let au = al.get("dialog");
      let av = am.get("dialog");
      if (av === null) {
        let aw = au.split("→")[0];
        let ax = this["#dialogs"].querySelector(
          ':scope > dialog[data-param="' + aw + '"]'
        );
        if (ax?.open) {
          ax.close();
        }
      } else {
        if (av === "login") {
          this.openLoginDialog();
        } else if (av === "register") {
          this.openRegisterDialog();
        } else if (av === "password-reset") {
          this.openPasswordResetDialog();
        } else if (av === "cloud") {
          this.openCloudDialog();
        } else if (av === "about") {
          this.#ah();
        } else if (av === "contact") {
          this.openContactDialog();
        } else if (av.startsWith("settings")) {
          let [az, aA] = av.split("→");
          this.openSettingsDialog(aA);
        } else if (av.startsWith("checkout")) {
          let [aB, aC] = av.split("→");
          let [aD, aE, aF] = aC.split("×");
          this.#oh(aD, aE, aF);
        }
        let ay = this["#dialogs"].querySelector("#message-dialog");
        if (ay) {
          ay.close();
        }
      }
    }
  }
  async #lh() {
    let af = this.#P.querySelector("#contact-dialog");
    let ag = af.firstElementChild;
    if (ag.reportValidity() === true) {
      let ah = null;
      let aj = null;
      ag.throbber = true;
      let ak = {
        email: ag.email,
        subject: ag.subject,
        message: ag.message,
      };
      try {
        ah = await Bi.functions.postMessage("sendContactEmail", ak);
      } catch (al) {
        aj = al;
      }
      ag.throbber = false;
      af.hidden = true;
      await it(100);
      if (aj === null) {
        await this.openMessageDialog({
          title: {
            href: "#message-sent",
          },
          detail: {
            href: "#message-sent.detail",
          },
          buttons: [
            {
              href: "#close",
            },
          ],
        });
        this.navigate(qi(location.href, "dialog", null));
      } else {
        await this.openMessageDialog({
          title: {
            href: "#failed-to-send-contact-message",
          },
          detail: bi(aj),
          buttons: [
            {
              href: "#back-to-form",
            },
          ],
        });
        af.hidden = false;
      }
    }
  }
  #nh() {
    this.navigate(qi(location.href, "dialog", null));
  }
  navigate(af, ag = false) {
    if (ag === false) {
      this.storeScrollOffset();
      history.pushState(
        {
          index: history.state.index + 1,
          scrollTop: 0,
        },
        null,
        af
      );
      this.#Jr("push");
    } else if (ag === true) {
      history.replaceState(
        {
          index: history.state.index,
          scrollTop: 0,
        },
        null,
        af
      );
      this.#Jr("replace");
    }
  }
  storeScrollOffset(af = this["#main"].scrollTop) {
    history.replaceState(
      {
        index: history.state.index,
        scrollTop: af,
      },
      null,
      location.href
    );
  }
  restoreScrollOffset() {
    if (location.hash !== "" && location.hash.startsWith("#tour-") === false) {
      let af = this["#page-container"].firstElementChild;
      let ag = location.hash.substring(1);
      af.scrollElementIntoView(ag);
    } else {
      this["#main"].scrollTop = history.state.scrollTop;
    }
  }
  resetScrollOffset() {
    this["#main"].scrollTop = 0;
  }
  #Jr(af = "pop") {
    let ag = false;
    if (
      !this.#qr ||
      location.origin !== this.#qr.origin ||
      location.pathname !== this.#qr.pathname ||
      location.search !== this.#qr.search ||
      location.hash !== this.#qr.hash
    ) {
      ag = true;
    }
    if (ag) {
      let ah = this.#qr;
      let aj = new URL(window.location.href);
      this.#_r = ah;
      this.#qr = aj;
      let ak = new CustomEvent("locationchange", {
        detail: {
          method: af,
          fromLocation: ah,
          toLocation: aj,
          state: history.state,
        },
      });
      this.dispatchEvent(ak);
      this.#ii(ak);
    }
  }
  #Kr() {
    return new Promise(async (af) => {
      let ag = a2.getConfig("bx-uisettings:locale", "auto");
      if (ag === "auto") {
        ag = Ze();
      }
      if (He.includes(ag) === false) {
        ag = "en";
      }
      if (ag.includes("-")) {
        let [ah, aj] = ag.split("-");
        a2.locales = [
          "./locales/" + ah + "-" + aj + ".ftl",
          "./locales/" + ah + ".ftl",
        ];
      } else {
        a2.locales = ["./locales/" + ag + ".ftl"];
      }
      await a2.whenLocalesReady;
      document.documentElement.lang = a2.locale;
      af();
    });
  }
  #Wr() {
    return new Promise(async (af) => {
      let ag = a2.getConfig("bx-uisettings:theme", "auto");
      let ah = a2.getConfig("bx-uisettings:colorScheme", "auto");
      if (ag === "cupertino" && le === false) {
        ag = "auto";
      }
      if (ag === "auto") {
        let aj = Ke();
        ag =
          aj === "macos" || aj === "ios"
            ? "cupertino"
            : aj === "windows"
            ? "fluent"
            : "adwaita";
      }
      if (ah === "auto") {
        ah = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      }
      a2.theme =
        ah === "light"
          ? "./themes/" + ag + ".css"
          : "./themes/" + ag + "-dark.css";
      await a2.whenThemeReady;
      this.#hh();
      af();
    });
  }
  #hh() {
    let af = a2.getConfig("bx-uisettings:accentColor", "auto");
    if (af === "auto") {
      af = this.getSystemAccentColorName();
    }
    a2.accentColor = af;
  }
  #ch() {
    return new Promise(async (af) => {
      let ag = location.pathname;
      let ah = this.getAttribute("path") || null;
      if (ag !== ah) {
        if (ag === "/") {
          document.title = "Boxy SVG Editor";
          this["#page-container"].innerHTML = "<bx-homepage></bx-homepage>";
        } else if (ag.startsWith("/blog")) {
          if (ag === "/blog") {
            document.title = "Boxy SVG - Blog";
            this["#page-container"].innerHTML = "<bx-blogpage></bx-blogpage>";
          } else {
            document.title = "Boxy SVG - Blog post #" + ag.split("/")[2];
            this["#page-container"].innerHTML =
              "<bx-blogsubpage></bx-blogsubpage>";
          }
        } else if (ag.startsWith("/tutorials")) {
          document.title = "Boxy SVG - Tutorials";
          if (ah === null || ah.startsWith("/tutorials") === false) {
            this["#page-container"].innerHTML =
              "<bx-tutorialspage></bx-tutorialspage>";
          }
        } else if (ag.startsWith("/bugs")) {
          if (ag === "/bugs") {
            document.title = "Boxy SVG - Bugs";
            this["#page-container"].innerHTML = "<bx-bugspage></bx-bugspage>";
          } else {
            document.title = "Boxy SVG - Bug #" + ag.split("/")[2];
            this["#page-container"].innerHTML =
              "<bx-bugssubpage></bx-bugssubpage>";
          }
        } else if (ag.startsWith("/ideas")) {
          if (ag === "/ideas") {
            document.title = "Boxy SVG - Ideas";
            this["#page-container"].innerHTML = "<bx-ideaspage></bx-ideaspage>";
          } else {
            document.title = "Boxy SVG - Idea #" + ag.split("/")[2];
            this["#page-container"].innerHTML =
              "<bx-ideassubpage></bx-ideassubpage>";
          }
        } else if (ag.startsWith("/questions")) {
          if (ag === "/questions") {
            document.title = "Boxy SVG - Questions";
            this["#page-container"].innerHTML =
              "<bx-questionspage></bx-questionspage>";
          } else {
            document.title = "Boxy SVG - Question #" + ag.split("/")[2];
            this["#page-container"].innerHTML =
              "<bx-questionssubpage></bx-questionssubpage>";
          }
        } else if (ag.startsWith("/share")) {
          document.title = "Boxy SVG - Share";
          this["#page-container"].innerHTML = "<bx-sharepage></bx-sharepage>";
        } else if (ag.startsWith("/profiles")) {
          if (ag === "/profiles") {
            document.title = "Boxy SVG - Error";
            this["#page-container"].innerHTML = "<bx-errorpage></bx-errorpage>";
          } else {
            let aj = ag.split("/")[2];
            let ak = await Bi.database.getDocument("profiles", aj);
            document.title = "Boxy SVG - " + ak.name;
            if (ah === null || ah.startsWith("/profiles/" + aj) === false) {
              this["#page-container"].innerHTML =
                '<bx-profilepage userid="' + aj + '"></bx-profilepage>';
            }
          }
        } else if (ag.startsWith("/legal")) {
          document.title = "Boxy SVG - Legal";
          this["#page-container"].innerHTML =
            ag === "/legal"
              ? "<bx-legalpage></bx-legalpage>"
              : "<bx-legalsubpage></bx-legalsubpage>";
        } else if (ag === "/press") {
          document.title = "Boxy SVG - Press";
          this["#page-container"].innerHTML = "<bx-presspage></bx-presspage>";
        } else if (ag === "/changelog") {
          document.title = "Boxy SVG - Changelog";
          this["#page-container"].innerHTML =
            "<bx-changelogpage></bx-changelogpage>";
        } else if (ag === "/embed") {
          document.title = "Boxy SVG - Embed";
          this["#page-container"].innerHTML = "<bx-embedpage></bx-embedpage>";
        } else if (ag === "/search") {
          document.title = "Boxy SVG - Search";
          this["#page-container"].innerHTML = "<bx-searchpage></bx-searchpage>";
        } else {
          document.title = "Boxy SVG - Error";
          this["#page-container"].innerHTML = "<bx-errorpage></bx-errorpage>";
        }
        this.setAttribute("path", ag);
      }
      af();
    });
  }
  #dh() {
    return new Promise(async (af) => {
      let ag = this["#page-container"].firstElementChild;
      if (ag) {
        await ag.whenReady;
        if (ag.robots) {
          this["#robots-meta"].content = ag.robots;
        } else {
          this["#robots-meta"].content = "index, follow";
        }
        if (ag.canonicalURL) {
          this["#canonical-link"].href = ag.canonicalURL;
        } else {
          this["#canonical-link"].href = location.origin;
        }
      }
      af();
    });
  }
}
customElements.define("bx-portalwebapp", So);